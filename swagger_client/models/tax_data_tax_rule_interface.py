# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TaxDataTaxRuleInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'code': 'str',
        'priority': 'int',
        'position': 'int',
        'customer_tax_class_ids': 'list[int]',
        'product_tax_class_ids': 'list[int]',
        'tax_rate_ids': 'list[int]',
        'calculate_subtotal': 'bool',
        'extension_attributes': 'TaxDataTaxRuleExtensionInterface'
    }

    attribute_map = {
        'id': 'id',
        'code': 'code',
        'priority': 'priority',
        'position': 'position',
        'customer_tax_class_ids': 'customer_tax_class_ids',
        'product_tax_class_ids': 'product_tax_class_ids',
        'tax_rate_ids': 'tax_rate_ids',
        'calculate_subtotal': 'calculate_subtotal',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, id=None, code=None, priority=None, position=None, customer_tax_class_ids=None, product_tax_class_ids=None, tax_rate_ids=None, calculate_subtotal=None, extension_attributes=None):
        """
        TaxDataTaxRuleInterface - a model defined in Swagger
        """

        self._id = None
        self._code = None
        self._priority = None
        self._position = None
        self._customer_tax_class_ids = None
        self._product_tax_class_ids = None
        self._tax_rate_ids = None
        self._calculate_subtotal = None
        self._extension_attributes = None

        if id is not None:
          self.id = id
        self.code = code
        self.priority = priority
        self.position = position
        self.customer_tax_class_ids = customer_tax_class_ids
        self.product_tax_class_ids = product_tax_class_ids
        self.tax_rate_ids = tax_rate_ids
        if calculate_subtotal is not None:
          self.calculate_subtotal = calculate_subtotal
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def id(self):
        """
        Gets the id of this TaxDataTaxRuleInterface.
        Id

        :return: The id of this TaxDataTaxRuleInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this TaxDataTaxRuleInterface.
        Id

        :param id: The id of this TaxDataTaxRuleInterface.
        :type: int
        """

        self._id = id

    @property
    def code(self):
        """
        Gets the code of this TaxDataTaxRuleInterface.
        Tax rule code

        :return: The code of this TaxDataTaxRuleInterface.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this TaxDataTaxRuleInterface.
        Tax rule code

        :param code: The code of this TaxDataTaxRuleInterface.
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def priority(self):
        """
        Gets the priority of this TaxDataTaxRuleInterface.
        Priority

        :return: The priority of this TaxDataTaxRuleInterface.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """
        Sets the priority of this TaxDataTaxRuleInterface.
        Priority

        :param priority: The priority of this TaxDataTaxRuleInterface.
        :type: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")

        self._priority = priority

    @property
    def position(self):
        """
        Gets the position of this TaxDataTaxRuleInterface.
        Sort order.

        :return: The position of this TaxDataTaxRuleInterface.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this TaxDataTaxRuleInterface.
        Sort order.

        :param position: The position of this TaxDataTaxRuleInterface.
        :type: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position

    @property
    def customer_tax_class_ids(self):
        """
        Gets the customer_tax_class_ids of this TaxDataTaxRuleInterface.
        Customer tax class id

        :return: The customer_tax_class_ids of this TaxDataTaxRuleInterface.
        :rtype: list[int]
        """
        return self._customer_tax_class_ids

    @customer_tax_class_ids.setter
    def customer_tax_class_ids(self, customer_tax_class_ids):
        """
        Sets the customer_tax_class_ids of this TaxDataTaxRuleInterface.
        Customer tax class id

        :param customer_tax_class_ids: The customer_tax_class_ids of this TaxDataTaxRuleInterface.
        :type: list[int]
        """
        if customer_tax_class_ids is None:
            raise ValueError("Invalid value for `customer_tax_class_ids`, must not be `None`")

        self._customer_tax_class_ids = customer_tax_class_ids

    @property
    def product_tax_class_ids(self):
        """
        Gets the product_tax_class_ids of this TaxDataTaxRuleInterface.
        Product tax class id

        :return: The product_tax_class_ids of this TaxDataTaxRuleInterface.
        :rtype: list[int]
        """
        return self._product_tax_class_ids

    @product_tax_class_ids.setter
    def product_tax_class_ids(self, product_tax_class_ids):
        """
        Sets the product_tax_class_ids of this TaxDataTaxRuleInterface.
        Product tax class id

        :param product_tax_class_ids: The product_tax_class_ids of this TaxDataTaxRuleInterface.
        :type: list[int]
        """
        if product_tax_class_ids is None:
            raise ValueError("Invalid value for `product_tax_class_ids`, must not be `None`")

        self._product_tax_class_ids = product_tax_class_ids

    @property
    def tax_rate_ids(self):
        """
        Gets the tax_rate_ids of this TaxDataTaxRuleInterface.
        Tax rate ids

        :return: The tax_rate_ids of this TaxDataTaxRuleInterface.
        :rtype: list[int]
        """
        return self._tax_rate_ids

    @tax_rate_ids.setter
    def tax_rate_ids(self, tax_rate_ids):
        """
        Sets the tax_rate_ids of this TaxDataTaxRuleInterface.
        Tax rate ids

        :param tax_rate_ids: The tax_rate_ids of this TaxDataTaxRuleInterface.
        :type: list[int]
        """
        if tax_rate_ids is None:
            raise ValueError("Invalid value for `tax_rate_ids`, must not be `None`")

        self._tax_rate_ids = tax_rate_ids

    @property
    def calculate_subtotal(self):
        """
        Gets the calculate_subtotal of this TaxDataTaxRuleInterface.
        Calculate subtotal.

        :return: The calculate_subtotal of this TaxDataTaxRuleInterface.
        :rtype: bool
        """
        return self._calculate_subtotal

    @calculate_subtotal.setter
    def calculate_subtotal(self, calculate_subtotal):
        """
        Sets the calculate_subtotal of this TaxDataTaxRuleInterface.
        Calculate subtotal.

        :param calculate_subtotal: The calculate_subtotal of this TaxDataTaxRuleInterface.
        :type: bool
        """

        self._calculate_subtotal = calculate_subtotal

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this TaxDataTaxRuleInterface.

        :return: The extension_attributes of this TaxDataTaxRuleInterface.
        :rtype: TaxDataTaxRuleExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this TaxDataTaxRuleInterface.

        :param extension_attributes: The extension_attributes of this TaxDataTaxRuleInterface.
        :type: TaxDataTaxRuleExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TaxDataTaxRuleInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
