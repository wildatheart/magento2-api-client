# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SalesDataInvoiceInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_currency_code': 'str',
        'base_discount_amount': 'float',
        'base_grand_total': 'float',
        'base_discount_tax_compensation_amount': 'float',
        'base_shipping_amount': 'float',
        'base_shipping_discount_tax_compensation_amnt': 'float',
        'base_shipping_incl_tax': 'float',
        'base_shipping_tax_amount': 'float',
        'base_subtotal': 'float',
        'base_subtotal_incl_tax': 'float',
        'base_tax_amount': 'float',
        'base_total_refunded': 'float',
        'base_to_global_rate': 'float',
        'base_to_order_rate': 'float',
        'billing_address_id': 'int',
        'can_void_flag': 'int',
        'created_at': 'str',
        'discount_amount': 'float',
        'discount_description': 'str',
        'email_sent': 'int',
        'entity_id': 'int',
        'global_currency_code': 'str',
        'grand_total': 'float',
        'discount_tax_compensation_amount': 'float',
        'increment_id': 'str',
        'is_used_for_refund': 'int',
        'order_currency_code': 'str',
        'order_id': 'int',
        'shipping_address_id': 'int',
        'shipping_amount': 'float',
        'shipping_discount_tax_compensation_amount': 'float',
        'shipping_incl_tax': 'float',
        'shipping_tax_amount': 'float',
        'state': 'int',
        'store_currency_code': 'str',
        'store_id': 'int',
        'store_to_base_rate': 'float',
        'store_to_order_rate': 'float',
        'subtotal': 'float',
        'subtotal_incl_tax': 'float',
        'tax_amount': 'float',
        'total_qty': 'float',
        'transaction_id': 'str',
        'updated_at': 'str',
        'items': 'list[SalesDataInvoiceItemInterface]',
        'comments': 'list[SalesDataInvoiceCommentInterface]',
        'extension_attributes': 'SalesDataInvoiceExtensionInterface'
    }

    attribute_map = {
        'base_currency_code': 'base_currency_code',
        'base_discount_amount': 'base_discount_amount',
        'base_grand_total': 'base_grand_total',
        'base_discount_tax_compensation_amount': 'base_discount_tax_compensation_amount',
        'base_shipping_amount': 'base_shipping_amount',
        'base_shipping_discount_tax_compensation_amnt': 'base_shipping_discount_tax_compensation_amnt',
        'base_shipping_incl_tax': 'base_shipping_incl_tax',
        'base_shipping_tax_amount': 'base_shipping_tax_amount',
        'base_subtotal': 'base_subtotal',
        'base_subtotal_incl_tax': 'base_subtotal_incl_tax',
        'base_tax_amount': 'base_tax_amount',
        'base_total_refunded': 'base_total_refunded',
        'base_to_global_rate': 'base_to_global_rate',
        'base_to_order_rate': 'base_to_order_rate',
        'billing_address_id': 'billing_address_id',
        'can_void_flag': 'can_void_flag',
        'created_at': 'created_at',
        'discount_amount': 'discount_amount',
        'discount_description': 'discount_description',
        'email_sent': 'email_sent',
        'entity_id': 'entity_id',
        'global_currency_code': 'global_currency_code',
        'grand_total': 'grand_total',
        'discount_tax_compensation_amount': 'discount_tax_compensation_amount',
        'increment_id': 'increment_id',
        'is_used_for_refund': 'is_used_for_refund',
        'order_currency_code': 'order_currency_code',
        'order_id': 'order_id',
        'shipping_address_id': 'shipping_address_id',
        'shipping_amount': 'shipping_amount',
        'shipping_discount_tax_compensation_amount': 'shipping_discount_tax_compensation_amount',
        'shipping_incl_tax': 'shipping_incl_tax',
        'shipping_tax_amount': 'shipping_tax_amount',
        'state': 'state',
        'store_currency_code': 'store_currency_code',
        'store_id': 'store_id',
        'store_to_base_rate': 'store_to_base_rate',
        'store_to_order_rate': 'store_to_order_rate',
        'subtotal': 'subtotal',
        'subtotal_incl_tax': 'subtotal_incl_tax',
        'tax_amount': 'tax_amount',
        'total_qty': 'total_qty',
        'transaction_id': 'transaction_id',
        'updated_at': 'updated_at',
        'items': 'items',
        'comments': 'comments',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, base_currency_code=None, base_discount_amount=None, base_grand_total=None, base_discount_tax_compensation_amount=None, base_shipping_amount=None, base_shipping_discount_tax_compensation_amnt=None, base_shipping_incl_tax=None, base_shipping_tax_amount=None, base_subtotal=None, base_subtotal_incl_tax=None, base_tax_amount=None, base_total_refunded=None, base_to_global_rate=None, base_to_order_rate=None, billing_address_id=None, can_void_flag=None, created_at=None, discount_amount=None, discount_description=None, email_sent=None, entity_id=None, global_currency_code=None, grand_total=None, discount_tax_compensation_amount=None, increment_id=None, is_used_for_refund=None, order_currency_code=None, order_id=None, shipping_address_id=None, shipping_amount=None, shipping_discount_tax_compensation_amount=None, shipping_incl_tax=None, shipping_tax_amount=None, state=None, store_currency_code=None, store_id=None, store_to_base_rate=None, store_to_order_rate=None, subtotal=None, subtotal_incl_tax=None, tax_amount=None, total_qty=None, transaction_id=None, updated_at=None, items=None, comments=None, extension_attributes=None):
        """
        SalesDataInvoiceInterface - a model defined in Swagger
        """

        self._base_currency_code = None
        self._base_discount_amount = None
        self._base_grand_total = None
        self._base_discount_tax_compensation_amount = None
        self._base_shipping_amount = None
        self._base_shipping_discount_tax_compensation_amnt = None
        self._base_shipping_incl_tax = None
        self._base_shipping_tax_amount = None
        self._base_subtotal = None
        self._base_subtotal_incl_tax = None
        self._base_tax_amount = None
        self._base_total_refunded = None
        self._base_to_global_rate = None
        self._base_to_order_rate = None
        self._billing_address_id = None
        self._can_void_flag = None
        self._created_at = None
        self._discount_amount = None
        self._discount_description = None
        self._email_sent = None
        self._entity_id = None
        self._global_currency_code = None
        self._grand_total = None
        self._discount_tax_compensation_amount = None
        self._increment_id = None
        self._is_used_for_refund = None
        self._order_currency_code = None
        self._order_id = None
        self._shipping_address_id = None
        self._shipping_amount = None
        self._shipping_discount_tax_compensation_amount = None
        self._shipping_incl_tax = None
        self._shipping_tax_amount = None
        self._state = None
        self._store_currency_code = None
        self._store_id = None
        self._store_to_base_rate = None
        self._store_to_order_rate = None
        self._subtotal = None
        self._subtotal_incl_tax = None
        self._tax_amount = None
        self._total_qty = None
        self._transaction_id = None
        self._updated_at = None
        self._items = None
        self._comments = None
        self._extension_attributes = None

        if base_currency_code is not None:
          self.base_currency_code = base_currency_code
        if base_discount_amount is not None:
          self.base_discount_amount = base_discount_amount
        if base_grand_total is not None:
          self.base_grand_total = base_grand_total
        if base_discount_tax_compensation_amount is not None:
          self.base_discount_tax_compensation_amount = base_discount_tax_compensation_amount
        if base_shipping_amount is not None:
          self.base_shipping_amount = base_shipping_amount
        if base_shipping_discount_tax_compensation_amnt is not None:
          self.base_shipping_discount_tax_compensation_amnt = base_shipping_discount_tax_compensation_amnt
        if base_shipping_incl_tax is not None:
          self.base_shipping_incl_tax = base_shipping_incl_tax
        if base_shipping_tax_amount is not None:
          self.base_shipping_tax_amount = base_shipping_tax_amount
        if base_subtotal is not None:
          self.base_subtotal = base_subtotal
        if base_subtotal_incl_tax is not None:
          self.base_subtotal_incl_tax = base_subtotal_incl_tax
        if base_tax_amount is not None:
          self.base_tax_amount = base_tax_amount
        if base_total_refunded is not None:
          self.base_total_refunded = base_total_refunded
        if base_to_global_rate is not None:
          self.base_to_global_rate = base_to_global_rate
        if base_to_order_rate is not None:
          self.base_to_order_rate = base_to_order_rate
        if billing_address_id is not None:
          self.billing_address_id = billing_address_id
        if can_void_flag is not None:
          self.can_void_flag = can_void_flag
        if created_at is not None:
          self.created_at = created_at
        if discount_amount is not None:
          self.discount_amount = discount_amount
        if discount_description is not None:
          self.discount_description = discount_description
        if email_sent is not None:
          self.email_sent = email_sent
        if entity_id is not None:
          self.entity_id = entity_id
        if global_currency_code is not None:
          self.global_currency_code = global_currency_code
        if grand_total is not None:
          self.grand_total = grand_total
        if discount_tax_compensation_amount is not None:
          self.discount_tax_compensation_amount = discount_tax_compensation_amount
        if increment_id is not None:
          self.increment_id = increment_id
        if is_used_for_refund is not None:
          self.is_used_for_refund = is_used_for_refund
        if order_currency_code is not None:
          self.order_currency_code = order_currency_code
        self.order_id = order_id
        if shipping_address_id is not None:
          self.shipping_address_id = shipping_address_id
        if shipping_amount is not None:
          self.shipping_amount = shipping_amount
        if shipping_discount_tax_compensation_amount is not None:
          self.shipping_discount_tax_compensation_amount = shipping_discount_tax_compensation_amount
        if shipping_incl_tax is not None:
          self.shipping_incl_tax = shipping_incl_tax
        if shipping_tax_amount is not None:
          self.shipping_tax_amount = shipping_tax_amount
        if state is not None:
          self.state = state
        if store_currency_code is not None:
          self.store_currency_code = store_currency_code
        if store_id is not None:
          self.store_id = store_id
        if store_to_base_rate is not None:
          self.store_to_base_rate = store_to_base_rate
        if store_to_order_rate is not None:
          self.store_to_order_rate = store_to_order_rate
        if subtotal is not None:
          self.subtotal = subtotal
        if subtotal_incl_tax is not None:
          self.subtotal_incl_tax = subtotal_incl_tax
        if tax_amount is not None:
          self.tax_amount = tax_amount
        self.total_qty = total_qty
        if transaction_id is not None:
          self.transaction_id = transaction_id
        if updated_at is not None:
          self.updated_at = updated_at
        self.items = items
        if comments is not None:
          self.comments = comments
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def base_currency_code(self):
        """
        Gets the base_currency_code of this SalesDataInvoiceInterface.
        Base currency code.

        :return: The base_currency_code of this SalesDataInvoiceInterface.
        :rtype: str
        """
        return self._base_currency_code

    @base_currency_code.setter
    def base_currency_code(self, base_currency_code):
        """
        Sets the base_currency_code of this SalesDataInvoiceInterface.
        Base currency code.

        :param base_currency_code: The base_currency_code of this SalesDataInvoiceInterface.
        :type: str
        """

        self._base_currency_code = base_currency_code

    @property
    def base_discount_amount(self):
        """
        Gets the base_discount_amount of this SalesDataInvoiceInterface.
        Base discount amount.

        :return: The base_discount_amount of this SalesDataInvoiceInterface.
        :rtype: float
        """
        return self._base_discount_amount

    @base_discount_amount.setter
    def base_discount_amount(self, base_discount_amount):
        """
        Sets the base_discount_amount of this SalesDataInvoiceInterface.
        Base discount amount.

        :param base_discount_amount: The base_discount_amount of this SalesDataInvoiceInterface.
        :type: float
        """

        self._base_discount_amount = base_discount_amount

    @property
    def base_grand_total(self):
        """
        Gets the base_grand_total of this SalesDataInvoiceInterface.
        Base grand total.

        :return: The base_grand_total of this SalesDataInvoiceInterface.
        :rtype: float
        """
        return self._base_grand_total

    @base_grand_total.setter
    def base_grand_total(self, base_grand_total):
        """
        Sets the base_grand_total of this SalesDataInvoiceInterface.
        Base grand total.

        :param base_grand_total: The base_grand_total of this SalesDataInvoiceInterface.
        :type: float
        """

        self._base_grand_total = base_grand_total

    @property
    def base_discount_tax_compensation_amount(self):
        """
        Gets the base_discount_tax_compensation_amount of this SalesDataInvoiceInterface.
        Base discount tax compensation amount.

        :return: The base_discount_tax_compensation_amount of this SalesDataInvoiceInterface.
        :rtype: float
        """
        return self._base_discount_tax_compensation_amount

    @base_discount_tax_compensation_amount.setter
    def base_discount_tax_compensation_amount(self, base_discount_tax_compensation_amount):
        """
        Sets the base_discount_tax_compensation_amount of this SalesDataInvoiceInterface.
        Base discount tax compensation amount.

        :param base_discount_tax_compensation_amount: The base_discount_tax_compensation_amount of this SalesDataInvoiceInterface.
        :type: float
        """

        self._base_discount_tax_compensation_amount = base_discount_tax_compensation_amount

    @property
    def base_shipping_amount(self):
        """
        Gets the base_shipping_amount of this SalesDataInvoiceInterface.
        Base shipping amount.

        :return: The base_shipping_amount of this SalesDataInvoiceInterface.
        :rtype: float
        """
        return self._base_shipping_amount

    @base_shipping_amount.setter
    def base_shipping_amount(self, base_shipping_amount):
        """
        Sets the base_shipping_amount of this SalesDataInvoiceInterface.
        Base shipping amount.

        :param base_shipping_amount: The base_shipping_amount of this SalesDataInvoiceInterface.
        :type: float
        """

        self._base_shipping_amount = base_shipping_amount

    @property
    def base_shipping_discount_tax_compensation_amnt(self):
        """
        Gets the base_shipping_discount_tax_compensation_amnt of this SalesDataInvoiceInterface.
        Base shipping discount tax compensation amount.

        :return: The base_shipping_discount_tax_compensation_amnt of this SalesDataInvoiceInterface.
        :rtype: float
        """
        return self._base_shipping_discount_tax_compensation_amnt

    @base_shipping_discount_tax_compensation_amnt.setter
    def base_shipping_discount_tax_compensation_amnt(self, base_shipping_discount_tax_compensation_amnt):
        """
        Sets the base_shipping_discount_tax_compensation_amnt of this SalesDataInvoiceInterface.
        Base shipping discount tax compensation amount.

        :param base_shipping_discount_tax_compensation_amnt: The base_shipping_discount_tax_compensation_amnt of this SalesDataInvoiceInterface.
        :type: float
        """

        self._base_shipping_discount_tax_compensation_amnt = base_shipping_discount_tax_compensation_amnt

    @property
    def base_shipping_incl_tax(self):
        """
        Gets the base_shipping_incl_tax of this SalesDataInvoiceInterface.
        Base shipping including tax.

        :return: The base_shipping_incl_tax of this SalesDataInvoiceInterface.
        :rtype: float
        """
        return self._base_shipping_incl_tax

    @base_shipping_incl_tax.setter
    def base_shipping_incl_tax(self, base_shipping_incl_tax):
        """
        Sets the base_shipping_incl_tax of this SalesDataInvoiceInterface.
        Base shipping including tax.

        :param base_shipping_incl_tax: The base_shipping_incl_tax of this SalesDataInvoiceInterface.
        :type: float
        """

        self._base_shipping_incl_tax = base_shipping_incl_tax

    @property
    def base_shipping_tax_amount(self):
        """
        Gets the base_shipping_tax_amount of this SalesDataInvoiceInterface.
        Base shipping tax amount.

        :return: The base_shipping_tax_amount of this SalesDataInvoiceInterface.
        :rtype: float
        """
        return self._base_shipping_tax_amount

    @base_shipping_tax_amount.setter
    def base_shipping_tax_amount(self, base_shipping_tax_amount):
        """
        Sets the base_shipping_tax_amount of this SalesDataInvoiceInterface.
        Base shipping tax amount.

        :param base_shipping_tax_amount: The base_shipping_tax_amount of this SalesDataInvoiceInterface.
        :type: float
        """

        self._base_shipping_tax_amount = base_shipping_tax_amount

    @property
    def base_subtotal(self):
        """
        Gets the base_subtotal of this SalesDataInvoiceInterface.
        Base subtotal.

        :return: The base_subtotal of this SalesDataInvoiceInterface.
        :rtype: float
        """
        return self._base_subtotal

    @base_subtotal.setter
    def base_subtotal(self, base_subtotal):
        """
        Sets the base_subtotal of this SalesDataInvoiceInterface.
        Base subtotal.

        :param base_subtotal: The base_subtotal of this SalesDataInvoiceInterface.
        :type: float
        """

        self._base_subtotal = base_subtotal

    @property
    def base_subtotal_incl_tax(self):
        """
        Gets the base_subtotal_incl_tax of this SalesDataInvoiceInterface.
        Base subtotal including tax.

        :return: The base_subtotal_incl_tax of this SalesDataInvoiceInterface.
        :rtype: float
        """
        return self._base_subtotal_incl_tax

    @base_subtotal_incl_tax.setter
    def base_subtotal_incl_tax(self, base_subtotal_incl_tax):
        """
        Sets the base_subtotal_incl_tax of this SalesDataInvoiceInterface.
        Base subtotal including tax.

        :param base_subtotal_incl_tax: The base_subtotal_incl_tax of this SalesDataInvoiceInterface.
        :type: float
        """

        self._base_subtotal_incl_tax = base_subtotal_incl_tax

    @property
    def base_tax_amount(self):
        """
        Gets the base_tax_amount of this SalesDataInvoiceInterface.
        Base tax amount.

        :return: The base_tax_amount of this SalesDataInvoiceInterface.
        :rtype: float
        """
        return self._base_tax_amount

    @base_tax_amount.setter
    def base_tax_amount(self, base_tax_amount):
        """
        Sets the base_tax_amount of this SalesDataInvoiceInterface.
        Base tax amount.

        :param base_tax_amount: The base_tax_amount of this SalesDataInvoiceInterface.
        :type: float
        """

        self._base_tax_amount = base_tax_amount

    @property
    def base_total_refunded(self):
        """
        Gets the base_total_refunded of this SalesDataInvoiceInterface.
        Base total refunded.

        :return: The base_total_refunded of this SalesDataInvoiceInterface.
        :rtype: float
        """
        return self._base_total_refunded

    @base_total_refunded.setter
    def base_total_refunded(self, base_total_refunded):
        """
        Sets the base_total_refunded of this SalesDataInvoiceInterface.
        Base total refunded.

        :param base_total_refunded: The base_total_refunded of this SalesDataInvoiceInterface.
        :type: float
        """

        self._base_total_refunded = base_total_refunded

    @property
    def base_to_global_rate(self):
        """
        Gets the base_to_global_rate of this SalesDataInvoiceInterface.
        Base-to-global rate.

        :return: The base_to_global_rate of this SalesDataInvoiceInterface.
        :rtype: float
        """
        return self._base_to_global_rate

    @base_to_global_rate.setter
    def base_to_global_rate(self, base_to_global_rate):
        """
        Sets the base_to_global_rate of this SalesDataInvoiceInterface.
        Base-to-global rate.

        :param base_to_global_rate: The base_to_global_rate of this SalesDataInvoiceInterface.
        :type: float
        """

        self._base_to_global_rate = base_to_global_rate

    @property
    def base_to_order_rate(self):
        """
        Gets the base_to_order_rate of this SalesDataInvoiceInterface.
        Base-to-order rate.

        :return: The base_to_order_rate of this SalesDataInvoiceInterface.
        :rtype: float
        """
        return self._base_to_order_rate

    @base_to_order_rate.setter
    def base_to_order_rate(self, base_to_order_rate):
        """
        Sets the base_to_order_rate of this SalesDataInvoiceInterface.
        Base-to-order rate.

        :param base_to_order_rate: The base_to_order_rate of this SalesDataInvoiceInterface.
        :type: float
        """

        self._base_to_order_rate = base_to_order_rate

    @property
    def billing_address_id(self):
        """
        Gets the billing_address_id of this SalesDataInvoiceInterface.
        Billing address ID.

        :return: The billing_address_id of this SalesDataInvoiceInterface.
        :rtype: int
        """
        return self._billing_address_id

    @billing_address_id.setter
    def billing_address_id(self, billing_address_id):
        """
        Sets the billing_address_id of this SalesDataInvoiceInterface.
        Billing address ID.

        :param billing_address_id: The billing_address_id of this SalesDataInvoiceInterface.
        :type: int
        """

        self._billing_address_id = billing_address_id

    @property
    def can_void_flag(self):
        """
        Gets the can_void_flag of this SalesDataInvoiceInterface.
        Can void flag value.

        :return: The can_void_flag of this SalesDataInvoiceInterface.
        :rtype: int
        """
        return self._can_void_flag

    @can_void_flag.setter
    def can_void_flag(self, can_void_flag):
        """
        Sets the can_void_flag of this SalesDataInvoiceInterface.
        Can void flag value.

        :param can_void_flag: The can_void_flag of this SalesDataInvoiceInterface.
        :type: int
        """

        self._can_void_flag = can_void_flag

    @property
    def created_at(self):
        """
        Gets the created_at of this SalesDataInvoiceInterface.
        Created-at timestamp.

        :return: The created_at of this SalesDataInvoiceInterface.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this SalesDataInvoiceInterface.
        Created-at timestamp.

        :param created_at: The created_at of this SalesDataInvoiceInterface.
        :type: str
        """

        self._created_at = created_at

    @property
    def discount_amount(self):
        """
        Gets the discount_amount of this SalesDataInvoiceInterface.
        Discount amount.

        :return: The discount_amount of this SalesDataInvoiceInterface.
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """
        Sets the discount_amount of this SalesDataInvoiceInterface.
        Discount amount.

        :param discount_amount: The discount_amount of this SalesDataInvoiceInterface.
        :type: float
        """

        self._discount_amount = discount_amount

    @property
    def discount_description(self):
        """
        Gets the discount_description of this SalesDataInvoiceInterface.
        Discount description.

        :return: The discount_description of this SalesDataInvoiceInterface.
        :rtype: str
        """
        return self._discount_description

    @discount_description.setter
    def discount_description(self, discount_description):
        """
        Sets the discount_description of this SalesDataInvoiceInterface.
        Discount description.

        :param discount_description: The discount_description of this SalesDataInvoiceInterface.
        :type: str
        """

        self._discount_description = discount_description

    @property
    def email_sent(self):
        """
        Gets the email_sent of this SalesDataInvoiceInterface.
        Email-sent flag value.

        :return: The email_sent of this SalesDataInvoiceInterface.
        :rtype: int
        """
        return self._email_sent

    @email_sent.setter
    def email_sent(self, email_sent):
        """
        Sets the email_sent of this SalesDataInvoiceInterface.
        Email-sent flag value.

        :param email_sent: The email_sent of this SalesDataInvoiceInterface.
        :type: int
        """

        self._email_sent = email_sent

    @property
    def entity_id(self):
        """
        Gets the entity_id of this SalesDataInvoiceInterface.
        Invoice ID.

        :return: The entity_id of this SalesDataInvoiceInterface.
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this SalesDataInvoiceInterface.
        Invoice ID.

        :param entity_id: The entity_id of this SalesDataInvoiceInterface.
        :type: int
        """

        self._entity_id = entity_id

    @property
    def global_currency_code(self):
        """
        Gets the global_currency_code of this SalesDataInvoiceInterface.
        Global currency code.

        :return: The global_currency_code of this SalesDataInvoiceInterface.
        :rtype: str
        """
        return self._global_currency_code

    @global_currency_code.setter
    def global_currency_code(self, global_currency_code):
        """
        Sets the global_currency_code of this SalesDataInvoiceInterface.
        Global currency code.

        :param global_currency_code: The global_currency_code of this SalesDataInvoiceInterface.
        :type: str
        """

        self._global_currency_code = global_currency_code

    @property
    def grand_total(self):
        """
        Gets the grand_total of this SalesDataInvoiceInterface.
        Grand total.

        :return: The grand_total of this SalesDataInvoiceInterface.
        :rtype: float
        """
        return self._grand_total

    @grand_total.setter
    def grand_total(self, grand_total):
        """
        Sets the grand_total of this SalesDataInvoiceInterface.
        Grand total.

        :param grand_total: The grand_total of this SalesDataInvoiceInterface.
        :type: float
        """

        self._grand_total = grand_total

    @property
    def discount_tax_compensation_amount(self):
        """
        Gets the discount_tax_compensation_amount of this SalesDataInvoiceInterface.
        Discount tax compensation amount.

        :return: The discount_tax_compensation_amount of this SalesDataInvoiceInterface.
        :rtype: float
        """
        return self._discount_tax_compensation_amount

    @discount_tax_compensation_amount.setter
    def discount_tax_compensation_amount(self, discount_tax_compensation_amount):
        """
        Sets the discount_tax_compensation_amount of this SalesDataInvoiceInterface.
        Discount tax compensation amount.

        :param discount_tax_compensation_amount: The discount_tax_compensation_amount of this SalesDataInvoiceInterface.
        :type: float
        """

        self._discount_tax_compensation_amount = discount_tax_compensation_amount

    @property
    def increment_id(self):
        """
        Gets the increment_id of this SalesDataInvoiceInterface.
        Increment ID.

        :return: The increment_id of this SalesDataInvoiceInterface.
        :rtype: str
        """
        return self._increment_id

    @increment_id.setter
    def increment_id(self, increment_id):
        """
        Sets the increment_id of this SalesDataInvoiceInterface.
        Increment ID.

        :param increment_id: The increment_id of this SalesDataInvoiceInterface.
        :type: str
        """

        self._increment_id = increment_id

    @property
    def is_used_for_refund(self):
        """
        Gets the is_used_for_refund of this SalesDataInvoiceInterface.
        Is-used-for-refund flag value.

        :return: The is_used_for_refund of this SalesDataInvoiceInterface.
        :rtype: int
        """
        return self._is_used_for_refund

    @is_used_for_refund.setter
    def is_used_for_refund(self, is_used_for_refund):
        """
        Sets the is_used_for_refund of this SalesDataInvoiceInterface.
        Is-used-for-refund flag value.

        :param is_used_for_refund: The is_used_for_refund of this SalesDataInvoiceInterface.
        :type: int
        """

        self._is_used_for_refund = is_used_for_refund

    @property
    def order_currency_code(self):
        """
        Gets the order_currency_code of this SalesDataInvoiceInterface.
        Order currency code.

        :return: The order_currency_code of this SalesDataInvoiceInterface.
        :rtype: str
        """
        return self._order_currency_code

    @order_currency_code.setter
    def order_currency_code(self, order_currency_code):
        """
        Sets the order_currency_code of this SalesDataInvoiceInterface.
        Order currency code.

        :param order_currency_code: The order_currency_code of this SalesDataInvoiceInterface.
        :type: str
        """

        self._order_currency_code = order_currency_code

    @property
    def order_id(self):
        """
        Gets the order_id of this SalesDataInvoiceInterface.
        Order ID.

        :return: The order_id of this SalesDataInvoiceInterface.
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """
        Sets the order_id of this SalesDataInvoiceInterface.
        Order ID.

        :param order_id: The order_id of this SalesDataInvoiceInterface.
        :type: int
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")

        self._order_id = order_id

    @property
    def shipping_address_id(self):
        """
        Gets the shipping_address_id of this SalesDataInvoiceInterface.
        Shipping address ID.

        :return: The shipping_address_id of this SalesDataInvoiceInterface.
        :rtype: int
        """
        return self._shipping_address_id

    @shipping_address_id.setter
    def shipping_address_id(self, shipping_address_id):
        """
        Sets the shipping_address_id of this SalesDataInvoiceInterface.
        Shipping address ID.

        :param shipping_address_id: The shipping_address_id of this SalesDataInvoiceInterface.
        :type: int
        """

        self._shipping_address_id = shipping_address_id

    @property
    def shipping_amount(self):
        """
        Gets the shipping_amount of this SalesDataInvoiceInterface.
        Shipping amount.

        :return: The shipping_amount of this SalesDataInvoiceInterface.
        :rtype: float
        """
        return self._shipping_amount

    @shipping_amount.setter
    def shipping_amount(self, shipping_amount):
        """
        Sets the shipping_amount of this SalesDataInvoiceInterface.
        Shipping amount.

        :param shipping_amount: The shipping_amount of this SalesDataInvoiceInterface.
        :type: float
        """

        self._shipping_amount = shipping_amount

    @property
    def shipping_discount_tax_compensation_amount(self):
        """
        Gets the shipping_discount_tax_compensation_amount of this SalesDataInvoiceInterface.
        Shipping discount tax compensation amount.

        :return: The shipping_discount_tax_compensation_amount of this SalesDataInvoiceInterface.
        :rtype: float
        """
        return self._shipping_discount_tax_compensation_amount

    @shipping_discount_tax_compensation_amount.setter
    def shipping_discount_tax_compensation_amount(self, shipping_discount_tax_compensation_amount):
        """
        Sets the shipping_discount_tax_compensation_amount of this SalesDataInvoiceInterface.
        Shipping discount tax compensation amount.

        :param shipping_discount_tax_compensation_amount: The shipping_discount_tax_compensation_amount of this SalesDataInvoiceInterface.
        :type: float
        """

        self._shipping_discount_tax_compensation_amount = shipping_discount_tax_compensation_amount

    @property
    def shipping_incl_tax(self):
        """
        Gets the shipping_incl_tax of this SalesDataInvoiceInterface.
        Shipping including tax.

        :return: The shipping_incl_tax of this SalesDataInvoiceInterface.
        :rtype: float
        """
        return self._shipping_incl_tax

    @shipping_incl_tax.setter
    def shipping_incl_tax(self, shipping_incl_tax):
        """
        Sets the shipping_incl_tax of this SalesDataInvoiceInterface.
        Shipping including tax.

        :param shipping_incl_tax: The shipping_incl_tax of this SalesDataInvoiceInterface.
        :type: float
        """

        self._shipping_incl_tax = shipping_incl_tax

    @property
    def shipping_tax_amount(self):
        """
        Gets the shipping_tax_amount of this SalesDataInvoiceInterface.
        Shipping tax amount.

        :return: The shipping_tax_amount of this SalesDataInvoiceInterface.
        :rtype: float
        """
        return self._shipping_tax_amount

    @shipping_tax_amount.setter
    def shipping_tax_amount(self, shipping_tax_amount):
        """
        Sets the shipping_tax_amount of this SalesDataInvoiceInterface.
        Shipping tax amount.

        :param shipping_tax_amount: The shipping_tax_amount of this SalesDataInvoiceInterface.
        :type: float
        """

        self._shipping_tax_amount = shipping_tax_amount

    @property
    def state(self):
        """
        Gets the state of this SalesDataInvoiceInterface.
        State.

        :return: The state of this SalesDataInvoiceInterface.
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this SalesDataInvoiceInterface.
        State.

        :param state: The state of this SalesDataInvoiceInterface.
        :type: int
        """

        self._state = state

    @property
    def store_currency_code(self):
        """
        Gets the store_currency_code of this SalesDataInvoiceInterface.
        Store currency code.

        :return: The store_currency_code of this SalesDataInvoiceInterface.
        :rtype: str
        """
        return self._store_currency_code

    @store_currency_code.setter
    def store_currency_code(self, store_currency_code):
        """
        Sets the store_currency_code of this SalesDataInvoiceInterface.
        Store currency code.

        :param store_currency_code: The store_currency_code of this SalesDataInvoiceInterface.
        :type: str
        """

        self._store_currency_code = store_currency_code

    @property
    def store_id(self):
        """
        Gets the store_id of this SalesDataInvoiceInterface.
        Store ID.

        :return: The store_id of this SalesDataInvoiceInterface.
        :rtype: int
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """
        Sets the store_id of this SalesDataInvoiceInterface.
        Store ID.

        :param store_id: The store_id of this SalesDataInvoiceInterface.
        :type: int
        """

        self._store_id = store_id

    @property
    def store_to_base_rate(self):
        """
        Gets the store_to_base_rate of this SalesDataInvoiceInterface.
        Store-to-base rate.

        :return: The store_to_base_rate of this SalesDataInvoiceInterface.
        :rtype: float
        """
        return self._store_to_base_rate

    @store_to_base_rate.setter
    def store_to_base_rate(self, store_to_base_rate):
        """
        Sets the store_to_base_rate of this SalesDataInvoiceInterface.
        Store-to-base rate.

        :param store_to_base_rate: The store_to_base_rate of this SalesDataInvoiceInterface.
        :type: float
        """

        self._store_to_base_rate = store_to_base_rate

    @property
    def store_to_order_rate(self):
        """
        Gets the store_to_order_rate of this SalesDataInvoiceInterface.
        Store-to-order rate.

        :return: The store_to_order_rate of this SalesDataInvoiceInterface.
        :rtype: float
        """
        return self._store_to_order_rate

    @store_to_order_rate.setter
    def store_to_order_rate(self, store_to_order_rate):
        """
        Sets the store_to_order_rate of this SalesDataInvoiceInterface.
        Store-to-order rate.

        :param store_to_order_rate: The store_to_order_rate of this SalesDataInvoiceInterface.
        :type: float
        """

        self._store_to_order_rate = store_to_order_rate

    @property
    def subtotal(self):
        """
        Gets the subtotal of this SalesDataInvoiceInterface.
        Subtotal.

        :return: The subtotal of this SalesDataInvoiceInterface.
        :rtype: float
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """
        Sets the subtotal of this SalesDataInvoiceInterface.
        Subtotal.

        :param subtotal: The subtotal of this SalesDataInvoiceInterface.
        :type: float
        """

        self._subtotal = subtotal

    @property
    def subtotal_incl_tax(self):
        """
        Gets the subtotal_incl_tax of this SalesDataInvoiceInterface.
        Subtotal including tax.

        :return: The subtotal_incl_tax of this SalesDataInvoiceInterface.
        :rtype: float
        """
        return self._subtotal_incl_tax

    @subtotal_incl_tax.setter
    def subtotal_incl_tax(self, subtotal_incl_tax):
        """
        Sets the subtotal_incl_tax of this SalesDataInvoiceInterface.
        Subtotal including tax.

        :param subtotal_incl_tax: The subtotal_incl_tax of this SalesDataInvoiceInterface.
        :type: float
        """

        self._subtotal_incl_tax = subtotal_incl_tax

    @property
    def tax_amount(self):
        """
        Gets the tax_amount of this SalesDataInvoiceInterface.
        Tax amount.

        :return: The tax_amount of this SalesDataInvoiceInterface.
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """
        Sets the tax_amount of this SalesDataInvoiceInterface.
        Tax amount.

        :param tax_amount: The tax_amount of this SalesDataInvoiceInterface.
        :type: float
        """

        self._tax_amount = tax_amount

    @property
    def total_qty(self):
        """
        Gets the total_qty of this SalesDataInvoiceInterface.
        Total quantity.

        :return: The total_qty of this SalesDataInvoiceInterface.
        :rtype: float
        """
        return self._total_qty

    @total_qty.setter
    def total_qty(self, total_qty):
        """
        Sets the total_qty of this SalesDataInvoiceInterface.
        Total quantity.

        :param total_qty: The total_qty of this SalesDataInvoiceInterface.
        :type: float
        """
        if total_qty is None:
            raise ValueError("Invalid value for `total_qty`, must not be `None`")

        self._total_qty = total_qty

    @property
    def transaction_id(self):
        """
        Gets the transaction_id of this SalesDataInvoiceInterface.
        Transaction ID.

        :return: The transaction_id of this SalesDataInvoiceInterface.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """
        Sets the transaction_id of this SalesDataInvoiceInterface.
        Transaction ID.

        :param transaction_id: The transaction_id of this SalesDataInvoiceInterface.
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def updated_at(self):
        """
        Gets the updated_at of this SalesDataInvoiceInterface.
        Updated-at timestamp.

        :return: The updated_at of this SalesDataInvoiceInterface.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this SalesDataInvoiceInterface.
        Updated-at timestamp.

        :param updated_at: The updated_at of this SalesDataInvoiceInterface.
        :type: str
        """

        self._updated_at = updated_at

    @property
    def items(self):
        """
        Gets the items of this SalesDataInvoiceInterface.
        Array of invoice items.

        :return: The items of this SalesDataInvoiceInterface.
        :rtype: list[SalesDataInvoiceItemInterface]
        """
        return self._items

    @items.setter
    def items(self, items):
        """
        Sets the items of this SalesDataInvoiceInterface.
        Array of invoice items.

        :param items: The items of this SalesDataInvoiceInterface.
        :type: list[SalesDataInvoiceItemInterface]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def comments(self):
        """
        Gets the comments of this SalesDataInvoiceInterface.
        Array of any invoice comments. Otherwise, null.

        :return: The comments of this SalesDataInvoiceInterface.
        :rtype: list[SalesDataInvoiceCommentInterface]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """
        Sets the comments of this SalesDataInvoiceInterface.
        Array of any invoice comments. Otherwise, null.

        :param comments: The comments of this SalesDataInvoiceInterface.
        :type: list[SalesDataInvoiceCommentInterface]
        """

        self._comments = comments

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this SalesDataInvoiceInterface.

        :return: The extension_attributes of this SalesDataInvoiceInterface.
        :rtype: SalesDataInvoiceExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this SalesDataInvoiceInterface.

        :param extension_attributes: The extension_attributes of this SalesDataInvoiceInterface.
        :type: SalesDataInvoiceExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SalesDataInvoiceInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
