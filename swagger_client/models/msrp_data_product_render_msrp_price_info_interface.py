# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MsrpDataProductRenderMsrpPriceInfoInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'msrp_price': 'str',
        'is_applicable': 'str',
        'is_shown_price_on_gesture': 'str',
        'msrp_message': 'str',
        'explanation_message': 'str',
        'extension_attributes': 'MsrpDataProductRenderMsrpPriceInfoExtensionInterface'
    }

    attribute_map = {
        'msrp_price': 'msrp_price',
        'is_applicable': 'is_applicable',
        'is_shown_price_on_gesture': 'is_shown_price_on_gesture',
        'msrp_message': 'msrp_message',
        'explanation_message': 'explanation_message',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, msrp_price=None, is_applicable=None, is_shown_price_on_gesture=None, msrp_message=None, explanation_message=None, extension_attributes=None):
        """
        MsrpDataProductRenderMsrpPriceInfoInterface - a model defined in Swagger
        """

        self._msrp_price = None
        self._is_applicable = None
        self._is_shown_price_on_gesture = None
        self._msrp_message = None
        self._explanation_message = None
        self._extension_attributes = None

        self.msrp_price = msrp_price
        self.is_applicable = is_applicable
        self.is_shown_price_on_gesture = is_shown_price_on_gesture
        self.msrp_message = msrp_message
        self.explanation_message = explanation_message
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def msrp_price(self):
        """
        Gets the msrp_price of this MsrpDataProductRenderMsrpPriceInfoInterface.

        :return: The msrp_price of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :rtype: str
        """
        return self._msrp_price

    @msrp_price.setter
    def msrp_price(self, msrp_price):
        """
        Sets the msrp_price of this MsrpDataProductRenderMsrpPriceInfoInterface.

        :param msrp_price: The msrp_price of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :type: str
        """
        if msrp_price is None:
            raise ValueError("Invalid value for `msrp_price`, must not be `None`")

        self._msrp_price = msrp_price

    @property
    def is_applicable(self):
        """
        Gets the is_applicable of this MsrpDataProductRenderMsrpPriceInfoInterface.

        :return: The is_applicable of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :rtype: str
        """
        return self._is_applicable

    @is_applicable.setter
    def is_applicable(self, is_applicable):
        """
        Sets the is_applicable of this MsrpDataProductRenderMsrpPriceInfoInterface.

        :param is_applicable: The is_applicable of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :type: str
        """
        if is_applicable is None:
            raise ValueError("Invalid value for `is_applicable`, must not be `None`")

        self._is_applicable = is_applicable

    @property
    def is_shown_price_on_gesture(self):
        """
        Gets the is_shown_price_on_gesture of this MsrpDataProductRenderMsrpPriceInfoInterface.

        :return: The is_shown_price_on_gesture of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :rtype: str
        """
        return self._is_shown_price_on_gesture

    @is_shown_price_on_gesture.setter
    def is_shown_price_on_gesture(self, is_shown_price_on_gesture):
        """
        Sets the is_shown_price_on_gesture of this MsrpDataProductRenderMsrpPriceInfoInterface.

        :param is_shown_price_on_gesture: The is_shown_price_on_gesture of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :type: str
        """
        if is_shown_price_on_gesture is None:
            raise ValueError("Invalid value for `is_shown_price_on_gesture`, must not be `None`")

        self._is_shown_price_on_gesture = is_shown_price_on_gesture

    @property
    def msrp_message(self):
        """
        Gets the msrp_message of this MsrpDataProductRenderMsrpPriceInfoInterface.

        :return: The msrp_message of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :rtype: str
        """
        return self._msrp_message

    @msrp_message.setter
    def msrp_message(self, msrp_message):
        """
        Sets the msrp_message of this MsrpDataProductRenderMsrpPriceInfoInterface.

        :param msrp_message: The msrp_message of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :type: str
        """
        if msrp_message is None:
            raise ValueError("Invalid value for `msrp_message`, must not be `None`")

        self._msrp_message = msrp_message

    @property
    def explanation_message(self):
        """
        Gets the explanation_message of this MsrpDataProductRenderMsrpPriceInfoInterface.

        :return: The explanation_message of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :rtype: str
        """
        return self._explanation_message

    @explanation_message.setter
    def explanation_message(self, explanation_message):
        """
        Sets the explanation_message of this MsrpDataProductRenderMsrpPriceInfoInterface.

        :param explanation_message: The explanation_message of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :type: str
        """
        if explanation_message is None:
            raise ValueError("Invalid value for `explanation_message`, must not be `None`")

        self._explanation_message = explanation_message

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this MsrpDataProductRenderMsrpPriceInfoInterface.

        :return: The extension_attributes of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :rtype: MsrpDataProductRenderMsrpPriceInfoExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this MsrpDataProductRenderMsrpPriceInfoInterface.

        :param extension_attributes: The extension_attributes of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :type: MsrpDataProductRenderMsrpPriceInfoExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MsrpDataProductRenderMsrpPriceInfoInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
