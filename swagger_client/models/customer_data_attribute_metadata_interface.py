# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CustomerDataAttributeMetadataInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'frontend_input': 'str',
        'input_filter': 'str',
        'store_label': 'str',
        'validation_rules': 'list[CustomerDataValidationRuleInterface]',
        'multiline_count': 'int',
        'visible': 'bool',
        'required': 'bool',
        'data_model': 'str',
        'options': 'list[CustomerDataOptionInterface]',
        'frontend_class': 'str',
        'user_defined': 'bool',
        'sort_order': 'int',
        'frontend_label': 'str',
        'note': 'str',
        'system': 'bool',
        'backend_type': 'str',
        'is_used_in_grid': 'bool',
        'is_visible_in_grid': 'bool',
        'is_filterable_in_grid': 'bool',
        'is_searchable_in_grid': 'bool',
        'attribute_code': 'str'
    }

    attribute_map = {
        'frontend_input': 'frontend_input',
        'input_filter': 'input_filter',
        'store_label': 'store_label',
        'validation_rules': 'validation_rules',
        'multiline_count': 'multiline_count',
        'visible': 'visible',
        'required': 'required',
        'data_model': 'data_model',
        'options': 'options',
        'frontend_class': 'frontend_class',
        'user_defined': 'user_defined',
        'sort_order': 'sort_order',
        'frontend_label': 'frontend_label',
        'note': 'note',
        'system': 'system',
        'backend_type': 'backend_type',
        'is_used_in_grid': 'is_used_in_grid',
        'is_visible_in_grid': 'is_visible_in_grid',
        'is_filterable_in_grid': 'is_filterable_in_grid',
        'is_searchable_in_grid': 'is_searchable_in_grid',
        'attribute_code': 'attribute_code'
    }

    def __init__(self, frontend_input=None, input_filter=None, store_label=None, validation_rules=None, multiline_count=None, visible=None, required=None, data_model=None, options=None, frontend_class=None, user_defined=None, sort_order=None, frontend_label=None, note=None, system=None, backend_type=None, is_used_in_grid=None, is_visible_in_grid=None, is_filterable_in_grid=None, is_searchable_in_grid=None, attribute_code=None):
        """
        CustomerDataAttributeMetadataInterface - a model defined in Swagger
        """

        self._frontend_input = None
        self._input_filter = None
        self._store_label = None
        self._validation_rules = None
        self._multiline_count = None
        self._visible = None
        self._required = None
        self._data_model = None
        self._options = None
        self._frontend_class = None
        self._user_defined = None
        self._sort_order = None
        self._frontend_label = None
        self._note = None
        self._system = None
        self._backend_type = None
        self._is_used_in_grid = None
        self._is_visible_in_grid = None
        self._is_filterable_in_grid = None
        self._is_searchable_in_grid = None
        self._attribute_code = None

        self.frontend_input = frontend_input
        self.input_filter = input_filter
        self.store_label = store_label
        self.validation_rules = validation_rules
        self.multiline_count = multiline_count
        self.visible = visible
        self.required = required
        self.data_model = data_model
        self.options = options
        self.frontend_class = frontend_class
        self.user_defined = user_defined
        self.sort_order = sort_order
        self.frontend_label = frontend_label
        self.note = note
        self.system = system
        self.backend_type = backend_type
        if is_used_in_grid is not None:
          self.is_used_in_grid = is_used_in_grid
        if is_visible_in_grid is not None:
          self.is_visible_in_grid = is_visible_in_grid
        if is_filterable_in_grid is not None:
          self.is_filterable_in_grid = is_filterable_in_grid
        if is_searchable_in_grid is not None:
          self.is_searchable_in_grid = is_searchable_in_grid
        self.attribute_code = attribute_code

    @property
    def frontend_input(self):
        """
        Gets the frontend_input of this CustomerDataAttributeMetadataInterface.
        HTML for input element.

        :return: The frontend_input of this CustomerDataAttributeMetadataInterface.
        :rtype: str
        """
        return self._frontend_input

    @frontend_input.setter
    def frontend_input(self, frontend_input):
        """
        Sets the frontend_input of this CustomerDataAttributeMetadataInterface.
        HTML for input element.

        :param frontend_input: The frontend_input of this CustomerDataAttributeMetadataInterface.
        :type: str
        """
        if frontend_input is None:
            raise ValueError("Invalid value for `frontend_input`, must not be `None`")

        self._frontend_input = frontend_input

    @property
    def input_filter(self):
        """
        Gets the input_filter of this CustomerDataAttributeMetadataInterface.
        Template used for input (e.g. \"date\")

        :return: The input_filter of this CustomerDataAttributeMetadataInterface.
        :rtype: str
        """
        return self._input_filter

    @input_filter.setter
    def input_filter(self, input_filter):
        """
        Sets the input_filter of this CustomerDataAttributeMetadataInterface.
        Template used for input (e.g. \"date\")

        :param input_filter: The input_filter of this CustomerDataAttributeMetadataInterface.
        :type: str
        """
        if input_filter is None:
            raise ValueError("Invalid value for `input_filter`, must not be `None`")

        self._input_filter = input_filter

    @property
    def store_label(self):
        """
        Gets the store_label of this CustomerDataAttributeMetadataInterface.
        Label of the store.

        :return: The store_label of this CustomerDataAttributeMetadataInterface.
        :rtype: str
        """
        return self._store_label

    @store_label.setter
    def store_label(self, store_label):
        """
        Sets the store_label of this CustomerDataAttributeMetadataInterface.
        Label of the store.

        :param store_label: The store_label of this CustomerDataAttributeMetadataInterface.
        :type: str
        """
        if store_label is None:
            raise ValueError("Invalid value for `store_label`, must not be `None`")

        self._store_label = store_label

    @property
    def validation_rules(self):
        """
        Gets the validation_rules of this CustomerDataAttributeMetadataInterface.
        Validation rules.

        :return: The validation_rules of this CustomerDataAttributeMetadataInterface.
        :rtype: list[CustomerDataValidationRuleInterface]
        """
        return self._validation_rules

    @validation_rules.setter
    def validation_rules(self, validation_rules):
        """
        Sets the validation_rules of this CustomerDataAttributeMetadataInterface.
        Validation rules.

        :param validation_rules: The validation_rules of this CustomerDataAttributeMetadataInterface.
        :type: list[CustomerDataValidationRuleInterface]
        """
        if validation_rules is None:
            raise ValueError("Invalid value for `validation_rules`, must not be `None`")

        self._validation_rules = validation_rules

    @property
    def multiline_count(self):
        """
        Gets the multiline_count of this CustomerDataAttributeMetadataInterface.
        Of lines of the attribute value.

        :return: The multiline_count of this CustomerDataAttributeMetadataInterface.
        :rtype: int
        """
        return self._multiline_count

    @multiline_count.setter
    def multiline_count(self, multiline_count):
        """
        Sets the multiline_count of this CustomerDataAttributeMetadataInterface.
        Of lines of the attribute value.

        :param multiline_count: The multiline_count of this CustomerDataAttributeMetadataInterface.
        :type: int
        """
        if multiline_count is None:
            raise ValueError("Invalid value for `multiline_count`, must not be `None`")

        self._multiline_count = multiline_count

    @property
    def visible(self):
        """
        Gets the visible of this CustomerDataAttributeMetadataInterface.
        Attribute is visible on frontend.

        :return: The visible of this CustomerDataAttributeMetadataInterface.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """
        Sets the visible of this CustomerDataAttributeMetadataInterface.
        Attribute is visible on frontend.

        :param visible: The visible of this CustomerDataAttributeMetadataInterface.
        :type: bool
        """
        if visible is None:
            raise ValueError("Invalid value for `visible`, must not be `None`")

        self._visible = visible

    @property
    def required(self):
        """
        Gets the required of this CustomerDataAttributeMetadataInterface.
        Attribute is required.

        :return: The required of this CustomerDataAttributeMetadataInterface.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """
        Sets the required of this CustomerDataAttributeMetadataInterface.
        Attribute is required.

        :param required: The required of this CustomerDataAttributeMetadataInterface.
        :type: bool
        """
        if required is None:
            raise ValueError("Invalid value for `required`, must not be `None`")

        self._required = required

    @property
    def data_model(self):
        """
        Gets the data_model of this CustomerDataAttributeMetadataInterface.
        Data model for attribute.

        :return: The data_model of this CustomerDataAttributeMetadataInterface.
        :rtype: str
        """
        return self._data_model

    @data_model.setter
    def data_model(self, data_model):
        """
        Sets the data_model of this CustomerDataAttributeMetadataInterface.
        Data model for attribute.

        :param data_model: The data_model of this CustomerDataAttributeMetadataInterface.
        :type: str
        """
        if data_model is None:
            raise ValueError("Invalid value for `data_model`, must not be `None`")

        self._data_model = data_model

    @property
    def options(self):
        """
        Gets the options of this CustomerDataAttributeMetadataInterface.
        Options of the attribute (key => value pairs for select)

        :return: The options of this CustomerDataAttributeMetadataInterface.
        :rtype: list[CustomerDataOptionInterface]
        """
        return self._options

    @options.setter
    def options(self, options):
        """
        Sets the options of this CustomerDataAttributeMetadataInterface.
        Options of the attribute (key => value pairs for select)

        :param options: The options of this CustomerDataAttributeMetadataInterface.
        :type: list[CustomerDataOptionInterface]
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")

        self._options = options

    @property
    def frontend_class(self):
        """
        Gets the frontend_class of this CustomerDataAttributeMetadataInterface.
        Class which is used to display the attribute on frontend.

        :return: The frontend_class of this CustomerDataAttributeMetadataInterface.
        :rtype: str
        """
        return self._frontend_class

    @frontend_class.setter
    def frontend_class(self, frontend_class):
        """
        Sets the frontend_class of this CustomerDataAttributeMetadataInterface.
        Class which is used to display the attribute on frontend.

        :param frontend_class: The frontend_class of this CustomerDataAttributeMetadataInterface.
        :type: str
        """
        if frontend_class is None:
            raise ValueError("Invalid value for `frontend_class`, must not be `None`")

        self._frontend_class = frontend_class

    @property
    def user_defined(self):
        """
        Gets the user_defined of this CustomerDataAttributeMetadataInterface.
        Current attribute has been defined by a user.

        :return: The user_defined of this CustomerDataAttributeMetadataInterface.
        :rtype: bool
        """
        return self._user_defined

    @user_defined.setter
    def user_defined(self, user_defined):
        """
        Sets the user_defined of this CustomerDataAttributeMetadataInterface.
        Current attribute has been defined by a user.

        :param user_defined: The user_defined of this CustomerDataAttributeMetadataInterface.
        :type: bool
        """
        if user_defined is None:
            raise ValueError("Invalid value for `user_defined`, must not be `None`")

        self._user_defined = user_defined

    @property
    def sort_order(self):
        """
        Gets the sort_order of this CustomerDataAttributeMetadataInterface.
        Attributes sort order.

        :return: The sort_order of this CustomerDataAttributeMetadataInterface.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """
        Sets the sort_order of this CustomerDataAttributeMetadataInterface.
        Attributes sort order.

        :param sort_order: The sort_order of this CustomerDataAttributeMetadataInterface.
        :type: int
        """
        if sort_order is None:
            raise ValueError("Invalid value for `sort_order`, must not be `None`")

        self._sort_order = sort_order

    @property
    def frontend_label(self):
        """
        Gets the frontend_label of this CustomerDataAttributeMetadataInterface.
        Label which supposed to be displayed on frontend.

        :return: The frontend_label of this CustomerDataAttributeMetadataInterface.
        :rtype: str
        """
        return self._frontend_label

    @frontend_label.setter
    def frontend_label(self, frontend_label):
        """
        Sets the frontend_label of this CustomerDataAttributeMetadataInterface.
        Label which supposed to be displayed on frontend.

        :param frontend_label: The frontend_label of this CustomerDataAttributeMetadataInterface.
        :type: str
        """
        if frontend_label is None:
            raise ValueError("Invalid value for `frontend_label`, must not be `None`")

        self._frontend_label = frontend_label

    @property
    def note(self):
        """
        Gets the note of this CustomerDataAttributeMetadataInterface.
        The note attribute for the element.

        :return: The note of this CustomerDataAttributeMetadataInterface.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """
        Sets the note of this CustomerDataAttributeMetadataInterface.
        The note attribute for the element.

        :param note: The note of this CustomerDataAttributeMetadataInterface.
        :type: str
        """
        if note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")

        self._note = note

    @property
    def system(self):
        """
        Gets the system of this CustomerDataAttributeMetadataInterface.
        This is a system attribute.

        :return: The system of this CustomerDataAttributeMetadataInterface.
        :rtype: bool
        """
        return self._system

    @system.setter
    def system(self, system):
        """
        Sets the system of this CustomerDataAttributeMetadataInterface.
        This is a system attribute.

        :param system: The system of this CustomerDataAttributeMetadataInterface.
        :type: bool
        """
        if system is None:
            raise ValueError("Invalid value for `system`, must not be `None`")

        self._system = system

    @property
    def backend_type(self):
        """
        Gets the backend_type of this CustomerDataAttributeMetadataInterface.
        Backend type.

        :return: The backend_type of this CustomerDataAttributeMetadataInterface.
        :rtype: str
        """
        return self._backend_type

    @backend_type.setter
    def backend_type(self, backend_type):
        """
        Sets the backend_type of this CustomerDataAttributeMetadataInterface.
        Backend type.

        :param backend_type: The backend_type of this CustomerDataAttributeMetadataInterface.
        :type: str
        """
        if backend_type is None:
            raise ValueError("Invalid value for `backend_type`, must not be `None`")

        self._backend_type = backend_type

    @property
    def is_used_in_grid(self):
        """
        Gets the is_used_in_grid of this CustomerDataAttributeMetadataInterface.
        It is used in customer grid

        :return: The is_used_in_grid of this CustomerDataAttributeMetadataInterface.
        :rtype: bool
        """
        return self._is_used_in_grid

    @is_used_in_grid.setter
    def is_used_in_grid(self, is_used_in_grid):
        """
        Sets the is_used_in_grid of this CustomerDataAttributeMetadataInterface.
        It is used in customer grid

        :param is_used_in_grid: The is_used_in_grid of this CustomerDataAttributeMetadataInterface.
        :type: bool
        """

        self._is_used_in_grid = is_used_in_grid

    @property
    def is_visible_in_grid(self):
        """
        Gets the is_visible_in_grid of this CustomerDataAttributeMetadataInterface.
        It is visible in customer grid

        :return: The is_visible_in_grid of this CustomerDataAttributeMetadataInterface.
        :rtype: bool
        """
        return self._is_visible_in_grid

    @is_visible_in_grid.setter
    def is_visible_in_grid(self, is_visible_in_grid):
        """
        Sets the is_visible_in_grid of this CustomerDataAttributeMetadataInterface.
        It is visible in customer grid

        :param is_visible_in_grid: The is_visible_in_grid of this CustomerDataAttributeMetadataInterface.
        :type: bool
        """

        self._is_visible_in_grid = is_visible_in_grid

    @property
    def is_filterable_in_grid(self):
        """
        Gets the is_filterable_in_grid of this CustomerDataAttributeMetadataInterface.
        It is filterable in customer grid

        :return: The is_filterable_in_grid of this CustomerDataAttributeMetadataInterface.
        :rtype: bool
        """
        return self._is_filterable_in_grid

    @is_filterable_in_grid.setter
    def is_filterable_in_grid(self, is_filterable_in_grid):
        """
        Sets the is_filterable_in_grid of this CustomerDataAttributeMetadataInterface.
        It is filterable in customer grid

        :param is_filterable_in_grid: The is_filterable_in_grid of this CustomerDataAttributeMetadataInterface.
        :type: bool
        """

        self._is_filterable_in_grid = is_filterable_in_grid

    @property
    def is_searchable_in_grid(self):
        """
        Gets the is_searchable_in_grid of this CustomerDataAttributeMetadataInterface.
        It is searchable in customer grid

        :return: The is_searchable_in_grid of this CustomerDataAttributeMetadataInterface.
        :rtype: bool
        """
        return self._is_searchable_in_grid

    @is_searchable_in_grid.setter
    def is_searchable_in_grid(self, is_searchable_in_grid):
        """
        Sets the is_searchable_in_grid of this CustomerDataAttributeMetadataInterface.
        It is searchable in customer grid

        :param is_searchable_in_grid: The is_searchable_in_grid of this CustomerDataAttributeMetadataInterface.
        :type: bool
        """

        self._is_searchable_in_grid = is_searchable_in_grid

    @property
    def attribute_code(self):
        """
        Gets the attribute_code of this CustomerDataAttributeMetadataInterface.
        Code of the attribute.

        :return: The attribute_code of this CustomerDataAttributeMetadataInterface.
        :rtype: str
        """
        return self._attribute_code

    @attribute_code.setter
    def attribute_code(self, attribute_code):
        """
        Sets the attribute_code of this CustomerDataAttributeMetadataInterface.
        Code of the attribute.

        :param attribute_code: The attribute_code of this CustomerDataAttributeMetadataInterface.
        :type: str
        """
        if attribute_code is None:
            raise ValueError("Invalid value for `attribute_code`, must not be `None`")

        self._attribute_code = attribute_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CustomerDataAttributeMetadataInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
