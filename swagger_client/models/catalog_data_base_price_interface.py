# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CatalogDataBasePriceInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'price': 'float',
        'store_id': 'int',
        'sku': 'str',
        'extension_attributes': 'CatalogDataBasePriceExtensionInterface'
    }

    attribute_map = {
        'price': 'price',
        'store_id': 'store_id',
        'sku': 'sku',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, price=None, store_id=None, sku=None, extension_attributes=None):
        """
        CatalogDataBasePriceInterface - a model defined in Swagger
        """

        self._price = None
        self._store_id = None
        self._sku = None
        self._extension_attributes = None

        self.price = price
        self.store_id = store_id
        self.sku = sku
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def price(self):
        """
        Gets the price of this CatalogDataBasePriceInterface.
        Price.

        :return: The price of this CatalogDataBasePriceInterface.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this CatalogDataBasePriceInterface.
        Price.

        :param price: The price of this CatalogDataBasePriceInterface.
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def store_id(self):
        """
        Gets the store_id of this CatalogDataBasePriceInterface.
        Store id.

        :return: The store_id of this CatalogDataBasePriceInterface.
        :rtype: int
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """
        Sets the store_id of this CatalogDataBasePriceInterface.
        Store id.

        :param store_id: The store_id of this CatalogDataBasePriceInterface.
        :type: int
        """
        if store_id is None:
            raise ValueError("Invalid value for `store_id`, must not be `None`")

        self._store_id = store_id

    @property
    def sku(self):
        """
        Gets the sku of this CatalogDataBasePriceInterface.
        SKU.

        :return: The sku of this CatalogDataBasePriceInterface.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this CatalogDataBasePriceInterface.
        SKU.

        :param sku: The sku of this CatalogDataBasePriceInterface.
        :type: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")

        self._sku = sku

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this CatalogDataBasePriceInterface.

        :return: The extension_attributes of this CatalogDataBasePriceInterface.
        :rtype: CatalogDataBasePriceExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this CatalogDataBasePriceInterface.

        :param extension_attributes: The extension_attributes of this CatalogDataBasePriceInterface.
        :type: CatalogDataBasePriceExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CatalogDataBasePriceInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
