# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ConfigurableProductDataOptionInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'attribute_id': 'str',
        'label': 'str',
        'position': 'int',
        'is_use_default': 'bool',
        'values': 'list[ConfigurableProductDataOptionValueInterface]',
        'extension_attributes': 'ConfigurableProductDataOptionExtensionInterface',
        'product_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'attribute_id': 'attribute_id',
        'label': 'label',
        'position': 'position',
        'is_use_default': 'is_use_default',
        'values': 'values',
        'extension_attributes': 'extension_attributes',
        'product_id': 'product_id'
    }

    def __init__(self, id=None, attribute_id=None, label=None, position=None, is_use_default=None, values=None, extension_attributes=None, product_id=None):
        """
        ConfigurableProductDataOptionInterface - a model defined in Swagger
        """

        self._id = None
        self._attribute_id = None
        self._label = None
        self._position = None
        self._is_use_default = None
        self._values = None
        self._extension_attributes = None
        self._product_id = None

        if id is not None:
          self.id = id
        if attribute_id is not None:
          self.attribute_id = attribute_id
        if label is not None:
          self.label = label
        if position is not None:
          self.position = position
        if is_use_default is not None:
          self.is_use_default = is_use_default
        if values is not None:
          self.values = values
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes
        if product_id is not None:
          self.product_id = product_id

    @property
    def id(self):
        """
        Gets the id of this ConfigurableProductDataOptionInterface.

        :return: The id of this ConfigurableProductDataOptionInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ConfigurableProductDataOptionInterface.

        :param id: The id of this ConfigurableProductDataOptionInterface.
        :type: int
        """

        self._id = id

    @property
    def attribute_id(self):
        """
        Gets the attribute_id of this ConfigurableProductDataOptionInterface.

        :return: The attribute_id of this ConfigurableProductDataOptionInterface.
        :rtype: str
        """
        return self._attribute_id

    @attribute_id.setter
    def attribute_id(self, attribute_id):
        """
        Sets the attribute_id of this ConfigurableProductDataOptionInterface.

        :param attribute_id: The attribute_id of this ConfigurableProductDataOptionInterface.
        :type: str
        """

        self._attribute_id = attribute_id

    @property
    def label(self):
        """
        Gets the label of this ConfigurableProductDataOptionInterface.

        :return: The label of this ConfigurableProductDataOptionInterface.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this ConfigurableProductDataOptionInterface.

        :param label: The label of this ConfigurableProductDataOptionInterface.
        :type: str
        """

        self._label = label

    @property
    def position(self):
        """
        Gets the position of this ConfigurableProductDataOptionInterface.

        :return: The position of this ConfigurableProductDataOptionInterface.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this ConfigurableProductDataOptionInterface.

        :param position: The position of this ConfigurableProductDataOptionInterface.
        :type: int
        """

        self._position = position

    @property
    def is_use_default(self):
        """
        Gets the is_use_default of this ConfigurableProductDataOptionInterface.

        :return: The is_use_default of this ConfigurableProductDataOptionInterface.
        :rtype: bool
        """
        return self._is_use_default

    @is_use_default.setter
    def is_use_default(self, is_use_default):
        """
        Sets the is_use_default of this ConfigurableProductDataOptionInterface.

        :param is_use_default: The is_use_default of this ConfigurableProductDataOptionInterface.
        :type: bool
        """

        self._is_use_default = is_use_default

    @property
    def values(self):
        """
        Gets the values of this ConfigurableProductDataOptionInterface.

        :return: The values of this ConfigurableProductDataOptionInterface.
        :rtype: list[ConfigurableProductDataOptionValueInterface]
        """
        return self._values

    @values.setter
    def values(self, values):
        """
        Sets the values of this ConfigurableProductDataOptionInterface.

        :param values: The values of this ConfigurableProductDataOptionInterface.
        :type: list[ConfigurableProductDataOptionValueInterface]
        """

        self._values = values

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this ConfigurableProductDataOptionInterface.

        :return: The extension_attributes of this ConfigurableProductDataOptionInterface.
        :rtype: ConfigurableProductDataOptionExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this ConfigurableProductDataOptionInterface.

        :param extension_attributes: The extension_attributes of this ConfigurableProductDataOptionInterface.
        :type: ConfigurableProductDataOptionExtensionInterface
        """

        self._extension_attributes = extension_attributes

    @property
    def product_id(self):
        """
        Gets the product_id of this ConfigurableProductDataOptionInterface.

        :return: The product_id of this ConfigurableProductDataOptionInterface.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """
        Sets the product_id of this ConfigurableProductDataOptionInterface.

        :param product_id: The product_id of this ConfigurableProductDataOptionInterface.
        :type: int
        """

        self._product_id = product_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ConfigurableProductDataOptionInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
