# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WeeeDataProductRenderWeeeAdjustmentAttributeInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'str',
        'tax_amount': 'str',
        'tax_amount_incl_tax': 'str',
        'amount_excl_tax': 'str',
        'attribute_code': 'str',
        'extension_attributes': 'WeeeDataProductRenderWeeeAdjustmentAttributeExtensionInterface'
    }

    attribute_map = {
        'amount': 'amount',
        'tax_amount': 'tax_amount',
        'tax_amount_incl_tax': 'tax_amount_incl_tax',
        'amount_excl_tax': 'amount_excl_tax',
        'attribute_code': 'attribute_code',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, amount=None, tax_amount=None, tax_amount_incl_tax=None, amount_excl_tax=None, attribute_code=None, extension_attributes=None):
        """
        WeeeDataProductRenderWeeeAdjustmentAttributeInterface - a model defined in Swagger
        """

        self._amount = None
        self._tax_amount = None
        self._tax_amount_incl_tax = None
        self._amount_excl_tax = None
        self._attribute_code = None
        self._extension_attributes = None

        self.amount = amount
        self.tax_amount = tax_amount
        self.tax_amount_incl_tax = tax_amount_incl_tax
        self.amount_excl_tax = amount_excl_tax
        self.attribute_code = attribute_code
        self.extension_attributes = extension_attributes

    @property
    def amount(self):
        """
        Gets the amount of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        Weee attribute amount

        :return: The amount of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        Weee attribute amount

        :param amount: The amount of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :type: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def tax_amount(self):
        """
        Gets the tax_amount of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        Tax which is calculated to fixed product tax attribute

        :return: The tax_amount of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :rtype: str
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """
        Sets the tax_amount of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        Tax which is calculated to fixed product tax attribute

        :param tax_amount: The tax_amount of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :type: str
        """
        if tax_amount is None:
            raise ValueError("Invalid value for `tax_amount`, must not be `None`")

        self._tax_amount = tax_amount

    @property
    def tax_amount_incl_tax(self):
        """
        Gets the tax_amount_incl_tax of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        Tax amount of weee attribute

        :return: The tax_amount_incl_tax of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :rtype: str
        """
        return self._tax_amount_incl_tax

    @tax_amount_incl_tax.setter
    def tax_amount_incl_tax(self, tax_amount_incl_tax):
        """
        Sets the tax_amount_incl_tax of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        Tax amount of weee attribute

        :param tax_amount_incl_tax: The tax_amount_incl_tax of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :type: str
        """
        if tax_amount_incl_tax is None:
            raise ValueError("Invalid value for `tax_amount_incl_tax`, must not be `None`")

        self._tax_amount_incl_tax = tax_amount_incl_tax

    @property
    def amount_excl_tax(self):
        """
        Gets the amount_excl_tax of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        Product amount exclude tax

        :return: The amount_excl_tax of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :rtype: str
        """
        return self._amount_excl_tax

    @amount_excl_tax.setter
    def amount_excl_tax(self, amount_excl_tax):
        """
        Sets the amount_excl_tax of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        Product amount exclude tax

        :param amount_excl_tax: The amount_excl_tax of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :type: str
        """
        if amount_excl_tax is None:
            raise ValueError("Invalid value for `amount_excl_tax`, must not be `None`")

        self._amount_excl_tax = amount_excl_tax

    @property
    def attribute_code(self):
        """
        Gets the attribute_code of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        Weee attribute code

        :return: The attribute_code of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :rtype: str
        """
        return self._attribute_code

    @attribute_code.setter
    def attribute_code(self, attribute_code):
        """
        Sets the attribute_code of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        Weee attribute code

        :param attribute_code: The attribute_code of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :type: str
        """
        if attribute_code is None:
            raise ValueError("Invalid value for `attribute_code`, must not be `None`")

        self._attribute_code = attribute_code

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.

        :return: The extension_attributes of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :rtype: WeeeDataProductRenderWeeeAdjustmentAttributeExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.

        :param extension_attributes: The extension_attributes of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :type: WeeeDataProductRenderWeeeAdjustmentAttributeExtensionInterface
        """
        if extension_attributes is None:
            raise ValueError("Invalid value for `extension_attributes`, must not be `None`")

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WeeeDataProductRenderWeeeAdjustmentAttributeInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
