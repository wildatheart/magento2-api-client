# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DirectoryDataCountryInformationInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'two_letter_abbreviation': 'str',
        'three_letter_abbreviation': 'str',
        'full_name_locale': 'str',
        'full_name_english': 'str',
        'available_regions': 'list[DirectoryDataRegionInformationInterface]',
        'extension_attributes': 'DirectoryDataCountryInformationExtensionInterface'
    }

    attribute_map = {
        'id': 'id',
        'two_letter_abbreviation': 'two_letter_abbreviation',
        'three_letter_abbreviation': 'three_letter_abbreviation',
        'full_name_locale': 'full_name_locale',
        'full_name_english': 'full_name_english',
        'available_regions': 'available_regions',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, id=None, two_letter_abbreviation=None, three_letter_abbreviation=None, full_name_locale=None, full_name_english=None, available_regions=None, extension_attributes=None):
        """
        DirectoryDataCountryInformationInterface - a model defined in Swagger
        """

        self._id = None
        self._two_letter_abbreviation = None
        self._three_letter_abbreviation = None
        self._full_name_locale = None
        self._full_name_english = None
        self._available_regions = None
        self._extension_attributes = None

        self.id = id
        self.two_letter_abbreviation = two_letter_abbreviation
        self.three_letter_abbreviation = three_letter_abbreviation
        self.full_name_locale = full_name_locale
        self.full_name_english = full_name_english
        if available_regions is not None:
          self.available_regions = available_regions
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def id(self):
        """
        Gets the id of this DirectoryDataCountryInformationInterface.
        The country id for the store.

        :return: The id of this DirectoryDataCountryInformationInterface.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DirectoryDataCountryInformationInterface.
        The country id for the store.

        :param id: The id of this DirectoryDataCountryInformationInterface.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def two_letter_abbreviation(self):
        """
        Gets the two_letter_abbreviation of this DirectoryDataCountryInformationInterface.
        The country 2 letter abbreviation for the store.

        :return: The two_letter_abbreviation of this DirectoryDataCountryInformationInterface.
        :rtype: str
        """
        return self._two_letter_abbreviation

    @two_letter_abbreviation.setter
    def two_letter_abbreviation(self, two_letter_abbreviation):
        """
        Sets the two_letter_abbreviation of this DirectoryDataCountryInformationInterface.
        The country 2 letter abbreviation for the store.

        :param two_letter_abbreviation: The two_letter_abbreviation of this DirectoryDataCountryInformationInterface.
        :type: str
        """
        if two_letter_abbreviation is None:
            raise ValueError("Invalid value for `two_letter_abbreviation`, must not be `None`")

        self._two_letter_abbreviation = two_letter_abbreviation

    @property
    def three_letter_abbreviation(self):
        """
        Gets the three_letter_abbreviation of this DirectoryDataCountryInformationInterface.
        The country 3 letter abbreviation for the store.

        :return: The three_letter_abbreviation of this DirectoryDataCountryInformationInterface.
        :rtype: str
        """
        return self._three_letter_abbreviation

    @three_letter_abbreviation.setter
    def three_letter_abbreviation(self, three_letter_abbreviation):
        """
        Sets the three_letter_abbreviation of this DirectoryDataCountryInformationInterface.
        The country 3 letter abbreviation for the store.

        :param three_letter_abbreviation: The three_letter_abbreviation of this DirectoryDataCountryInformationInterface.
        :type: str
        """
        if three_letter_abbreviation is None:
            raise ValueError("Invalid value for `three_letter_abbreviation`, must not be `None`")

        self._three_letter_abbreviation = three_letter_abbreviation

    @property
    def full_name_locale(self):
        """
        Gets the full_name_locale of this DirectoryDataCountryInformationInterface.
        The country full name (in store locale) for the store.

        :return: The full_name_locale of this DirectoryDataCountryInformationInterface.
        :rtype: str
        """
        return self._full_name_locale

    @full_name_locale.setter
    def full_name_locale(self, full_name_locale):
        """
        Sets the full_name_locale of this DirectoryDataCountryInformationInterface.
        The country full name (in store locale) for the store.

        :param full_name_locale: The full_name_locale of this DirectoryDataCountryInformationInterface.
        :type: str
        """
        if full_name_locale is None:
            raise ValueError("Invalid value for `full_name_locale`, must not be `None`")

        self._full_name_locale = full_name_locale

    @property
    def full_name_english(self):
        """
        Gets the full_name_english of this DirectoryDataCountryInformationInterface.
        The country full name (in English) for the store.

        :return: The full_name_english of this DirectoryDataCountryInformationInterface.
        :rtype: str
        """
        return self._full_name_english

    @full_name_english.setter
    def full_name_english(self, full_name_english):
        """
        Sets the full_name_english of this DirectoryDataCountryInformationInterface.
        The country full name (in English) for the store.

        :param full_name_english: The full_name_english of this DirectoryDataCountryInformationInterface.
        :type: str
        """
        if full_name_english is None:
            raise ValueError("Invalid value for `full_name_english`, must not be `None`")

        self._full_name_english = full_name_english

    @property
    def available_regions(self):
        """
        Gets the available_regions of this DirectoryDataCountryInformationInterface.
        The available regions for the store.

        :return: The available_regions of this DirectoryDataCountryInformationInterface.
        :rtype: list[DirectoryDataRegionInformationInterface]
        """
        return self._available_regions

    @available_regions.setter
    def available_regions(self, available_regions):
        """
        Sets the available_regions of this DirectoryDataCountryInformationInterface.
        The available regions for the store.

        :param available_regions: The available_regions of this DirectoryDataCountryInformationInterface.
        :type: list[DirectoryDataRegionInformationInterface]
        """

        self._available_regions = available_regions

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this DirectoryDataCountryInformationInterface.

        :return: The extension_attributes of this DirectoryDataCountryInformationInterface.
        :rtype: DirectoryDataCountryInformationExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this DirectoryDataCountryInformationInterface.

        :param extension_attributes: The extension_attributes of this DirectoryDataCountryInformationInterface.
        :type: DirectoryDataCountryInformationExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DirectoryDataCountryInformationInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
