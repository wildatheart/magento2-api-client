# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FrameworkDataVideoContentInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'media_type': 'str',
        'video_provider': 'str',
        'video_url': 'str',
        'video_title': 'str',
        'video_description': 'str',
        'video_metadata': 'str'
    }

    attribute_map = {
        'media_type': 'media_type',
        'video_provider': 'video_provider',
        'video_url': 'video_url',
        'video_title': 'video_title',
        'video_description': 'video_description',
        'video_metadata': 'video_metadata'
    }

    def __init__(self, media_type=None, video_provider=None, video_url=None, video_title=None, video_description=None, video_metadata=None):
        """
        FrameworkDataVideoContentInterface - a model defined in Swagger
        """

        self._media_type = None
        self._video_provider = None
        self._video_url = None
        self._video_title = None
        self._video_description = None
        self._video_metadata = None

        self.media_type = media_type
        self.video_provider = video_provider
        self.video_url = video_url
        self.video_title = video_title
        self.video_description = video_description
        self.video_metadata = video_metadata

    @property
    def media_type(self):
        """
        Gets the media_type of this FrameworkDataVideoContentInterface.
        MIME type

        :return: The media_type of this FrameworkDataVideoContentInterface.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """
        Sets the media_type of this FrameworkDataVideoContentInterface.
        MIME type

        :param media_type: The media_type of this FrameworkDataVideoContentInterface.
        :type: str
        """
        if media_type is None:
            raise ValueError("Invalid value for `media_type`, must not be `None`")

        self._media_type = media_type

    @property
    def video_provider(self):
        """
        Gets the video_provider of this FrameworkDataVideoContentInterface.
        Provider

        :return: The video_provider of this FrameworkDataVideoContentInterface.
        :rtype: str
        """
        return self._video_provider

    @video_provider.setter
    def video_provider(self, video_provider):
        """
        Sets the video_provider of this FrameworkDataVideoContentInterface.
        Provider

        :param video_provider: The video_provider of this FrameworkDataVideoContentInterface.
        :type: str
        """
        if video_provider is None:
            raise ValueError("Invalid value for `video_provider`, must not be `None`")

        self._video_provider = video_provider

    @property
    def video_url(self):
        """
        Gets the video_url of this FrameworkDataVideoContentInterface.
        Video URL

        :return: The video_url of this FrameworkDataVideoContentInterface.
        :rtype: str
        """
        return self._video_url

    @video_url.setter
    def video_url(self, video_url):
        """
        Sets the video_url of this FrameworkDataVideoContentInterface.
        Video URL

        :param video_url: The video_url of this FrameworkDataVideoContentInterface.
        :type: str
        """
        if video_url is None:
            raise ValueError("Invalid value for `video_url`, must not be `None`")

        self._video_url = video_url

    @property
    def video_title(self):
        """
        Gets the video_title of this FrameworkDataVideoContentInterface.
        Title

        :return: The video_title of this FrameworkDataVideoContentInterface.
        :rtype: str
        """
        return self._video_title

    @video_title.setter
    def video_title(self, video_title):
        """
        Sets the video_title of this FrameworkDataVideoContentInterface.
        Title

        :param video_title: The video_title of this FrameworkDataVideoContentInterface.
        :type: str
        """
        if video_title is None:
            raise ValueError("Invalid value for `video_title`, must not be `None`")

        self._video_title = video_title

    @property
    def video_description(self):
        """
        Gets the video_description of this FrameworkDataVideoContentInterface.
        Video Description

        :return: The video_description of this FrameworkDataVideoContentInterface.
        :rtype: str
        """
        return self._video_description

    @video_description.setter
    def video_description(self, video_description):
        """
        Sets the video_description of this FrameworkDataVideoContentInterface.
        Video Description

        :param video_description: The video_description of this FrameworkDataVideoContentInterface.
        :type: str
        """
        if video_description is None:
            raise ValueError("Invalid value for `video_description`, must not be `None`")

        self._video_description = video_description

    @property
    def video_metadata(self):
        """
        Gets the video_metadata of this FrameworkDataVideoContentInterface.
        Metadata

        :return: The video_metadata of this FrameworkDataVideoContentInterface.
        :rtype: str
        """
        return self._video_metadata

    @video_metadata.setter
    def video_metadata(self, video_metadata):
        """
        Sets the video_metadata of this FrameworkDataVideoContentInterface.
        Metadata

        :param video_metadata: The video_metadata of this FrameworkDataVideoContentInterface.
        :type: str
        """
        if video_metadata is None:
            raise ValueError("Invalid value for `video_metadata`, must not be `None`")

        self._video_metadata = video_metadata

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FrameworkDataVideoContentInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
