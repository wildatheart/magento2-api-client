# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CatalogDataCategoryInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'parent_id': 'int',
        'name': 'str',
        'is_active': 'bool',
        'position': 'int',
        'level': 'int',
        'children': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'path': 'str',
        'available_sort_by': 'list[str]',
        'include_in_menu': 'bool',
        'extension_attributes': 'CatalogDataCategoryExtensionInterface',
        'custom_attributes': 'list[FrameworkAttributeInterface]'
    }

    attribute_map = {
        'id': 'id',
        'parent_id': 'parent_id',
        'name': 'name',
        'is_active': 'is_active',
        'position': 'position',
        'level': 'level',
        'children': 'children',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'path': 'path',
        'available_sort_by': 'available_sort_by',
        'include_in_menu': 'include_in_menu',
        'extension_attributes': 'extension_attributes',
        'custom_attributes': 'custom_attributes'
    }

    def __init__(self, id=None, parent_id=None, name=None, is_active=None, position=None, level=None, children=None, created_at=None, updated_at=None, path=None, available_sort_by=None, include_in_menu=None, extension_attributes=None, custom_attributes=None):
        """
        CatalogDataCategoryInterface - a model defined in Swagger
        """

        self._id = None
        self._parent_id = None
        self._name = None
        self._is_active = None
        self._position = None
        self._level = None
        self._children = None
        self._created_at = None
        self._updated_at = None
        self._path = None
        self._available_sort_by = None
        self._include_in_menu = None
        self._extension_attributes = None
        self._custom_attributes = None

        if id is not None:
          self.id = id
        if parent_id is not None:
          self.parent_id = parent_id
        self.name = name
        if is_active is not None:
          self.is_active = is_active
        if position is not None:
          self.position = position
        if level is not None:
          self.level = level
        if children is not None:
          self.children = children
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at
        if path is not None:
          self.path = path
        if available_sort_by is not None:
          self.available_sort_by = available_sort_by
        if include_in_menu is not None:
          self.include_in_menu = include_in_menu
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes
        if custom_attributes is not None:
          self.custom_attributes = custom_attributes

    @property
    def id(self):
        """
        Gets the id of this CatalogDataCategoryInterface.

        :return: The id of this CatalogDataCategoryInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CatalogDataCategoryInterface.

        :param id: The id of this CatalogDataCategoryInterface.
        :type: int
        """

        self._id = id

    @property
    def parent_id(self):
        """
        Gets the parent_id of this CatalogDataCategoryInterface.
        Parent category ID

        :return: The parent_id of this CatalogDataCategoryInterface.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """
        Sets the parent_id of this CatalogDataCategoryInterface.
        Parent category ID

        :param parent_id: The parent_id of this CatalogDataCategoryInterface.
        :type: int
        """

        self._parent_id = parent_id

    @property
    def name(self):
        """
        Gets the name of this CatalogDataCategoryInterface.
        Category name

        :return: The name of this CatalogDataCategoryInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CatalogDataCategoryInterface.
        Category name

        :param name: The name of this CatalogDataCategoryInterface.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def is_active(self):
        """
        Gets the is_active of this CatalogDataCategoryInterface.
        Whether category is active

        :return: The is_active of this CatalogDataCategoryInterface.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """
        Sets the is_active of this CatalogDataCategoryInterface.
        Whether category is active

        :param is_active: The is_active of this CatalogDataCategoryInterface.
        :type: bool
        """

        self._is_active = is_active

    @property
    def position(self):
        """
        Gets the position of this CatalogDataCategoryInterface.
        Category position

        :return: The position of this CatalogDataCategoryInterface.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this CatalogDataCategoryInterface.
        Category position

        :param position: The position of this CatalogDataCategoryInterface.
        :type: int
        """

        self._position = position

    @property
    def level(self):
        """
        Gets the level of this CatalogDataCategoryInterface.
        Category level

        :return: The level of this CatalogDataCategoryInterface.
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """
        Sets the level of this CatalogDataCategoryInterface.
        Category level

        :param level: The level of this CatalogDataCategoryInterface.
        :type: int
        """

        self._level = level

    @property
    def children(self):
        """
        Gets the children of this CatalogDataCategoryInterface.

        :return: The children of this CatalogDataCategoryInterface.
        :rtype: str
        """
        return self._children

    @children.setter
    def children(self, children):
        """
        Sets the children of this CatalogDataCategoryInterface.

        :param children: The children of this CatalogDataCategoryInterface.
        :type: str
        """

        self._children = children

    @property
    def created_at(self):
        """
        Gets the created_at of this CatalogDataCategoryInterface.

        :return: The created_at of this CatalogDataCategoryInterface.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this CatalogDataCategoryInterface.

        :param created_at: The created_at of this CatalogDataCategoryInterface.
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this CatalogDataCategoryInterface.

        :return: The updated_at of this CatalogDataCategoryInterface.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this CatalogDataCategoryInterface.

        :param updated_at: The updated_at of this CatalogDataCategoryInterface.
        :type: str
        """

        self._updated_at = updated_at

    @property
    def path(self):
        """
        Gets the path of this CatalogDataCategoryInterface.

        :return: The path of this CatalogDataCategoryInterface.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this CatalogDataCategoryInterface.

        :param path: The path of this CatalogDataCategoryInterface.
        :type: str
        """

        self._path = path

    @property
    def available_sort_by(self):
        """
        Gets the available_sort_by of this CatalogDataCategoryInterface.

        :return: The available_sort_by of this CatalogDataCategoryInterface.
        :rtype: list[str]
        """
        return self._available_sort_by

    @available_sort_by.setter
    def available_sort_by(self, available_sort_by):
        """
        Sets the available_sort_by of this CatalogDataCategoryInterface.

        :param available_sort_by: The available_sort_by of this CatalogDataCategoryInterface.
        :type: list[str]
        """

        self._available_sort_by = available_sort_by

    @property
    def include_in_menu(self):
        """
        Gets the include_in_menu of this CatalogDataCategoryInterface.

        :return: The include_in_menu of this CatalogDataCategoryInterface.
        :rtype: bool
        """
        return self._include_in_menu

    @include_in_menu.setter
    def include_in_menu(self, include_in_menu):
        """
        Sets the include_in_menu of this CatalogDataCategoryInterface.

        :param include_in_menu: The include_in_menu of this CatalogDataCategoryInterface.
        :type: bool
        """

        self._include_in_menu = include_in_menu

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this CatalogDataCategoryInterface.

        :return: The extension_attributes of this CatalogDataCategoryInterface.
        :rtype: CatalogDataCategoryExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this CatalogDataCategoryInterface.

        :param extension_attributes: The extension_attributes of this CatalogDataCategoryInterface.
        :type: CatalogDataCategoryExtensionInterface
        """

        self._extension_attributes = extension_attributes

    @property
    def custom_attributes(self):
        """
        Gets the custom_attributes of this CatalogDataCategoryInterface.
        Custom attributes values.

        :return: The custom_attributes of this CatalogDataCategoryInterface.
        :rtype: list[FrameworkAttributeInterface]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """
        Sets the custom_attributes of this CatalogDataCategoryInterface.
        Custom attributes values.

        :param custom_attributes: The custom_attributes of this CatalogDataCategoryInterface.
        :type: list[FrameworkAttributeInterface]
        """

        self._custom_attributes = custom_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CatalogDataCategoryInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
