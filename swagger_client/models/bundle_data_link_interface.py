# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BundleDataLinkInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'sku': 'str',
        'option_id': 'int',
        'qty': 'float',
        'position': 'int',
        'is_default': 'bool',
        'price': 'float',
        'price_type': 'int',
        'can_change_quantity': 'int',
        'extension_attributes': 'BundleDataLinkExtensionInterface'
    }

    attribute_map = {
        'id': 'id',
        'sku': 'sku',
        'option_id': 'option_id',
        'qty': 'qty',
        'position': 'position',
        'is_default': 'is_default',
        'price': 'price',
        'price_type': 'price_type',
        'can_change_quantity': 'can_change_quantity',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, id=None, sku=None, option_id=None, qty=None, position=None, is_default=None, price=None, price_type=None, can_change_quantity=None, extension_attributes=None):
        """
        BundleDataLinkInterface - a model defined in Swagger
        """

        self._id = None
        self._sku = None
        self._option_id = None
        self._qty = None
        self._position = None
        self._is_default = None
        self._price = None
        self._price_type = None
        self._can_change_quantity = None
        self._extension_attributes = None

        if id is not None:
          self.id = id
        if sku is not None:
          self.sku = sku
        if option_id is not None:
          self.option_id = option_id
        if qty is not None:
          self.qty = qty
        if position is not None:
          self.position = position
        self.is_default = is_default
        self.price = price
        self.price_type = price_type
        if can_change_quantity is not None:
          self.can_change_quantity = can_change_quantity
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def id(self):
        """
        Gets the id of this BundleDataLinkInterface.
        The identifier

        :return: The id of this BundleDataLinkInterface.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this BundleDataLinkInterface.
        The identifier

        :param id: The id of this BundleDataLinkInterface.
        :type: str
        """

        self._id = id

    @property
    def sku(self):
        """
        Gets the sku of this BundleDataLinkInterface.
        Linked product sku

        :return: The sku of this BundleDataLinkInterface.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this BundleDataLinkInterface.
        Linked product sku

        :param sku: The sku of this BundleDataLinkInterface.
        :type: str
        """

        self._sku = sku

    @property
    def option_id(self):
        """
        Gets the option_id of this BundleDataLinkInterface.
        Option id

        :return: The option_id of this BundleDataLinkInterface.
        :rtype: int
        """
        return self._option_id

    @option_id.setter
    def option_id(self, option_id):
        """
        Sets the option_id of this BundleDataLinkInterface.
        Option id

        :param option_id: The option_id of this BundleDataLinkInterface.
        :type: int
        """

        self._option_id = option_id

    @property
    def qty(self):
        """
        Gets the qty of this BundleDataLinkInterface.
        Qty

        :return: The qty of this BundleDataLinkInterface.
        :rtype: float
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """
        Sets the qty of this BundleDataLinkInterface.
        Qty

        :param qty: The qty of this BundleDataLinkInterface.
        :type: float
        """

        self._qty = qty

    @property
    def position(self):
        """
        Gets the position of this BundleDataLinkInterface.
        Position

        :return: The position of this BundleDataLinkInterface.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this BundleDataLinkInterface.
        Position

        :param position: The position of this BundleDataLinkInterface.
        :type: int
        """

        self._position = position

    @property
    def is_default(self):
        """
        Gets the is_default of this BundleDataLinkInterface.
        Is default

        :return: The is_default of this BundleDataLinkInterface.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """
        Sets the is_default of this BundleDataLinkInterface.
        Is default

        :param is_default: The is_default of this BundleDataLinkInterface.
        :type: bool
        """
        if is_default is None:
            raise ValueError("Invalid value for `is_default`, must not be `None`")

        self._is_default = is_default

    @property
    def price(self):
        """
        Gets the price of this BundleDataLinkInterface.
        Price

        :return: The price of this BundleDataLinkInterface.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this BundleDataLinkInterface.
        Price

        :param price: The price of this BundleDataLinkInterface.
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def price_type(self):
        """
        Gets the price_type of this BundleDataLinkInterface.
        Price type

        :return: The price_type of this BundleDataLinkInterface.
        :rtype: int
        """
        return self._price_type

    @price_type.setter
    def price_type(self, price_type):
        """
        Sets the price_type of this BundleDataLinkInterface.
        Price type

        :param price_type: The price_type of this BundleDataLinkInterface.
        :type: int
        """
        if price_type is None:
            raise ValueError("Invalid value for `price_type`, must not be `None`")

        self._price_type = price_type

    @property
    def can_change_quantity(self):
        """
        Gets the can_change_quantity of this BundleDataLinkInterface.
        Whether quantity could be changed

        :return: The can_change_quantity of this BundleDataLinkInterface.
        :rtype: int
        """
        return self._can_change_quantity

    @can_change_quantity.setter
    def can_change_quantity(self, can_change_quantity):
        """
        Sets the can_change_quantity of this BundleDataLinkInterface.
        Whether quantity could be changed

        :param can_change_quantity: The can_change_quantity of this BundleDataLinkInterface.
        :type: int
        """

        self._can_change_quantity = can_change_quantity

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this BundleDataLinkInterface.

        :return: The extension_attributes of this BundleDataLinkInterface.
        :rtype: BundleDataLinkExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this BundleDataLinkInterface.

        :param extension_attributes: The extension_attributes of this BundleDataLinkInterface.
        :type: BundleDataLinkExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BundleDataLinkInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
