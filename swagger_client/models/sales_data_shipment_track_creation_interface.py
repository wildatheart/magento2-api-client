# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SalesDataShipmentTrackCreationInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'extension_attributes': 'SalesDataShipmentTrackCreationExtensionInterface',
        'track_number': 'str',
        'title': 'str',
        'carrier_code': 'str'
    }

    attribute_map = {
        'extension_attributes': 'extension_attributes',
        'track_number': 'track_number',
        'title': 'title',
        'carrier_code': 'carrier_code'
    }

    def __init__(self, extension_attributes=None, track_number=None, title=None, carrier_code=None):
        """
        SalesDataShipmentTrackCreationInterface - a model defined in Swagger
        """

        self._extension_attributes = None
        self._track_number = None
        self._title = None
        self._carrier_code = None

        if extension_attributes is not None:
          self.extension_attributes = extension_attributes
        self.track_number = track_number
        self.title = title
        self.carrier_code = carrier_code

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this SalesDataShipmentTrackCreationInterface.

        :return: The extension_attributes of this SalesDataShipmentTrackCreationInterface.
        :rtype: SalesDataShipmentTrackCreationExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this SalesDataShipmentTrackCreationInterface.

        :param extension_attributes: The extension_attributes of this SalesDataShipmentTrackCreationInterface.
        :type: SalesDataShipmentTrackCreationExtensionInterface
        """

        self._extension_attributes = extension_attributes

    @property
    def track_number(self):
        """
        Gets the track_number of this SalesDataShipmentTrackCreationInterface.
        Track number.

        :return: The track_number of this SalesDataShipmentTrackCreationInterface.
        :rtype: str
        """
        return self._track_number

    @track_number.setter
    def track_number(self, track_number):
        """
        Sets the track_number of this SalesDataShipmentTrackCreationInterface.
        Track number.

        :param track_number: The track_number of this SalesDataShipmentTrackCreationInterface.
        :type: str
        """
        if track_number is None:
            raise ValueError("Invalid value for `track_number`, must not be `None`")

        self._track_number = track_number

    @property
    def title(self):
        """
        Gets the title of this SalesDataShipmentTrackCreationInterface.
        Title.

        :return: The title of this SalesDataShipmentTrackCreationInterface.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this SalesDataShipmentTrackCreationInterface.
        Title.

        :param title: The title of this SalesDataShipmentTrackCreationInterface.
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def carrier_code(self):
        """
        Gets the carrier_code of this SalesDataShipmentTrackCreationInterface.
        Carrier code.

        :return: The carrier_code of this SalesDataShipmentTrackCreationInterface.
        :rtype: str
        """
        return self._carrier_code

    @carrier_code.setter
    def carrier_code(self, carrier_code):
        """
        Sets the carrier_code of this SalesDataShipmentTrackCreationInterface.
        Carrier code.

        :param carrier_code: The carrier_code of this SalesDataShipmentTrackCreationInterface.
        :type: str
        """
        if carrier_code is None:
            raise ValueError("Invalid value for `carrier_code`, must not be `None`")

        self._carrier_code = carrier_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SalesDataShipmentTrackCreationInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
