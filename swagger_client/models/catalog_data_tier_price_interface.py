# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CatalogDataTierPriceInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'price': 'float',
        'price_type': 'str',
        'website_id': 'int',
        'sku': 'str',
        'customer_group': 'str',
        'quantity': 'float',
        'extension_attributes': 'CatalogDataTierPriceExtensionInterface'
    }

    attribute_map = {
        'price': 'price',
        'price_type': 'price_type',
        'website_id': 'website_id',
        'sku': 'sku',
        'customer_group': 'customer_group',
        'quantity': 'quantity',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, price=None, price_type=None, website_id=None, sku=None, customer_group=None, quantity=None, extension_attributes=None):
        """
        CatalogDataTierPriceInterface - a model defined in Swagger
        """

        self._price = None
        self._price_type = None
        self._website_id = None
        self._sku = None
        self._customer_group = None
        self._quantity = None
        self._extension_attributes = None

        self.price = price
        self.price_type = price_type
        self.website_id = website_id
        self.sku = sku
        self.customer_group = customer_group
        self.quantity = quantity
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def price(self):
        """
        Gets the price of this CatalogDataTierPriceInterface.
        Tier price.

        :return: The price of this CatalogDataTierPriceInterface.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this CatalogDataTierPriceInterface.
        Tier price.

        :param price: The price of this CatalogDataTierPriceInterface.
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def price_type(self):
        """
        Gets the price_type of this CatalogDataTierPriceInterface.
        Tier price type.

        :return: The price_type of this CatalogDataTierPriceInterface.
        :rtype: str
        """
        return self._price_type

    @price_type.setter
    def price_type(self, price_type):
        """
        Sets the price_type of this CatalogDataTierPriceInterface.
        Tier price type.

        :param price_type: The price_type of this CatalogDataTierPriceInterface.
        :type: str
        """
        if price_type is None:
            raise ValueError("Invalid value for `price_type`, must not be `None`")

        self._price_type = price_type

    @property
    def website_id(self):
        """
        Gets the website_id of this CatalogDataTierPriceInterface.
        Website id.

        :return: The website_id of this CatalogDataTierPriceInterface.
        :rtype: int
        """
        return self._website_id

    @website_id.setter
    def website_id(self, website_id):
        """
        Sets the website_id of this CatalogDataTierPriceInterface.
        Website id.

        :param website_id: The website_id of this CatalogDataTierPriceInterface.
        :type: int
        """
        if website_id is None:
            raise ValueError("Invalid value for `website_id`, must not be `None`")

        self._website_id = website_id

    @property
    def sku(self):
        """
        Gets the sku of this CatalogDataTierPriceInterface.
        SKU.

        :return: The sku of this CatalogDataTierPriceInterface.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this CatalogDataTierPriceInterface.
        SKU.

        :param sku: The sku of this CatalogDataTierPriceInterface.
        :type: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")

        self._sku = sku

    @property
    def customer_group(self):
        """
        Gets the customer_group of this CatalogDataTierPriceInterface.
        Customer group.

        :return: The customer_group of this CatalogDataTierPriceInterface.
        :rtype: str
        """
        return self._customer_group

    @customer_group.setter
    def customer_group(self, customer_group):
        """
        Sets the customer_group of this CatalogDataTierPriceInterface.
        Customer group.

        :param customer_group: The customer_group of this CatalogDataTierPriceInterface.
        :type: str
        """
        if customer_group is None:
            raise ValueError("Invalid value for `customer_group`, must not be `None`")

        self._customer_group = customer_group

    @property
    def quantity(self):
        """
        Gets the quantity of this CatalogDataTierPriceInterface.
        Quantity.

        :return: The quantity of this CatalogDataTierPriceInterface.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """
        Sets the quantity of this CatalogDataTierPriceInterface.
        Quantity.

        :param quantity: The quantity of this CatalogDataTierPriceInterface.
        :type: float
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this CatalogDataTierPriceInterface.

        :return: The extension_attributes of this CatalogDataTierPriceInterface.
        :rtype: CatalogDataTierPriceExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this CatalogDataTierPriceInterface.

        :param extension_attributes: The extension_attributes of this CatalogDataTierPriceInterface.
        :type: CatalogDataTierPriceExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CatalogDataTierPriceInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
