# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TaxDataOrderTaxDetailsItemInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'item_id': 'int',
        'associated_item_id': 'int',
        'applied_taxes': 'list[TaxDataOrderTaxDetailsAppliedTaxInterface]',
        'extension_attributes': 'TaxDataOrderTaxDetailsItemExtensionInterface'
    }

    attribute_map = {
        'type': 'type',
        'item_id': 'item_id',
        'associated_item_id': 'associated_item_id',
        'applied_taxes': 'applied_taxes',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, type=None, item_id=None, associated_item_id=None, applied_taxes=None, extension_attributes=None):
        """
        TaxDataOrderTaxDetailsItemInterface - a model defined in Swagger
        """

        self._type = None
        self._item_id = None
        self._associated_item_id = None
        self._applied_taxes = None
        self._extension_attributes = None

        if type is not None:
          self.type = type
        if item_id is not None:
          self.item_id = item_id
        if associated_item_id is not None:
          self.associated_item_id = associated_item_id
        if applied_taxes is not None:
          self.applied_taxes = applied_taxes
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def type(self):
        """
        Gets the type of this TaxDataOrderTaxDetailsItemInterface.
        Type (shipping, product, weee, gift wrapping, etc)

        :return: The type of this TaxDataOrderTaxDetailsItemInterface.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this TaxDataOrderTaxDetailsItemInterface.
        Type (shipping, product, weee, gift wrapping, etc)

        :param type: The type of this TaxDataOrderTaxDetailsItemInterface.
        :type: str
        """

        self._type = type

    @property
    def item_id(self):
        """
        Gets the item_id of this TaxDataOrderTaxDetailsItemInterface.
        Item id if this item is a product

        :return: The item_id of this TaxDataOrderTaxDetailsItemInterface.
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """
        Sets the item_id of this TaxDataOrderTaxDetailsItemInterface.
        Item id if this item is a product

        :param item_id: The item_id of this TaxDataOrderTaxDetailsItemInterface.
        :type: int
        """

        self._item_id = item_id

    @property
    def associated_item_id(self):
        """
        Gets the associated_item_id of this TaxDataOrderTaxDetailsItemInterface.
        Associated item id if this item is associated with another item, null otherwise

        :return: The associated_item_id of this TaxDataOrderTaxDetailsItemInterface.
        :rtype: int
        """
        return self._associated_item_id

    @associated_item_id.setter
    def associated_item_id(self, associated_item_id):
        """
        Sets the associated_item_id of this TaxDataOrderTaxDetailsItemInterface.
        Associated item id if this item is associated with another item, null otherwise

        :param associated_item_id: The associated_item_id of this TaxDataOrderTaxDetailsItemInterface.
        :type: int
        """

        self._associated_item_id = associated_item_id

    @property
    def applied_taxes(self):
        """
        Gets the applied_taxes of this TaxDataOrderTaxDetailsItemInterface.
        Applied taxes

        :return: The applied_taxes of this TaxDataOrderTaxDetailsItemInterface.
        :rtype: list[TaxDataOrderTaxDetailsAppliedTaxInterface]
        """
        return self._applied_taxes

    @applied_taxes.setter
    def applied_taxes(self, applied_taxes):
        """
        Sets the applied_taxes of this TaxDataOrderTaxDetailsItemInterface.
        Applied taxes

        :param applied_taxes: The applied_taxes of this TaxDataOrderTaxDetailsItemInterface.
        :type: list[TaxDataOrderTaxDetailsAppliedTaxInterface]
        """

        self._applied_taxes = applied_taxes

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this TaxDataOrderTaxDetailsItemInterface.

        :return: The extension_attributes of this TaxDataOrderTaxDetailsItemInterface.
        :rtype: TaxDataOrderTaxDetailsItemExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this TaxDataOrderTaxDetailsItemInterface.

        :param extension_attributes: The extension_attributes of this TaxDataOrderTaxDetailsItemInterface.
        :type: TaxDataOrderTaxDetailsItemExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TaxDataOrderTaxDetailsItemInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
