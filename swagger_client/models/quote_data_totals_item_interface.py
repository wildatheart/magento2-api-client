# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class QuoteDataTotalsItemInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_id': 'int',
        'price': 'float',
        'base_price': 'float',
        'qty': 'float',
        'row_total': 'float',
        'base_row_total': 'float',
        'row_total_with_discount': 'float',
        'tax_amount': 'float',
        'base_tax_amount': 'float',
        'tax_percent': 'float',
        'discount_amount': 'float',
        'base_discount_amount': 'float',
        'discount_percent': 'float',
        'price_incl_tax': 'float',
        'base_price_incl_tax': 'float',
        'row_total_incl_tax': 'float',
        'base_row_total_incl_tax': 'float',
        'options': 'str',
        'weee_tax_applied_amount': 'float',
        'weee_tax_applied': 'str',
        'extension_attributes': 'QuoteDataTotalsItemExtensionInterface',
        'name': 'str'
    }

    attribute_map = {
        'item_id': 'item_id',
        'price': 'price',
        'base_price': 'base_price',
        'qty': 'qty',
        'row_total': 'row_total',
        'base_row_total': 'base_row_total',
        'row_total_with_discount': 'row_total_with_discount',
        'tax_amount': 'tax_amount',
        'base_tax_amount': 'base_tax_amount',
        'tax_percent': 'tax_percent',
        'discount_amount': 'discount_amount',
        'base_discount_amount': 'base_discount_amount',
        'discount_percent': 'discount_percent',
        'price_incl_tax': 'price_incl_tax',
        'base_price_incl_tax': 'base_price_incl_tax',
        'row_total_incl_tax': 'row_total_incl_tax',
        'base_row_total_incl_tax': 'base_row_total_incl_tax',
        'options': 'options',
        'weee_tax_applied_amount': 'weee_tax_applied_amount',
        'weee_tax_applied': 'weee_tax_applied',
        'extension_attributes': 'extension_attributes',
        'name': 'name'
    }

    def __init__(self, item_id=None, price=None, base_price=None, qty=None, row_total=None, base_row_total=None, row_total_with_discount=None, tax_amount=None, base_tax_amount=None, tax_percent=None, discount_amount=None, base_discount_amount=None, discount_percent=None, price_incl_tax=None, base_price_incl_tax=None, row_total_incl_tax=None, base_row_total_incl_tax=None, options=None, weee_tax_applied_amount=None, weee_tax_applied=None, extension_attributes=None, name=None):
        """
        QuoteDataTotalsItemInterface - a model defined in Swagger
        """

        self._item_id = None
        self._price = None
        self._base_price = None
        self._qty = None
        self._row_total = None
        self._base_row_total = None
        self._row_total_with_discount = None
        self._tax_amount = None
        self._base_tax_amount = None
        self._tax_percent = None
        self._discount_amount = None
        self._base_discount_amount = None
        self._discount_percent = None
        self._price_incl_tax = None
        self._base_price_incl_tax = None
        self._row_total_incl_tax = None
        self._base_row_total_incl_tax = None
        self._options = None
        self._weee_tax_applied_amount = None
        self._weee_tax_applied = None
        self._extension_attributes = None
        self._name = None

        self.item_id = item_id
        self.price = price
        self.base_price = base_price
        self.qty = qty
        self.row_total = row_total
        self.base_row_total = base_row_total
        if row_total_with_discount is not None:
          self.row_total_with_discount = row_total_with_discount
        if tax_amount is not None:
          self.tax_amount = tax_amount
        if base_tax_amount is not None:
          self.base_tax_amount = base_tax_amount
        if tax_percent is not None:
          self.tax_percent = tax_percent
        if discount_amount is not None:
          self.discount_amount = discount_amount
        if base_discount_amount is not None:
          self.base_discount_amount = base_discount_amount
        if discount_percent is not None:
          self.discount_percent = discount_percent
        if price_incl_tax is not None:
          self.price_incl_tax = price_incl_tax
        if base_price_incl_tax is not None:
          self.base_price_incl_tax = base_price_incl_tax
        if row_total_incl_tax is not None:
          self.row_total_incl_tax = row_total_incl_tax
        if base_row_total_incl_tax is not None:
          self.base_row_total_incl_tax = base_row_total_incl_tax
        self.options = options
        self.weee_tax_applied_amount = weee_tax_applied_amount
        self.weee_tax_applied = weee_tax_applied
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes
        if name is not None:
          self.name = name

    @property
    def item_id(self):
        """
        Gets the item_id of this QuoteDataTotalsItemInterface.
        Item id

        :return: The item_id of this QuoteDataTotalsItemInterface.
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """
        Sets the item_id of this QuoteDataTotalsItemInterface.
        Item id

        :param item_id: The item_id of this QuoteDataTotalsItemInterface.
        :type: int
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")

        self._item_id = item_id

    @property
    def price(self):
        """
        Gets the price of this QuoteDataTotalsItemInterface.
        Item price in quote currency.

        :return: The price of this QuoteDataTotalsItemInterface.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this QuoteDataTotalsItemInterface.
        Item price in quote currency.

        :param price: The price of this QuoteDataTotalsItemInterface.
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def base_price(self):
        """
        Gets the base_price of this QuoteDataTotalsItemInterface.
        Item price in base currency.

        :return: The base_price of this QuoteDataTotalsItemInterface.
        :rtype: float
        """
        return self._base_price

    @base_price.setter
    def base_price(self, base_price):
        """
        Sets the base_price of this QuoteDataTotalsItemInterface.
        Item price in base currency.

        :param base_price: The base_price of this QuoteDataTotalsItemInterface.
        :type: float
        """
        if base_price is None:
            raise ValueError("Invalid value for `base_price`, must not be `None`")

        self._base_price = base_price

    @property
    def qty(self):
        """
        Gets the qty of this QuoteDataTotalsItemInterface.
        Item quantity.

        :return: The qty of this QuoteDataTotalsItemInterface.
        :rtype: float
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """
        Sets the qty of this QuoteDataTotalsItemInterface.
        Item quantity.

        :param qty: The qty of this QuoteDataTotalsItemInterface.
        :type: float
        """
        if qty is None:
            raise ValueError("Invalid value for `qty`, must not be `None`")

        self._qty = qty

    @property
    def row_total(self):
        """
        Gets the row_total of this QuoteDataTotalsItemInterface.
        Row total in quote currency.

        :return: The row_total of this QuoteDataTotalsItemInterface.
        :rtype: float
        """
        return self._row_total

    @row_total.setter
    def row_total(self, row_total):
        """
        Sets the row_total of this QuoteDataTotalsItemInterface.
        Row total in quote currency.

        :param row_total: The row_total of this QuoteDataTotalsItemInterface.
        :type: float
        """
        if row_total is None:
            raise ValueError("Invalid value for `row_total`, must not be `None`")

        self._row_total = row_total

    @property
    def base_row_total(self):
        """
        Gets the base_row_total of this QuoteDataTotalsItemInterface.
        Row total in base currency.

        :return: The base_row_total of this QuoteDataTotalsItemInterface.
        :rtype: float
        """
        return self._base_row_total

    @base_row_total.setter
    def base_row_total(self, base_row_total):
        """
        Sets the base_row_total of this QuoteDataTotalsItemInterface.
        Row total in base currency.

        :param base_row_total: The base_row_total of this QuoteDataTotalsItemInterface.
        :type: float
        """
        if base_row_total is None:
            raise ValueError("Invalid value for `base_row_total`, must not be `None`")

        self._base_row_total = base_row_total

    @property
    def row_total_with_discount(self):
        """
        Gets the row_total_with_discount of this QuoteDataTotalsItemInterface.
        Row total with discount in quote currency. Otherwise, null.

        :return: The row_total_with_discount of this QuoteDataTotalsItemInterface.
        :rtype: float
        """
        return self._row_total_with_discount

    @row_total_with_discount.setter
    def row_total_with_discount(self, row_total_with_discount):
        """
        Sets the row_total_with_discount of this QuoteDataTotalsItemInterface.
        Row total with discount in quote currency. Otherwise, null.

        :param row_total_with_discount: The row_total_with_discount of this QuoteDataTotalsItemInterface.
        :type: float
        """

        self._row_total_with_discount = row_total_with_discount

    @property
    def tax_amount(self):
        """
        Gets the tax_amount of this QuoteDataTotalsItemInterface.
        Tax amount in quote currency. Otherwise, null.

        :return: The tax_amount of this QuoteDataTotalsItemInterface.
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """
        Sets the tax_amount of this QuoteDataTotalsItemInterface.
        Tax amount in quote currency. Otherwise, null.

        :param tax_amount: The tax_amount of this QuoteDataTotalsItemInterface.
        :type: float
        """

        self._tax_amount = tax_amount

    @property
    def base_tax_amount(self):
        """
        Gets the base_tax_amount of this QuoteDataTotalsItemInterface.
        Tax amount in base currency. Otherwise, null.

        :return: The base_tax_amount of this QuoteDataTotalsItemInterface.
        :rtype: float
        """
        return self._base_tax_amount

    @base_tax_amount.setter
    def base_tax_amount(self, base_tax_amount):
        """
        Sets the base_tax_amount of this QuoteDataTotalsItemInterface.
        Tax amount in base currency. Otherwise, null.

        :param base_tax_amount: The base_tax_amount of this QuoteDataTotalsItemInterface.
        :type: float
        """

        self._base_tax_amount = base_tax_amount

    @property
    def tax_percent(self):
        """
        Gets the tax_percent of this QuoteDataTotalsItemInterface.
        Tax percent. Otherwise, null.

        :return: The tax_percent of this QuoteDataTotalsItemInterface.
        :rtype: float
        """
        return self._tax_percent

    @tax_percent.setter
    def tax_percent(self, tax_percent):
        """
        Sets the tax_percent of this QuoteDataTotalsItemInterface.
        Tax percent. Otherwise, null.

        :param tax_percent: The tax_percent of this QuoteDataTotalsItemInterface.
        :type: float
        """

        self._tax_percent = tax_percent

    @property
    def discount_amount(self):
        """
        Gets the discount_amount of this QuoteDataTotalsItemInterface.
        Discount amount in quote currency. Otherwise, null.

        :return: The discount_amount of this QuoteDataTotalsItemInterface.
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """
        Sets the discount_amount of this QuoteDataTotalsItemInterface.
        Discount amount in quote currency. Otherwise, null.

        :param discount_amount: The discount_amount of this QuoteDataTotalsItemInterface.
        :type: float
        """

        self._discount_amount = discount_amount

    @property
    def base_discount_amount(self):
        """
        Gets the base_discount_amount of this QuoteDataTotalsItemInterface.
        Discount amount in base currency. Otherwise, null.

        :return: The base_discount_amount of this QuoteDataTotalsItemInterface.
        :rtype: float
        """
        return self._base_discount_amount

    @base_discount_amount.setter
    def base_discount_amount(self, base_discount_amount):
        """
        Sets the base_discount_amount of this QuoteDataTotalsItemInterface.
        Discount amount in base currency. Otherwise, null.

        :param base_discount_amount: The base_discount_amount of this QuoteDataTotalsItemInterface.
        :type: float
        """

        self._base_discount_amount = base_discount_amount

    @property
    def discount_percent(self):
        """
        Gets the discount_percent of this QuoteDataTotalsItemInterface.
        Discount percent. Otherwise, null.

        :return: The discount_percent of this QuoteDataTotalsItemInterface.
        :rtype: float
        """
        return self._discount_percent

    @discount_percent.setter
    def discount_percent(self, discount_percent):
        """
        Sets the discount_percent of this QuoteDataTotalsItemInterface.
        Discount percent. Otherwise, null.

        :param discount_percent: The discount_percent of this QuoteDataTotalsItemInterface.
        :type: float
        """

        self._discount_percent = discount_percent

    @property
    def price_incl_tax(self):
        """
        Gets the price_incl_tax of this QuoteDataTotalsItemInterface.
        Price including tax in quote currency. Otherwise, null.

        :return: The price_incl_tax of this QuoteDataTotalsItemInterface.
        :rtype: float
        """
        return self._price_incl_tax

    @price_incl_tax.setter
    def price_incl_tax(self, price_incl_tax):
        """
        Sets the price_incl_tax of this QuoteDataTotalsItemInterface.
        Price including tax in quote currency. Otherwise, null.

        :param price_incl_tax: The price_incl_tax of this QuoteDataTotalsItemInterface.
        :type: float
        """

        self._price_incl_tax = price_incl_tax

    @property
    def base_price_incl_tax(self):
        """
        Gets the base_price_incl_tax of this QuoteDataTotalsItemInterface.
        Price including tax in base currency. Otherwise, null.

        :return: The base_price_incl_tax of this QuoteDataTotalsItemInterface.
        :rtype: float
        """
        return self._base_price_incl_tax

    @base_price_incl_tax.setter
    def base_price_incl_tax(self, base_price_incl_tax):
        """
        Sets the base_price_incl_tax of this QuoteDataTotalsItemInterface.
        Price including tax in base currency. Otherwise, null.

        :param base_price_incl_tax: The base_price_incl_tax of this QuoteDataTotalsItemInterface.
        :type: float
        """

        self._base_price_incl_tax = base_price_incl_tax

    @property
    def row_total_incl_tax(self):
        """
        Gets the row_total_incl_tax of this QuoteDataTotalsItemInterface.
        Row total including tax in quote currency. Otherwise, null.

        :return: The row_total_incl_tax of this QuoteDataTotalsItemInterface.
        :rtype: float
        """
        return self._row_total_incl_tax

    @row_total_incl_tax.setter
    def row_total_incl_tax(self, row_total_incl_tax):
        """
        Sets the row_total_incl_tax of this QuoteDataTotalsItemInterface.
        Row total including tax in quote currency. Otherwise, null.

        :param row_total_incl_tax: The row_total_incl_tax of this QuoteDataTotalsItemInterface.
        :type: float
        """

        self._row_total_incl_tax = row_total_incl_tax

    @property
    def base_row_total_incl_tax(self):
        """
        Gets the base_row_total_incl_tax of this QuoteDataTotalsItemInterface.
        Row total including tax in base currency. Otherwise, null.

        :return: The base_row_total_incl_tax of this QuoteDataTotalsItemInterface.
        :rtype: float
        """
        return self._base_row_total_incl_tax

    @base_row_total_incl_tax.setter
    def base_row_total_incl_tax(self, base_row_total_incl_tax):
        """
        Sets the base_row_total_incl_tax of this QuoteDataTotalsItemInterface.
        Row total including tax in base currency. Otherwise, null.

        :param base_row_total_incl_tax: The base_row_total_incl_tax of this QuoteDataTotalsItemInterface.
        :type: float
        """

        self._base_row_total_incl_tax = base_row_total_incl_tax

    @property
    def options(self):
        """
        Gets the options of this QuoteDataTotalsItemInterface.
        Item price in quote currency.

        :return: The options of this QuoteDataTotalsItemInterface.
        :rtype: str
        """
        return self._options

    @options.setter
    def options(self, options):
        """
        Sets the options of this QuoteDataTotalsItemInterface.
        Item price in quote currency.

        :param options: The options of this QuoteDataTotalsItemInterface.
        :type: str
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")

        self._options = options

    @property
    def weee_tax_applied_amount(self):
        """
        Gets the weee_tax_applied_amount of this QuoteDataTotalsItemInterface.
        Item weee tax applied amount in quote currency.

        :return: The weee_tax_applied_amount of this QuoteDataTotalsItemInterface.
        :rtype: float
        """
        return self._weee_tax_applied_amount

    @weee_tax_applied_amount.setter
    def weee_tax_applied_amount(self, weee_tax_applied_amount):
        """
        Sets the weee_tax_applied_amount of this QuoteDataTotalsItemInterface.
        Item weee tax applied amount in quote currency.

        :param weee_tax_applied_amount: The weee_tax_applied_amount of this QuoteDataTotalsItemInterface.
        :type: float
        """
        if weee_tax_applied_amount is None:
            raise ValueError("Invalid value for `weee_tax_applied_amount`, must not be `None`")

        self._weee_tax_applied_amount = weee_tax_applied_amount

    @property
    def weee_tax_applied(self):
        """
        Gets the weee_tax_applied of this QuoteDataTotalsItemInterface.
        Item weee tax applied in quote currency.

        :return: The weee_tax_applied of this QuoteDataTotalsItemInterface.
        :rtype: str
        """
        return self._weee_tax_applied

    @weee_tax_applied.setter
    def weee_tax_applied(self, weee_tax_applied):
        """
        Sets the weee_tax_applied of this QuoteDataTotalsItemInterface.
        Item weee tax applied in quote currency.

        :param weee_tax_applied: The weee_tax_applied of this QuoteDataTotalsItemInterface.
        :type: str
        """
        if weee_tax_applied is None:
            raise ValueError("Invalid value for `weee_tax_applied`, must not be `None`")

        self._weee_tax_applied = weee_tax_applied

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this QuoteDataTotalsItemInterface.

        :return: The extension_attributes of this QuoteDataTotalsItemInterface.
        :rtype: QuoteDataTotalsItemExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this QuoteDataTotalsItemInterface.

        :param extension_attributes: The extension_attributes of this QuoteDataTotalsItemInterface.
        :type: QuoteDataTotalsItemExtensionInterface
        """

        self._extension_attributes = extension_attributes

    @property
    def name(self):
        """
        Gets the name of this QuoteDataTotalsItemInterface.
        Product name. Otherwise, null.

        :return: The name of this QuoteDataTotalsItemInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this QuoteDataTotalsItemInterface.
        Product name. Otherwise, null.

        :param name: The name of this QuoteDataTotalsItemInterface.
        :type: str
        """

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, QuoteDataTotalsItemInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
