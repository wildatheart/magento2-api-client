# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CatalogDataProductInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'sku': 'str',
        'name': 'str',
        'attribute_set_id': 'int',
        'price': 'float',
        'status': 'int',
        'visibility': 'int',
        'type_id': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'weight': 'float',
        'extension_attributes': 'CatalogDataProductExtensionInterface',
        'product_links': 'list[CatalogDataProductLinkInterface]',
        'options': 'list[CatalogDataProductCustomOptionInterface]',
        'media_gallery_entries': 'list[CatalogDataProductAttributeMediaGalleryEntryInterface]',
        'tier_prices': 'list[CatalogDataProductTierPriceInterface]',
        'custom_attributes': 'list[FrameworkAttributeInterface]'
    }

    attribute_map = {
        'id': 'id',
        'sku': 'sku',
        'name': 'name',
        'attribute_set_id': 'attribute_set_id',
        'price': 'price',
        'status': 'status',
        'visibility': 'visibility',
        'type_id': 'type_id',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'weight': 'weight',
        'extension_attributes': 'extension_attributes',
        'product_links': 'product_links',
        'options': 'options',
        'media_gallery_entries': 'media_gallery_entries',
        'tier_prices': 'tier_prices',
        'custom_attributes': 'custom_attributes'
    }

    def __init__(self, id=None, sku=None, name=None, attribute_set_id=None, price=None, status=None, visibility=None, type_id=None, created_at=None, updated_at=None, weight=None, extension_attributes=None, product_links=None, options=None, media_gallery_entries=None, tier_prices=None, custom_attributes=None):
        """
        CatalogDataProductInterface - a model defined in Swagger
        """

        self._id = None
        self._sku = None
        self._name = None
        self._attribute_set_id = None
        self._price = None
        self._status = None
        self._visibility = None
        self._type_id = None
        self._created_at = None
        self._updated_at = None
        self._weight = None
        self._extension_attributes = None
        self._product_links = None
        self._options = None
        self._media_gallery_entries = None
        self._tier_prices = None
        self._custom_attributes = None

        if id is not None:
          self.id = id
        self.sku = sku
        if name is not None:
          self.name = name
        if attribute_set_id is not None:
          self.attribute_set_id = attribute_set_id
        if price is not None:
          self.price = price
        if status is not None:
          self.status = status
        if visibility is not None:
          self.visibility = visibility
        if type_id is not None:
          self.type_id = type_id
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at
        if weight is not None:
          self.weight = weight
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes
        if product_links is not None:
          self.product_links = product_links
        if options is not None:
          self.options = options
        if media_gallery_entries is not None:
          self.media_gallery_entries = media_gallery_entries
        if tier_prices is not None:
          self.tier_prices = tier_prices
        if custom_attributes is not None:
          self.custom_attributes = custom_attributes

    @property
    def id(self):
        """
        Gets the id of this CatalogDataProductInterface.
        Id

        :return: The id of this CatalogDataProductInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CatalogDataProductInterface.
        Id

        :param id: The id of this CatalogDataProductInterface.
        :type: int
        """

        self._id = id

    @property
    def sku(self):
        """
        Gets the sku of this CatalogDataProductInterface.
        Sku

        :return: The sku of this CatalogDataProductInterface.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this CatalogDataProductInterface.
        Sku

        :param sku: The sku of this CatalogDataProductInterface.
        :type: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")

        self._sku = sku

    @property
    def name(self):
        """
        Gets the name of this CatalogDataProductInterface.
        Name

        :return: The name of this CatalogDataProductInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CatalogDataProductInterface.
        Name

        :param name: The name of this CatalogDataProductInterface.
        :type: str
        """

        self._name = name

    @property
    def attribute_set_id(self):
        """
        Gets the attribute_set_id of this CatalogDataProductInterface.
        Attribute set id

        :return: The attribute_set_id of this CatalogDataProductInterface.
        :rtype: int
        """
        return self._attribute_set_id

    @attribute_set_id.setter
    def attribute_set_id(self, attribute_set_id):
        """
        Sets the attribute_set_id of this CatalogDataProductInterface.
        Attribute set id

        :param attribute_set_id: The attribute_set_id of this CatalogDataProductInterface.
        :type: int
        """

        self._attribute_set_id = attribute_set_id

    @property
    def price(self):
        """
        Gets the price of this CatalogDataProductInterface.
        Price

        :return: The price of this CatalogDataProductInterface.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this CatalogDataProductInterface.
        Price

        :param price: The price of this CatalogDataProductInterface.
        :type: float
        """

        self._price = price

    @property
    def status(self):
        """
        Gets the status of this CatalogDataProductInterface.
        Status

        :return: The status of this CatalogDataProductInterface.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this CatalogDataProductInterface.
        Status

        :param status: The status of this CatalogDataProductInterface.
        :type: int
        """

        self._status = status

    @property
    def visibility(self):
        """
        Gets the visibility of this CatalogDataProductInterface.
        Visibility

        :return: The visibility of this CatalogDataProductInterface.
        :rtype: int
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """
        Sets the visibility of this CatalogDataProductInterface.
        Visibility

        :param visibility: The visibility of this CatalogDataProductInterface.
        :type: int
        """

        self._visibility = visibility

    @property
    def type_id(self):
        """
        Gets the type_id of this CatalogDataProductInterface.
        Type id

        :return: The type_id of this CatalogDataProductInterface.
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """
        Sets the type_id of this CatalogDataProductInterface.
        Type id

        :param type_id: The type_id of this CatalogDataProductInterface.
        :type: str
        """

        self._type_id = type_id

    @property
    def created_at(self):
        """
        Gets the created_at of this CatalogDataProductInterface.
        Created date

        :return: The created_at of this CatalogDataProductInterface.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this CatalogDataProductInterface.
        Created date

        :param created_at: The created_at of this CatalogDataProductInterface.
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this CatalogDataProductInterface.
        Updated date

        :return: The updated_at of this CatalogDataProductInterface.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this CatalogDataProductInterface.
        Updated date

        :param updated_at: The updated_at of this CatalogDataProductInterface.
        :type: str
        """

        self._updated_at = updated_at

    @property
    def weight(self):
        """
        Gets the weight of this CatalogDataProductInterface.
        Weight

        :return: The weight of this CatalogDataProductInterface.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """
        Sets the weight of this CatalogDataProductInterface.
        Weight

        :param weight: The weight of this CatalogDataProductInterface.
        :type: float
        """

        self._weight = weight

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this CatalogDataProductInterface.

        :return: The extension_attributes of this CatalogDataProductInterface.
        :rtype: CatalogDataProductExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this CatalogDataProductInterface.

        :param extension_attributes: The extension_attributes of this CatalogDataProductInterface.
        :type: CatalogDataProductExtensionInterface
        """

        self._extension_attributes = extension_attributes

    @property
    def product_links(self):
        """
        Gets the product_links of this CatalogDataProductInterface.
        Product links info

        :return: The product_links of this CatalogDataProductInterface.
        :rtype: list[CatalogDataProductLinkInterface]
        """
        return self._product_links

    @product_links.setter
    def product_links(self, product_links):
        """
        Sets the product_links of this CatalogDataProductInterface.
        Product links info

        :param product_links: The product_links of this CatalogDataProductInterface.
        :type: list[CatalogDataProductLinkInterface]
        """

        self._product_links = product_links

    @property
    def options(self):
        """
        Gets the options of this CatalogDataProductInterface.
        List of product options

        :return: The options of this CatalogDataProductInterface.
        :rtype: list[CatalogDataProductCustomOptionInterface]
        """
        return self._options

    @options.setter
    def options(self, options):
        """
        Sets the options of this CatalogDataProductInterface.
        List of product options

        :param options: The options of this CatalogDataProductInterface.
        :type: list[CatalogDataProductCustomOptionInterface]
        """

        self._options = options

    @property
    def media_gallery_entries(self):
        """
        Gets the media_gallery_entries of this CatalogDataProductInterface.
        Media gallery entries

        :return: The media_gallery_entries of this CatalogDataProductInterface.
        :rtype: list[CatalogDataProductAttributeMediaGalleryEntryInterface]
        """
        return self._media_gallery_entries

    @media_gallery_entries.setter
    def media_gallery_entries(self, media_gallery_entries):
        """
        Sets the media_gallery_entries of this CatalogDataProductInterface.
        Media gallery entries

        :param media_gallery_entries: The media_gallery_entries of this CatalogDataProductInterface.
        :type: list[CatalogDataProductAttributeMediaGalleryEntryInterface]
        """

        self._media_gallery_entries = media_gallery_entries

    @property
    def tier_prices(self):
        """
        Gets the tier_prices of this CatalogDataProductInterface.
        List of product tier prices

        :return: The tier_prices of this CatalogDataProductInterface.
        :rtype: list[CatalogDataProductTierPriceInterface]
        """
        return self._tier_prices

    @tier_prices.setter
    def tier_prices(self, tier_prices):
        """
        Sets the tier_prices of this CatalogDataProductInterface.
        List of product tier prices

        :param tier_prices: The tier_prices of this CatalogDataProductInterface.
        :type: list[CatalogDataProductTierPriceInterface]
        """

        self._tier_prices = tier_prices

    @property
    def custom_attributes(self):
        """
        Gets the custom_attributes of this CatalogDataProductInterface.
        Custom attributes values.

        :return: The custom_attributes of this CatalogDataProductInterface.
        :rtype: list[FrameworkAttributeInterface]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """
        Sets the custom_attributes of this CatalogDataProductInterface.
        Custom attributes values.

        :param custom_attributes: The custom_attributes of this CatalogDataProductInterface.
        :type: list[FrameworkAttributeInterface]
        """

        self._custom_attributes = custom_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CatalogDataProductInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
