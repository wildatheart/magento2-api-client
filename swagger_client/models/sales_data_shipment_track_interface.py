# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SalesDataShipmentTrackInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_id': 'int',
        'created_at': 'str',
        'entity_id': 'int',
        'parent_id': 'int',
        'updated_at': 'str',
        'weight': 'float',
        'qty': 'float',
        'description': 'str',
        'extension_attributes': 'SalesDataShipmentTrackExtensionInterface',
        'track_number': 'str',
        'title': 'str',
        'carrier_code': 'str'
    }

    attribute_map = {
        'order_id': 'order_id',
        'created_at': 'created_at',
        'entity_id': 'entity_id',
        'parent_id': 'parent_id',
        'updated_at': 'updated_at',
        'weight': 'weight',
        'qty': 'qty',
        'description': 'description',
        'extension_attributes': 'extension_attributes',
        'track_number': 'track_number',
        'title': 'title',
        'carrier_code': 'carrier_code'
    }

    def __init__(self, order_id=None, created_at=None, entity_id=None, parent_id=None, updated_at=None, weight=None, qty=None, description=None, extension_attributes=None, track_number=None, title=None, carrier_code=None):
        """
        SalesDataShipmentTrackInterface - a model defined in Swagger
        """

        self._order_id = None
        self._created_at = None
        self._entity_id = None
        self._parent_id = None
        self._updated_at = None
        self._weight = None
        self._qty = None
        self._description = None
        self._extension_attributes = None
        self._track_number = None
        self._title = None
        self._carrier_code = None

        self.order_id = order_id
        if created_at is not None:
          self.created_at = created_at
        if entity_id is not None:
          self.entity_id = entity_id
        self.parent_id = parent_id
        if updated_at is not None:
          self.updated_at = updated_at
        self.weight = weight
        self.qty = qty
        self.description = description
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes
        self.track_number = track_number
        self.title = title
        self.carrier_code = carrier_code

    @property
    def order_id(self):
        """
        Gets the order_id of this SalesDataShipmentTrackInterface.
        The order_id for the shipment package.

        :return: The order_id of this SalesDataShipmentTrackInterface.
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """
        Sets the order_id of this SalesDataShipmentTrackInterface.
        The order_id for the shipment package.

        :param order_id: The order_id of this SalesDataShipmentTrackInterface.
        :type: int
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")

        self._order_id = order_id

    @property
    def created_at(self):
        """
        Gets the created_at of this SalesDataShipmentTrackInterface.
        Created-at timestamp.

        :return: The created_at of this SalesDataShipmentTrackInterface.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this SalesDataShipmentTrackInterface.
        Created-at timestamp.

        :param created_at: The created_at of this SalesDataShipmentTrackInterface.
        :type: str
        """

        self._created_at = created_at

    @property
    def entity_id(self):
        """
        Gets the entity_id of this SalesDataShipmentTrackInterface.
        Shipment package ID.

        :return: The entity_id of this SalesDataShipmentTrackInterface.
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this SalesDataShipmentTrackInterface.
        Shipment package ID.

        :param entity_id: The entity_id of this SalesDataShipmentTrackInterface.
        :type: int
        """

        self._entity_id = entity_id

    @property
    def parent_id(self):
        """
        Gets the parent_id of this SalesDataShipmentTrackInterface.
        Parent ID.

        :return: The parent_id of this SalesDataShipmentTrackInterface.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """
        Sets the parent_id of this SalesDataShipmentTrackInterface.
        Parent ID.

        :param parent_id: The parent_id of this SalesDataShipmentTrackInterface.
        :type: int
        """
        if parent_id is None:
            raise ValueError("Invalid value for `parent_id`, must not be `None`")

        self._parent_id = parent_id

    @property
    def updated_at(self):
        """
        Gets the updated_at of this SalesDataShipmentTrackInterface.
        Updated-at timestamp.

        :return: The updated_at of this SalesDataShipmentTrackInterface.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this SalesDataShipmentTrackInterface.
        Updated-at timestamp.

        :param updated_at: The updated_at of this SalesDataShipmentTrackInterface.
        :type: str
        """

        self._updated_at = updated_at

    @property
    def weight(self):
        """
        Gets the weight of this SalesDataShipmentTrackInterface.
        Weight.

        :return: The weight of this SalesDataShipmentTrackInterface.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """
        Sets the weight of this SalesDataShipmentTrackInterface.
        Weight.

        :param weight: The weight of this SalesDataShipmentTrackInterface.
        :type: float
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")

        self._weight = weight

    @property
    def qty(self):
        """
        Gets the qty of this SalesDataShipmentTrackInterface.
        Quantity.

        :return: The qty of this SalesDataShipmentTrackInterface.
        :rtype: float
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """
        Sets the qty of this SalesDataShipmentTrackInterface.
        Quantity.

        :param qty: The qty of this SalesDataShipmentTrackInterface.
        :type: float
        """
        if qty is None:
            raise ValueError("Invalid value for `qty`, must not be `None`")

        self._qty = qty

    @property
    def description(self):
        """
        Gets the description of this SalesDataShipmentTrackInterface.
        Description.

        :return: The description of this SalesDataShipmentTrackInterface.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this SalesDataShipmentTrackInterface.
        Description.

        :param description: The description of this SalesDataShipmentTrackInterface.
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this SalesDataShipmentTrackInterface.

        :return: The extension_attributes of this SalesDataShipmentTrackInterface.
        :rtype: SalesDataShipmentTrackExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this SalesDataShipmentTrackInterface.

        :param extension_attributes: The extension_attributes of this SalesDataShipmentTrackInterface.
        :type: SalesDataShipmentTrackExtensionInterface
        """

        self._extension_attributes = extension_attributes

    @property
    def track_number(self):
        """
        Gets the track_number of this SalesDataShipmentTrackInterface.
        Track number.

        :return: The track_number of this SalesDataShipmentTrackInterface.
        :rtype: str
        """
        return self._track_number

    @track_number.setter
    def track_number(self, track_number):
        """
        Sets the track_number of this SalesDataShipmentTrackInterface.
        Track number.

        :param track_number: The track_number of this SalesDataShipmentTrackInterface.
        :type: str
        """
        if track_number is None:
            raise ValueError("Invalid value for `track_number`, must not be `None`")

        self._track_number = track_number

    @property
    def title(self):
        """
        Gets the title of this SalesDataShipmentTrackInterface.
        Title.

        :return: The title of this SalesDataShipmentTrackInterface.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this SalesDataShipmentTrackInterface.
        Title.

        :param title: The title of this SalesDataShipmentTrackInterface.
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def carrier_code(self):
        """
        Gets the carrier_code of this SalesDataShipmentTrackInterface.
        Carrier code.

        :return: The carrier_code of this SalesDataShipmentTrackInterface.
        :rtype: str
        """
        return self._carrier_code

    @carrier_code.setter
    def carrier_code(self, carrier_code):
        """
        Sets the carrier_code of this SalesDataShipmentTrackInterface.
        Carrier code.

        :param carrier_code: The carrier_code of this SalesDataShipmentTrackInterface.
        :type: str
        """
        if carrier_code is None:
            raise ValueError("Invalid value for `carrier_code`, must not be `None`")

        self._carrier_code = carrier_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SalesDataShipmentTrackInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
