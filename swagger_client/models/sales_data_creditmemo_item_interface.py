# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SalesDataCreditmemoItemInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_data': 'str',
        'base_cost': 'float',
        'base_discount_amount': 'float',
        'base_discount_tax_compensation_amount': 'float',
        'base_price': 'float',
        'base_price_incl_tax': 'float',
        'base_row_total': 'float',
        'base_row_total_incl_tax': 'float',
        'base_tax_amount': 'float',
        'base_weee_tax_applied_amount': 'float',
        'base_weee_tax_applied_row_amnt': 'float',
        'base_weee_tax_disposition': 'float',
        'base_weee_tax_row_disposition': 'float',
        'description': 'str',
        'discount_amount': 'float',
        'entity_id': 'int',
        'discount_tax_compensation_amount': 'float',
        'name': 'str',
        'order_item_id': 'int',
        'parent_id': 'int',
        'price': 'float',
        'price_incl_tax': 'float',
        'product_id': 'int',
        'qty': 'float',
        'row_total': 'float',
        'row_total_incl_tax': 'float',
        'sku': 'str',
        'tax_amount': 'float',
        'weee_tax_applied': 'str',
        'weee_tax_applied_amount': 'float',
        'weee_tax_applied_row_amount': 'float',
        'weee_tax_disposition': 'float',
        'weee_tax_row_disposition': 'float',
        'extension_attributes': 'SalesDataCreditmemoItemExtensionInterface'
    }

    attribute_map = {
        'additional_data': 'additional_data',
        'base_cost': 'base_cost',
        'base_discount_amount': 'base_discount_amount',
        'base_discount_tax_compensation_amount': 'base_discount_tax_compensation_amount',
        'base_price': 'base_price',
        'base_price_incl_tax': 'base_price_incl_tax',
        'base_row_total': 'base_row_total',
        'base_row_total_incl_tax': 'base_row_total_incl_tax',
        'base_tax_amount': 'base_tax_amount',
        'base_weee_tax_applied_amount': 'base_weee_tax_applied_amount',
        'base_weee_tax_applied_row_amnt': 'base_weee_tax_applied_row_amnt',
        'base_weee_tax_disposition': 'base_weee_tax_disposition',
        'base_weee_tax_row_disposition': 'base_weee_tax_row_disposition',
        'description': 'description',
        'discount_amount': 'discount_amount',
        'entity_id': 'entity_id',
        'discount_tax_compensation_amount': 'discount_tax_compensation_amount',
        'name': 'name',
        'order_item_id': 'order_item_id',
        'parent_id': 'parent_id',
        'price': 'price',
        'price_incl_tax': 'price_incl_tax',
        'product_id': 'product_id',
        'qty': 'qty',
        'row_total': 'row_total',
        'row_total_incl_tax': 'row_total_incl_tax',
        'sku': 'sku',
        'tax_amount': 'tax_amount',
        'weee_tax_applied': 'weee_tax_applied',
        'weee_tax_applied_amount': 'weee_tax_applied_amount',
        'weee_tax_applied_row_amount': 'weee_tax_applied_row_amount',
        'weee_tax_disposition': 'weee_tax_disposition',
        'weee_tax_row_disposition': 'weee_tax_row_disposition',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, additional_data=None, base_cost=None, base_discount_amount=None, base_discount_tax_compensation_amount=None, base_price=None, base_price_incl_tax=None, base_row_total=None, base_row_total_incl_tax=None, base_tax_amount=None, base_weee_tax_applied_amount=None, base_weee_tax_applied_row_amnt=None, base_weee_tax_disposition=None, base_weee_tax_row_disposition=None, description=None, discount_amount=None, entity_id=None, discount_tax_compensation_amount=None, name=None, order_item_id=None, parent_id=None, price=None, price_incl_tax=None, product_id=None, qty=None, row_total=None, row_total_incl_tax=None, sku=None, tax_amount=None, weee_tax_applied=None, weee_tax_applied_amount=None, weee_tax_applied_row_amount=None, weee_tax_disposition=None, weee_tax_row_disposition=None, extension_attributes=None):
        """
        SalesDataCreditmemoItemInterface - a model defined in Swagger
        """

        self._additional_data = None
        self._base_cost = None
        self._base_discount_amount = None
        self._base_discount_tax_compensation_amount = None
        self._base_price = None
        self._base_price_incl_tax = None
        self._base_row_total = None
        self._base_row_total_incl_tax = None
        self._base_tax_amount = None
        self._base_weee_tax_applied_amount = None
        self._base_weee_tax_applied_row_amnt = None
        self._base_weee_tax_disposition = None
        self._base_weee_tax_row_disposition = None
        self._description = None
        self._discount_amount = None
        self._entity_id = None
        self._discount_tax_compensation_amount = None
        self._name = None
        self._order_item_id = None
        self._parent_id = None
        self._price = None
        self._price_incl_tax = None
        self._product_id = None
        self._qty = None
        self._row_total = None
        self._row_total_incl_tax = None
        self._sku = None
        self._tax_amount = None
        self._weee_tax_applied = None
        self._weee_tax_applied_amount = None
        self._weee_tax_applied_row_amount = None
        self._weee_tax_disposition = None
        self._weee_tax_row_disposition = None
        self._extension_attributes = None

        if additional_data is not None:
          self.additional_data = additional_data
        self.base_cost = base_cost
        if base_discount_amount is not None:
          self.base_discount_amount = base_discount_amount
        if base_discount_tax_compensation_amount is not None:
          self.base_discount_tax_compensation_amount = base_discount_tax_compensation_amount
        self.base_price = base_price
        if base_price_incl_tax is not None:
          self.base_price_incl_tax = base_price_incl_tax
        if base_row_total is not None:
          self.base_row_total = base_row_total
        if base_row_total_incl_tax is not None:
          self.base_row_total_incl_tax = base_row_total_incl_tax
        if base_tax_amount is not None:
          self.base_tax_amount = base_tax_amount
        if base_weee_tax_applied_amount is not None:
          self.base_weee_tax_applied_amount = base_weee_tax_applied_amount
        if base_weee_tax_applied_row_amnt is not None:
          self.base_weee_tax_applied_row_amnt = base_weee_tax_applied_row_amnt
        if base_weee_tax_disposition is not None:
          self.base_weee_tax_disposition = base_weee_tax_disposition
        if base_weee_tax_row_disposition is not None:
          self.base_weee_tax_row_disposition = base_weee_tax_row_disposition
        if description is not None:
          self.description = description
        if discount_amount is not None:
          self.discount_amount = discount_amount
        self.entity_id = entity_id
        if discount_tax_compensation_amount is not None:
          self.discount_tax_compensation_amount = discount_tax_compensation_amount
        if name is not None:
          self.name = name
        self.order_item_id = order_item_id
        if parent_id is not None:
          self.parent_id = parent_id
        if price is not None:
          self.price = price
        if price_incl_tax is not None:
          self.price_incl_tax = price_incl_tax
        if product_id is not None:
          self.product_id = product_id
        self.qty = qty
        if row_total is not None:
          self.row_total = row_total
        if row_total_incl_tax is not None:
          self.row_total_incl_tax = row_total_incl_tax
        if sku is not None:
          self.sku = sku
        if tax_amount is not None:
          self.tax_amount = tax_amount
        if weee_tax_applied is not None:
          self.weee_tax_applied = weee_tax_applied
        if weee_tax_applied_amount is not None:
          self.weee_tax_applied_amount = weee_tax_applied_amount
        if weee_tax_applied_row_amount is not None:
          self.weee_tax_applied_row_amount = weee_tax_applied_row_amount
        if weee_tax_disposition is not None:
          self.weee_tax_disposition = weee_tax_disposition
        if weee_tax_row_disposition is not None:
          self.weee_tax_row_disposition = weee_tax_row_disposition
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def additional_data(self):
        """
        Gets the additional_data of this SalesDataCreditmemoItemInterface.
        Additional data.

        :return: The additional_data of this SalesDataCreditmemoItemInterface.
        :rtype: str
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """
        Sets the additional_data of this SalesDataCreditmemoItemInterface.
        Additional data.

        :param additional_data: The additional_data of this SalesDataCreditmemoItemInterface.
        :type: str
        """

        self._additional_data = additional_data

    @property
    def base_cost(self):
        """
        Gets the base_cost of this SalesDataCreditmemoItemInterface.
        The base cost for a credit memo item.

        :return: The base_cost of this SalesDataCreditmemoItemInterface.
        :rtype: float
        """
        return self._base_cost

    @base_cost.setter
    def base_cost(self, base_cost):
        """
        Sets the base_cost of this SalesDataCreditmemoItemInterface.
        The base cost for a credit memo item.

        :param base_cost: The base_cost of this SalesDataCreditmemoItemInterface.
        :type: float
        """
        if base_cost is None:
            raise ValueError("Invalid value for `base_cost`, must not be `None`")

        self._base_cost = base_cost

    @property
    def base_discount_amount(self):
        """
        Gets the base_discount_amount of this SalesDataCreditmemoItemInterface.
        The base discount amount for a credit memo item.

        :return: The base_discount_amount of this SalesDataCreditmemoItemInterface.
        :rtype: float
        """
        return self._base_discount_amount

    @base_discount_amount.setter
    def base_discount_amount(self, base_discount_amount):
        """
        Sets the base_discount_amount of this SalesDataCreditmemoItemInterface.
        The base discount amount for a credit memo item.

        :param base_discount_amount: The base_discount_amount of this SalesDataCreditmemoItemInterface.
        :type: float
        """

        self._base_discount_amount = base_discount_amount

    @property
    def base_discount_tax_compensation_amount(self):
        """
        Gets the base_discount_tax_compensation_amount of this SalesDataCreditmemoItemInterface.
        The base discount tax compensation amount for a credit memo item.

        :return: The base_discount_tax_compensation_amount of this SalesDataCreditmemoItemInterface.
        :rtype: float
        """
        return self._base_discount_tax_compensation_amount

    @base_discount_tax_compensation_amount.setter
    def base_discount_tax_compensation_amount(self, base_discount_tax_compensation_amount):
        """
        Sets the base_discount_tax_compensation_amount of this SalesDataCreditmemoItemInterface.
        The base discount tax compensation amount for a credit memo item.

        :param base_discount_tax_compensation_amount: The base_discount_tax_compensation_amount of this SalesDataCreditmemoItemInterface.
        :type: float
        """

        self._base_discount_tax_compensation_amount = base_discount_tax_compensation_amount

    @property
    def base_price(self):
        """
        Gets the base_price of this SalesDataCreditmemoItemInterface.
        The base price for a credit memo item.

        :return: The base_price of this SalesDataCreditmemoItemInterface.
        :rtype: float
        """
        return self._base_price

    @base_price.setter
    def base_price(self, base_price):
        """
        Sets the base_price of this SalesDataCreditmemoItemInterface.
        The base price for a credit memo item.

        :param base_price: The base_price of this SalesDataCreditmemoItemInterface.
        :type: float
        """
        if base_price is None:
            raise ValueError("Invalid value for `base_price`, must not be `None`")

        self._base_price = base_price

    @property
    def base_price_incl_tax(self):
        """
        Gets the base_price_incl_tax of this SalesDataCreditmemoItemInterface.
        Base price including tax.

        :return: The base_price_incl_tax of this SalesDataCreditmemoItemInterface.
        :rtype: float
        """
        return self._base_price_incl_tax

    @base_price_incl_tax.setter
    def base_price_incl_tax(self, base_price_incl_tax):
        """
        Sets the base_price_incl_tax of this SalesDataCreditmemoItemInterface.
        Base price including tax.

        :param base_price_incl_tax: The base_price_incl_tax of this SalesDataCreditmemoItemInterface.
        :type: float
        """

        self._base_price_incl_tax = base_price_incl_tax

    @property
    def base_row_total(self):
        """
        Gets the base_row_total of this SalesDataCreditmemoItemInterface.
        Base row total.

        :return: The base_row_total of this SalesDataCreditmemoItemInterface.
        :rtype: float
        """
        return self._base_row_total

    @base_row_total.setter
    def base_row_total(self, base_row_total):
        """
        Sets the base_row_total of this SalesDataCreditmemoItemInterface.
        Base row total.

        :param base_row_total: The base_row_total of this SalesDataCreditmemoItemInterface.
        :type: float
        """

        self._base_row_total = base_row_total

    @property
    def base_row_total_incl_tax(self):
        """
        Gets the base_row_total_incl_tax of this SalesDataCreditmemoItemInterface.
        Base row total including tax.

        :return: The base_row_total_incl_tax of this SalesDataCreditmemoItemInterface.
        :rtype: float
        """
        return self._base_row_total_incl_tax

    @base_row_total_incl_tax.setter
    def base_row_total_incl_tax(self, base_row_total_incl_tax):
        """
        Sets the base_row_total_incl_tax of this SalesDataCreditmemoItemInterface.
        Base row total including tax.

        :param base_row_total_incl_tax: The base_row_total_incl_tax of this SalesDataCreditmemoItemInterface.
        :type: float
        """

        self._base_row_total_incl_tax = base_row_total_incl_tax

    @property
    def base_tax_amount(self):
        """
        Gets the base_tax_amount of this SalesDataCreditmemoItemInterface.
        Base tax amount.

        :return: The base_tax_amount of this SalesDataCreditmemoItemInterface.
        :rtype: float
        """
        return self._base_tax_amount

    @base_tax_amount.setter
    def base_tax_amount(self, base_tax_amount):
        """
        Sets the base_tax_amount of this SalesDataCreditmemoItemInterface.
        Base tax amount.

        :param base_tax_amount: The base_tax_amount of this SalesDataCreditmemoItemInterface.
        :type: float
        """

        self._base_tax_amount = base_tax_amount

    @property
    def base_weee_tax_applied_amount(self):
        """
        Gets the base_weee_tax_applied_amount of this SalesDataCreditmemoItemInterface.
        Base WEEE tax applied amount.

        :return: The base_weee_tax_applied_amount of this SalesDataCreditmemoItemInterface.
        :rtype: float
        """
        return self._base_weee_tax_applied_amount

    @base_weee_tax_applied_amount.setter
    def base_weee_tax_applied_amount(self, base_weee_tax_applied_amount):
        """
        Sets the base_weee_tax_applied_amount of this SalesDataCreditmemoItemInterface.
        Base WEEE tax applied amount.

        :param base_weee_tax_applied_amount: The base_weee_tax_applied_amount of this SalesDataCreditmemoItemInterface.
        :type: float
        """

        self._base_weee_tax_applied_amount = base_weee_tax_applied_amount

    @property
    def base_weee_tax_applied_row_amnt(self):
        """
        Gets the base_weee_tax_applied_row_amnt of this SalesDataCreditmemoItemInterface.
        Base WEEE tax applied row amount.

        :return: The base_weee_tax_applied_row_amnt of this SalesDataCreditmemoItemInterface.
        :rtype: float
        """
        return self._base_weee_tax_applied_row_amnt

    @base_weee_tax_applied_row_amnt.setter
    def base_weee_tax_applied_row_amnt(self, base_weee_tax_applied_row_amnt):
        """
        Sets the base_weee_tax_applied_row_amnt of this SalesDataCreditmemoItemInterface.
        Base WEEE tax applied row amount.

        :param base_weee_tax_applied_row_amnt: The base_weee_tax_applied_row_amnt of this SalesDataCreditmemoItemInterface.
        :type: float
        """

        self._base_weee_tax_applied_row_amnt = base_weee_tax_applied_row_amnt

    @property
    def base_weee_tax_disposition(self):
        """
        Gets the base_weee_tax_disposition of this SalesDataCreditmemoItemInterface.
        Base WEEE tax disposition.

        :return: The base_weee_tax_disposition of this SalesDataCreditmemoItemInterface.
        :rtype: float
        """
        return self._base_weee_tax_disposition

    @base_weee_tax_disposition.setter
    def base_weee_tax_disposition(self, base_weee_tax_disposition):
        """
        Sets the base_weee_tax_disposition of this SalesDataCreditmemoItemInterface.
        Base WEEE tax disposition.

        :param base_weee_tax_disposition: The base_weee_tax_disposition of this SalesDataCreditmemoItemInterface.
        :type: float
        """

        self._base_weee_tax_disposition = base_weee_tax_disposition

    @property
    def base_weee_tax_row_disposition(self):
        """
        Gets the base_weee_tax_row_disposition of this SalesDataCreditmemoItemInterface.
        Base WEEE tax row disposition.

        :return: The base_weee_tax_row_disposition of this SalesDataCreditmemoItemInterface.
        :rtype: float
        """
        return self._base_weee_tax_row_disposition

    @base_weee_tax_row_disposition.setter
    def base_weee_tax_row_disposition(self, base_weee_tax_row_disposition):
        """
        Sets the base_weee_tax_row_disposition of this SalesDataCreditmemoItemInterface.
        Base WEEE tax row disposition.

        :param base_weee_tax_row_disposition: The base_weee_tax_row_disposition of this SalesDataCreditmemoItemInterface.
        :type: float
        """

        self._base_weee_tax_row_disposition = base_weee_tax_row_disposition

    @property
    def description(self):
        """
        Gets the description of this SalesDataCreditmemoItemInterface.
        Description.

        :return: The description of this SalesDataCreditmemoItemInterface.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this SalesDataCreditmemoItemInterface.
        Description.

        :param description: The description of this SalesDataCreditmemoItemInterface.
        :type: str
        """

        self._description = description

    @property
    def discount_amount(self):
        """
        Gets the discount_amount of this SalesDataCreditmemoItemInterface.
        Discount amount.

        :return: The discount_amount of this SalesDataCreditmemoItemInterface.
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """
        Sets the discount_amount of this SalesDataCreditmemoItemInterface.
        Discount amount.

        :param discount_amount: The discount_amount of this SalesDataCreditmemoItemInterface.
        :type: float
        """

        self._discount_amount = discount_amount

    @property
    def entity_id(self):
        """
        Gets the entity_id of this SalesDataCreditmemoItemInterface.
        Credit memo item ID.

        :return: The entity_id of this SalesDataCreditmemoItemInterface.
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this SalesDataCreditmemoItemInterface.
        Credit memo item ID.

        :param entity_id: The entity_id of this SalesDataCreditmemoItemInterface.
        :type: int
        """
        if entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")

        self._entity_id = entity_id

    @property
    def discount_tax_compensation_amount(self):
        """
        Gets the discount_tax_compensation_amount of this SalesDataCreditmemoItemInterface.
        Discount tax compensation amount.

        :return: The discount_tax_compensation_amount of this SalesDataCreditmemoItemInterface.
        :rtype: float
        """
        return self._discount_tax_compensation_amount

    @discount_tax_compensation_amount.setter
    def discount_tax_compensation_amount(self, discount_tax_compensation_amount):
        """
        Sets the discount_tax_compensation_amount of this SalesDataCreditmemoItemInterface.
        Discount tax compensation amount.

        :param discount_tax_compensation_amount: The discount_tax_compensation_amount of this SalesDataCreditmemoItemInterface.
        :type: float
        """

        self._discount_tax_compensation_amount = discount_tax_compensation_amount

    @property
    def name(self):
        """
        Gets the name of this SalesDataCreditmemoItemInterface.
        Name.

        :return: The name of this SalesDataCreditmemoItemInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SalesDataCreditmemoItemInterface.
        Name.

        :param name: The name of this SalesDataCreditmemoItemInterface.
        :type: str
        """

        self._name = name

    @property
    def order_item_id(self):
        """
        Gets the order_item_id of this SalesDataCreditmemoItemInterface.
        Order item ID.

        :return: The order_item_id of this SalesDataCreditmemoItemInterface.
        :rtype: int
        """
        return self._order_item_id

    @order_item_id.setter
    def order_item_id(self, order_item_id):
        """
        Sets the order_item_id of this SalesDataCreditmemoItemInterface.
        Order item ID.

        :param order_item_id: The order_item_id of this SalesDataCreditmemoItemInterface.
        :type: int
        """
        if order_item_id is None:
            raise ValueError("Invalid value for `order_item_id`, must not be `None`")

        self._order_item_id = order_item_id

    @property
    def parent_id(self):
        """
        Gets the parent_id of this SalesDataCreditmemoItemInterface.
        Parent ID.

        :return: The parent_id of this SalesDataCreditmemoItemInterface.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """
        Sets the parent_id of this SalesDataCreditmemoItemInterface.
        Parent ID.

        :param parent_id: The parent_id of this SalesDataCreditmemoItemInterface.
        :type: int
        """

        self._parent_id = parent_id

    @property
    def price(self):
        """
        Gets the price of this SalesDataCreditmemoItemInterface.
        Price.

        :return: The price of this SalesDataCreditmemoItemInterface.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this SalesDataCreditmemoItemInterface.
        Price.

        :param price: The price of this SalesDataCreditmemoItemInterface.
        :type: float
        """

        self._price = price

    @property
    def price_incl_tax(self):
        """
        Gets the price_incl_tax of this SalesDataCreditmemoItemInterface.
        Price including tax.

        :return: The price_incl_tax of this SalesDataCreditmemoItemInterface.
        :rtype: float
        """
        return self._price_incl_tax

    @price_incl_tax.setter
    def price_incl_tax(self, price_incl_tax):
        """
        Sets the price_incl_tax of this SalesDataCreditmemoItemInterface.
        Price including tax.

        :param price_incl_tax: The price_incl_tax of this SalesDataCreditmemoItemInterface.
        :type: float
        """

        self._price_incl_tax = price_incl_tax

    @property
    def product_id(self):
        """
        Gets the product_id of this SalesDataCreditmemoItemInterface.
        Product ID.

        :return: The product_id of this SalesDataCreditmemoItemInterface.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """
        Sets the product_id of this SalesDataCreditmemoItemInterface.
        Product ID.

        :param product_id: The product_id of this SalesDataCreditmemoItemInterface.
        :type: int
        """

        self._product_id = product_id

    @property
    def qty(self):
        """
        Gets the qty of this SalesDataCreditmemoItemInterface.
        Quantity.

        :return: The qty of this SalesDataCreditmemoItemInterface.
        :rtype: float
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """
        Sets the qty of this SalesDataCreditmemoItemInterface.
        Quantity.

        :param qty: The qty of this SalesDataCreditmemoItemInterface.
        :type: float
        """
        if qty is None:
            raise ValueError("Invalid value for `qty`, must not be `None`")

        self._qty = qty

    @property
    def row_total(self):
        """
        Gets the row_total of this SalesDataCreditmemoItemInterface.
        Row total.

        :return: The row_total of this SalesDataCreditmemoItemInterface.
        :rtype: float
        """
        return self._row_total

    @row_total.setter
    def row_total(self, row_total):
        """
        Sets the row_total of this SalesDataCreditmemoItemInterface.
        Row total.

        :param row_total: The row_total of this SalesDataCreditmemoItemInterface.
        :type: float
        """

        self._row_total = row_total

    @property
    def row_total_incl_tax(self):
        """
        Gets the row_total_incl_tax of this SalesDataCreditmemoItemInterface.
        Row total including tax.

        :return: The row_total_incl_tax of this SalesDataCreditmemoItemInterface.
        :rtype: float
        """
        return self._row_total_incl_tax

    @row_total_incl_tax.setter
    def row_total_incl_tax(self, row_total_incl_tax):
        """
        Sets the row_total_incl_tax of this SalesDataCreditmemoItemInterface.
        Row total including tax.

        :param row_total_incl_tax: The row_total_incl_tax of this SalesDataCreditmemoItemInterface.
        :type: float
        """

        self._row_total_incl_tax = row_total_incl_tax

    @property
    def sku(self):
        """
        Gets the sku of this SalesDataCreditmemoItemInterface.
        SKU.

        :return: The sku of this SalesDataCreditmemoItemInterface.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this SalesDataCreditmemoItemInterface.
        SKU.

        :param sku: The sku of this SalesDataCreditmemoItemInterface.
        :type: str
        """

        self._sku = sku

    @property
    def tax_amount(self):
        """
        Gets the tax_amount of this SalesDataCreditmemoItemInterface.
        Tax amount.

        :return: The tax_amount of this SalesDataCreditmemoItemInterface.
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """
        Sets the tax_amount of this SalesDataCreditmemoItemInterface.
        Tax amount.

        :param tax_amount: The tax_amount of this SalesDataCreditmemoItemInterface.
        :type: float
        """

        self._tax_amount = tax_amount

    @property
    def weee_tax_applied(self):
        """
        Gets the weee_tax_applied of this SalesDataCreditmemoItemInterface.
        WEEE tax applied.

        :return: The weee_tax_applied of this SalesDataCreditmemoItemInterface.
        :rtype: str
        """
        return self._weee_tax_applied

    @weee_tax_applied.setter
    def weee_tax_applied(self, weee_tax_applied):
        """
        Sets the weee_tax_applied of this SalesDataCreditmemoItemInterface.
        WEEE tax applied.

        :param weee_tax_applied: The weee_tax_applied of this SalesDataCreditmemoItemInterface.
        :type: str
        """

        self._weee_tax_applied = weee_tax_applied

    @property
    def weee_tax_applied_amount(self):
        """
        Gets the weee_tax_applied_amount of this SalesDataCreditmemoItemInterface.
        WEEE tax applied amount.

        :return: The weee_tax_applied_amount of this SalesDataCreditmemoItemInterface.
        :rtype: float
        """
        return self._weee_tax_applied_amount

    @weee_tax_applied_amount.setter
    def weee_tax_applied_amount(self, weee_tax_applied_amount):
        """
        Sets the weee_tax_applied_amount of this SalesDataCreditmemoItemInterface.
        WEEE tax applied amount.

        :param weee_tax_applied_amount: The weee_tax_applied_amount of this SalesDataCreditmemoItemInterface.
        :type: float
        """

        self._weee_tax_applied_amount = weee_tax_applied_amount

    @property
    def weee_tax_applied_row_amount(self):
        """
        Gets the weee_tax_applied_row_amount of this SalesDataCreditmemoItemInterface.
        WEEE tax applied row amount.

        :return: The weee_tax_applied_row_amount of this SalesDataCreditmemoItemInterface.
        :rtype: float
        """
        return self._weee_tax_applied_row_amount

    @weee_tax_applied_row_amount.setter
    def weee_tax_applied_row_amount(self, weee_tax_applied_row_amount):
        """
        Sets the weee_tax_applied_row_amount of this SalesDataCreditmemoItemInterface.
        WEEE tax applied row amount.

        :param weee_tax_applied_row_amount: The weee_tax_applied_row_amount of this SalesDataCreditmemoItemInterface.
        :type: float
        """

        self._weee_tax_applied_row_amount = weee_tax_applied_row_amount

    @property
    def weee_tax_disposition(self):
        """
        Gets the weee_tax_disposition of this SalesDataCreditmemoItemInterface.
        WEEE tax disposition.

        :return: The weee_tax_disposition of this SalesDataCreditmemoItemInterface.
        :rtype: float
        """
        return self._weee_tax_disposition

    @weee_tax_disposition.setter
    def weee_tax_disposition(self, weee_tax_disposition):
        """
        Sets the weee_tax_disposition of this SalesDataCreditmemoItemInterface.
        WEEE tax disposition.

        :param weee_tax_disposition: The weee_tax_disposition of this SalesDataCreditmemoItemInterface.
        :type: float
        """

        self._weee_tax_disposition = weee_tax_disposition

    @property
    def weee_tax_row_disposition(self):
        """
        Gets the weee_tax_row_disposition of this SalesDataCreditmemoItemInterface.
        WEEE tax row disposition.

        :return: The weee_tax_row_disposition of this SalesDataCreditmemoItemInterface.
        :rtype: float
        """
        return self._weee_tax_row_disposition

    @weee_tax_row_disposition.setter
    def weee_tax_row_disposition(self, weee_tax_row_disposition):
        """
        Sets the weee_tax_row_disposition of this SalesDataCreditmemoItemInterface.
        WEEE tax row disposition.

        :param weee_tax_row_disposition: The weee_tax_row_disposition of this SalesDataCreditmemoItemInterface.
        :type: float
        """

        self._weee_tax_row_disposition = weee_tax_row_disposition

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this SalesDataCreditmemoItemInterface.

        :return: The extension_attributes of this SalesDataCreditmemoItemInterface.
        :rtype: SalesDataCreditmemoItemExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this SalesDataCreditmemoItemInterface.

        :param extension_attributes: The extension_attributes of this SalesDataCreditmemoItemInterface.
        :type: SalesDataCreditmemoItemExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SalesDataCreditmemoItemInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
