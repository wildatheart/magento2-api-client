# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CatalogDataProductRenderImageInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'code': 'str',
        'height': 'float',
        'width': 'float',
        'label': 'str',
        'resized_width': 'float',
        'resized_height': 'float',
        'extension_attributes': 'CatalogDataProductRenderImageExtensionInterface'
    }

    attribute_map = {
        'url': 'url',
        'code': 'code',
        'height': 'height',
        'width': 'width',
        'label': 'label',
        'resized_width': 'resized_width',
        'resized_height': 'resized_height',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, url=None, code=None, height=None, width=None, label=None, resized_width=None, resized_height=None, extension_attributes=None):
        """
        CatalogDataProductRenderImageInterface - a model defined in Swagger
        """

        self._url = None
        self._code = None
        self._height = None
        self._width = None
        self._label = None
        self._resized_width = None
        self._resized_height = None
        self._extension_attributes = None

        self.url = url
        self.code = code
        self.height = height
        self.width = width
        self.label = label
        self.resized_width = resized_width
        self.resized_height = resized_height
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def url(self):
        """
        Gets the url of this CatalogDataProductRenderImageInterface.
        Image url

        :return: The url of this CatalogDataProductRenderImageInterface.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this CatalogDataProductRenderImageInterface.
        Image url

        :param url: The url of this CatalogDataProductRenderImageInterface.
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def code(self):
        """
        Gets the code of this CatalogDataProductRenderImageInterface.
        Image code

        :return: The code of this CatalogDataProductRenderImageInterface.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this CatalogDataProductRenderImageInterface.
        Image code

        :param code: The code of this CatalogDataProductRenderImageInterface.
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def height(self):
        """
        Gets the height of this CatalogDataProductRenderImageInterface.
        Image height

        :return: The height of this CatalogDataProductRenderImageInterface.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """
        Sets the height of this CatalogDataProductRenderImageInterface.
        Image height

        :param height: The height of this CatalogDataProductRenderImageInterface.
        :type: float
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")

        self._height = height

    @property
    def width(self):
        """
        Gets the width of this CatalogDataProductRenderImageInterface.
        Image width in px

        :return: The width of this CatalogDataProductRenderImageInterface.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """
        Sets the width of this CatalogDataProductRenderImageInterface.
        Image width in px

        :param width: The width of this CatalogDataProductRenderImageInterface.
        :type: float
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")

        self._width = width

    @property
    def label(self):
        """
        Gets the label of this CatalogDataProductRenderImageInterface.
        Image label

        :return: The label of this CatalogDataProductRenderImageInterface.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this CatalogDataProductRenderImageInterface.
        Image label

        :param label: The label of this CatalogDataProductRenderImageInterface.
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def resized_width(self):
        """
        Gets the resized_width of this CatalogDataProductRenderImageInterface.
        Resize width

        :return: The resized_width of this CatalogDataProductRenderImageInterface.
        :rtype: float
        """
        return self._resized_width

    @resized_width.setter
    def resized_width(self, resized_width):
        """
        Sets the resized_width of this CatalogDataProductRenderImageInterface.
        Resize width

        :param resized_width: The resized_width of this CatalogDataProductRenderImageInterface.
        :type: float
        """
        if resized_width is None:
            raise ValueError("Invalid value for `resized_width`, must not be `None`")

        self._resized_width = resized_width

    @property
    def resized_height(self):
        """
        Gets the resized_height of this CatalogDataProductRenderImageInterface.
        Resize height

        :return: The resized_height of this CatalogDataProductRenderImageInterface.
        :rtype: float
        """
        return self._resized_height

    @resized_height.setter
    def resized_height(self, resized_height):
        """
        Sets the resized_height of this CatalogDataProductRenderImageInterface.
        Resize height

        :param resized_height: The resized_height of this CatalogDataProductRenderImageInterface.
        :type: float
        """
        if resized_height is None:
            raise ValueError("Invalid value for `resized_height`, must not be `None`")

        self._resized_height = resized_height

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this CatalogDataProductRenderImageInterface.

        :return: The extension_attributes of this CatalogDataProductRenderImageInterface.
        :rtype: CatalogDataProductRenderImageExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this CatalogDataProductRenderImageInterface.

        :param extension_attributes: The extension_attributes of this CatalogDataProductRenderImageInterface.
        :type: CatalogDataProductRenderImageExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CatalogDataProductRenderImageInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
