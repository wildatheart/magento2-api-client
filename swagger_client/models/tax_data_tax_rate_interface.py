# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TaxDataTaxRateInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'tax_country_id': 'str',
        'tax_region_id': 'int',
        'region_name': 'str',
        'tax_postcode': 'str',
        'zip_is_range': 'int',
        'zip_from': 'int',
        'zip_to': 'int',
        'rate': 'float',
        'code': 'str',
        'titles': 'list[TaxDataTaxRateTitleInterface]',
        'extension_attributes': 'TaxDataTaxRateExtensionInterface'
    }

    attribute_map = {
        'id': 'id',
        'tax_country_id': 'tax_country_id',
        'tax_region_id': 'tax_region_id',
        'region_name': 'region_name',
        'tax_postcode': 'tax_postcode',
        'zip_is_range': 'zip_is_range',
        'zip_from': 'zip_from',
        'zip_to': 'zip_to',
        'rate': 'rate',
        'code': 'code',
        'titles': 'titles',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, id=None, tax_country_id=None, tax_region_id=None, region_name=None, tax_postcode=None, zip_is_range=None, zip_from=None, zip_to=None, rate=None, code=None, titles=None, extension_attributes=None):
        """
        TaxDataTaxRateInterface - a model defined in Swagger
        """

        self._id = None
        self._tax_country_id = None
        self._tax_region_id = None
        self._region_name = None
        self._tax_postcode = None
        self._zip_is_range = None
        self._zip_from = None
        self._zip_to = None
        self._rate = None
        self._code = None
        self._titles = None
        self._extension_attributes = None

        if id is not None:
          self.id = id
        self.tax_country_id = tax_country_id
        if tax_region_id is not None:
          self.tax_region_id = tax_region_id
        if region_name is not None:
          self.region_name = region_name
        if tax_postcode is not None:
          self.tax_postcode = tax_postcode
        if zip_is_range is not None:
          self.zip_is_range = zip_is_range
        if zip_from is not None:
          self.zip_from = zip_from
        if zip_to is not None:
          self.zip_to = zip_to
        self.rate = rate
        self.code = code
        if titles is not None:
          self.titles = titles
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def id(self):
        """
        Gets the id of this TaxDataTaxRateInterface.
        Id

        :return: The id of this TaxDataTaxRateInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this TaxDataTaxRateInterface.
        Id

        :param id: The id of this TaxDataTaxRateInterface.
        :type: int
        """

        self._id = id

    @property
    def tax_country_id(self):
        """
        Gets the tax_country_id of this TaxDataTaxRateInterface.
        Country id

        :return: The tax_country_id of this TaxDataTaxRateInterface.
        :rtype: str
        """
        return self._tax_country_id

    @tax_country_id.setter
    def tax_country_id(self, tax_country_id):
        """
        Sets the tax_country_id of this TaxDataTaxRateInterface.
        Country id

        :param tax_country_id: The tax_country_id of this TaxDataTaxRateInterface.
        :type: str
        """
        if tax_country_id is None:
            raise ValueError("Invalid value for `tax_country_id`, must not be `None`")

        self._tax_country_id = tax_country_id

    @property
    def tax_region_id(self):
        """
        Gets the tax_region_id of this TaxDataTaxRateInterface.
        Region id

        :return: The tax_region_id of this TaxDataTaxRateInterface.
        :rtype: int
        """
        return self._tax_region_id

    @tax_region_id.setter
    def tax_region_id(self, tax_region_id):
        """
        Sets the tax_region_id of this TaxDataTaxRateInterface.
        Region id

        :param tax_region_id: The tax_region_id of this TaxDataTaxRateInterface.
        :type: int
        """

        self._tax_region_id = tax_region_id

    @property
    def region_name(self):
        """
        Gets the region_name of this TaxDataTaxRateInterface.
        Region name

        :return: The region_name of this TaxDataTaxRateInterface.
        :rtype: str
        """
        return self._region_name

    @region_name.setter
    def region_name(self, region_name):
        """
        Sets the region_name of this TaxDataTaxRateInterface.
        Region name

        :param region_name: The region_name of this TaxDataTaxRateInterface.
        :type: str
        """

        self._region_name = region_name

    @property
    def tax_postcode(self):
        """
        Gets the tax_postcode of this TaxDataTaxRateInterface.
        Postcode

        :return: The tax_postcode of this TaxDataTaxRateInterface.
        :rtype: str
        """
        return self._tax_postcode

    @tax_postcode.setter
    def tax_postcode(self, tax_postcode):
        """
        Sets the tax_postcode of this TaxDataTaxRateInterface.
        Postcode

        :param tax_postcode: The tax_postcode of this TaxDataTaxRateInterface.
        :type: str
        """

        self._tax_postcode = tax_postcode

    @property
    def zip_is_range(self):
        """
        Gets the zip_is_range of this TaxDataTaxRateInterface.
        Zip is range

        :return: The zip_is_range of this TaxDataTaxRateInterface.
        :rtype: int
        """
        return self._zip_is_range

    @zip_is_range.setter
    def zip_is_range(self, zip_is_range):
        """
        Sets the zip_is_range of this TaxDataTaxRateInterface.
        Zip is range

        :param zip_is_range: The zip_is_range of this TaxDataTaxRateInterface.
        :type: int
        """

        self._zip_is_range = zip_is_range

    @property
    def zip_from(self):
        """
        Gets the zip_from of this TaxDataTaxRateInterface.
        Zip range from

        :return: The zip_from of this TaxDataTaxRateInterface.
        :rtype: int
        """
        return self._zip_from

    @zip_from.setter
    def zip_from(self, zip_from):
        """
        Sets the zip_from of this TaxDataTaxRateInterface.
        Zip range from

        :param zip_from: The zip_from of this TaxDataTaxRateInterface.
        :type: int
        """

        self._zip_from = zip_from

    @property
    def zip_to(self):
        """
        Gets the zip_to of this TaxDataTaxRateInterface.
        Zip range to

        :return: The zip_to of this TaxDataTaxRateInterface.
        :rtype: int
        """
        return self._zip_to

    @zip_to.setter
    def zip_to(self, zip_to):
        """
        Sets the zip_to of this TaxDataTaxRateInterface.
        Zip range to

        :param zip_to: The zip_to of this TaxDataTaxRateInterface.
        :type: int
        """

        self._zip_to = zip_to

    @property
    def rate(self):
        """
        Gets the rate of this TaxDataTaxRateInterface.
        Tax rate in percentage

        :return: The rate of this TaxDataTaxRateInterface.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """
        Sets the rate of this TaxDataTaxRateInterface.
        Tax rate in percentage

        :param rate: The rate of this TaxDataTaxRateInterface.
        :type: float
        """
        if rate is None:
            raise ValueError("Invalid value for `rate`, must not be `None`")

        self._rate = rate

    @property
    def code(self):
        """
        Gets the code of this TaxDataTaxRateInterface.
        Tax rate code

        :return: The code of this TaxDataTaxRateInterface.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this TaxDataTaxRateInterface.
        Tax rate code

        :param code: The code of this TaxDataTaxRateInterface.
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def titles(self):
        """
        Gets the titles of this TaxDataTaxRateInterface.
        Tax rate titles

        :return: The titles of this TaxDataTaxRateInterface.
        :rtype: list[TaxDataTaxRateTitleInterface]
        """
        return self._titles

    @titles.setter
    def titles(self, titles):
        """
        Sets the titles of this TaxDataTaxRateInterface.
        Tax rate titles

        :param titles: The titles of this TaxDataTaxRateInterface.
        :type: list[TaxDataTaxRateTitleInterface]
        """

        self._titles = titles

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this TaxDataTaxRateInterface.

        :return: The extension_attributes of this TaxDataTaxRateInterface.
        :rtype: TaxDataTaxRateExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this TaxDataTaxRateInterface.

        :param extension_attributes: The extension_attributes of this TaxDataTaxRateInterface.
        :type: TaxDataTaxRateExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TaxDataTaxRateInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
