# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class QuoteDataCartInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_at': 'str',
        'updated_at': 'str',
        'converted_at': 'str',
        'is_active': 'bool',
        'is_virtual': 'bool',
        'items': 'list[QuoteDataCartItemInterface]',
        'items_count': 'int',
        'items_qty': 'float',
        'customer': 'CustomerDataCustomerInterface',
        'billing_address': 'QuoteDataAddressInterface',
        'reserved_order_id': 'int',
        'orig_order_id': 'int',
        'currency': 'QuoteDataCurrencyInterface',
        'customer_is_guest': 'bool',
        'customer_note': 'str',
        'customer_note_notify': 'bool',
        'customer_tax_class_id': 'int',
        'store_id': 'int',
        'extension_attributes': 'QuoteDataCartExtensionInterface'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'converted_at': 'converted_at',
        'is_active': 'is_active',
        'is_virtual': 'is_virtual',
        'items': 'items',
        'items_count': 'items_count',
        'items_qty': 'items_qty',
        'customer': 'customer',
        'billing_address': 'billing_address',
        'reserved_order_id': 'reserved_order_id',
        'orig_order_id': 'orig_order_id',
        'currency': 'currency',
        'customer_is_guest': 'customer_is_guest',
        'customer_note': 'customer_note',
        'customer_note_notify': 'customer_note_notify',
        'customer_tax_class_id': 'customer_tax_class_id',
        'store_id': 'store_id',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, id=None, created_at=None, updated_at=None, converted_at=None, is_active=None, is_virtual=None, items=None, items_count=None, items_qty=None, customer=None, billing_address=None, reserved_order_id=None, orig_order_id=None, currency=None, customer_is_guest=None, customer_note=None, customer_note_notify=None, customer_tax_class_id=None, store_id=None, extension_attributes=None):
        """
        QuoteDataCartInterface - a model defined in Swagger
        """

        self._id = None
        self._created_at = None
        self._updated_at = None
        self._converted_at = None
        self._is_active = None
        self._is_virtual = None
        self._items = None
        self._items_count = None
        self._items_qty = None
        self._customer = None
        self._billing_address = None
        self._reserved_order_id = None
        self._orig_order_id = None
        self._currency = None
        self._customer_is_guest = None
        self._customer_note = None
        self._customer_note_notify = None
        self._customer_tax_class_id = None
        self._store_id = None
        self._extension_attributes = None

        self.id = id
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at
        if converted_at is not None:
          self.converted_at = converted_at
        if is_active is not None:
          self.is_active = is_active
        if is_virtual is not None:
          self.is_virtual = is_virtual
        if items is not None:
          self.items = items
        if items_count is not None:
          self.items_count = items_count
        if items_qty is not None:
          self.items_qty = items_qty
        self.customer = customer
        if billing_address is not None:
          self.billing_address = billing_address
        if reserved_order_id is not None:
          self.reserved_order_id = reserved_order_id
        if orig_order_id is not None:
          self.orig_order_id = orig_order_id
        if currency is not None:
          self.currency = currency
        if customer_is_guest is not None:
          self.customer_is_guest = customer_is_guest
        if customer_note is not None:
          self.customer_note = customer_note
        if customer_note_notify is not None:
          self.customer_note_notify = customer_note_notify
        if customer_tax_class_id is not None:
          self.customer_tax_class_id = customer_tax_class_id
        self.store_id = store_id
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def id(self):
        """
        Gets the id of this QuoteDataCartInterface.
        Cart/quote ID.

        :return: The id of this QuoteDataCartInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this QuoteDataCartInterface.
        Cart/quote ID.

        :param id: The id of this QuoteDataCartInterface.
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def created_at(self):
        """
        Gets the created_at of this QuoteDataCartInterface.
        Cart creation date and time. Otherwise, null.

        :return: The created_at of this QuoteDataCartInterface.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this QuoteDataCartInterface.
        Cart creation date and time. Otherwise, null.

        :param created_at: The created_at of this QuoteDataCartInterface.
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this QuoteDataCartInterface.
        Cart last update date and time. Otherwise, null.

        :return: The updated_at of this QuoteDataCartInterface.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this QuoteDataCartInterface.
        Cart last update date and time. Otherwise, null.

        :param updated_at: The updated_at of this QuoteDataCartInterface.
        :type: str
        """

        self._updated_at = updated_at

    @property
    def converted_at(self):
        """
        Gets the converted_at of this QuoteDataCartInterface.
        Cart conversion date and time. Otherwise, null.

        :return: The converted_at of this QuoteDataCartInterface.
        :rtype: str
        """
        return self._converted_at

    @converted_at.setter
    def converted_at(self, converted_at):
        """
        Sets the converted_at of this QuoteDataCartInterface.
        Cart conversion date and time. Otherwise, null.

        :param converted_at: The converted_at of this QuoteDataCartInterface.
        :type: str
        """

        self._converted_at = converted_at

    @property
    def is_active(self):
        """
        Gets the is_active of this QuoteDataCartInterface.
        Active status flag value. Otherwise, null.

        :return: The is_active of this QuoteDataCartInterface.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """
        Sets the is_active of this QuoteDataCartInterface.
        Active status flag value. Otherwise, null.

        :param is_active: The is_active of this QuoteDataCartInterface.
        :type: bool
        """

        self._is_active = is_active

    @property
    def is_virtual(self):
        """
        Gets the is_virtual of this QuoteDataCartInterface.
        Virtual flag value. Otherwise, null.

        :return: The is_virtual of this QuoteDataCartInterface.
        :rtype: bool
        """
        return self._is_virtual

    @is_virtual.setter
    def is_virtual(self, is_virtual):
        """
        Sets the is_virtual of this QuoteDataCartInterface.
        Virtual flag value. Otherwise, null.

        :param is_virtual: The is_virtual of this QuoteDataCartInterface.
        :type: bool
        """

        self._is_virtual = is_virtual

    @property
    def items(self):
        """
        Gets the items of this QuoteDataCartInterface.
        Array of items. Otherwise, null.

        :return: The items of this QuoteDataCartInterface.
        :rtype: list[QuoteDataCartItemInterface]
        """
        return self._items

    @items.setter
    def items(self, items):
        """
        Sets the items of this QuoteDataCartInterface.
        Array of items. Otherwise, null.

        :param items: The items of this QuoteDataCartInterface.
        :type: list[QuoteDataCartItemInterface]
        """

        self._items = items

    @property
    def items_count(self):
        """
        Gets the items_count of this QuoteDataCartInterface.
        Number of different items or products in the cart. Otherwise, null.

        :return: The items_count of this QuoteDataCartInterface.
        :rtype: int
        """
        return self._items_count

    @items_count.setter
    def items_count(self, items_count):
        """
        Sets the items_count of this QuoteDataCartInterface.
        Number of different items or products in the cart. Otherwise, null.

        :param items_count: The items_count of this QuoteDataCartInterface.
        :type: int
        """

        self._items_count = items_count

    @property
    def items_qty(self):
        """
        Gets the items_qty of this QuoteDataCartInterface.
        Total quantity of all cart items. Otherwise, null.

        :return: The items_qty of this QuoteDataCartInterface.
        :rtype: float
        """
        return self._items_qty

    @items_qty.setter
    def items_qty(self, items_qty):
        """
        Sets the items_qty of this QuoteDataCartInterface.
        Total quantity of all cart items. Otherwise, null.

        :param items_qty: The items_qty of this QuoteDataCartInterface.
        :type: float
        """

        self._items_qty = items_qty

    @property
    def customer(self):
        """
        Gets the customer of this QuoteDataCartInterface.

        :return: The customer of this QuoteDataCartInterface.
        :rtype: CustomerDataCustomerInterface
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """
        Sets the customer of this QuoteDataCartInterface.

        :param customer: The customer of this QuoteDataCartInterface.
        :type: CustomerDataCustomerInterface
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")

        self._customer = customer

    @property
    def billing_address(self):
        """
        Gets the billing_address of this QuoteDataCartInterface.

        :return: The billing_address of this QuoteDataCartInterface.
        :rtype: QuoteDataAddressInterface
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """
        Sets the billing_address of this QuoteDataCartInterface.

        :param billing_address: The billing_address of this QuoteDataCartInterface.
        :type: QuoteDataAddressInterface
        """

        self._billing_address = billing_address

    @property
    def reserved_order_id(self):
        """
        Gets the reserved_order_id of this QuoteDataCartInterface.
        Reserved order ID. Otherwise, null.

        :return: The reserved_order_id of this QuoteDataCartInterface.
        :rtype: int
        """
        return self._reserved_order_id

    @reserved_order_id.setter
    def reserved_order_id(self, reserved_order_id):
        """
        Sets the reserved_order_id of this QuoteDataCartInterface.
        Reserved order ID. Otherwise, null.

        :param reserved_order_id: The reserved_order_id of this QuoteDataCartInterface.
        :type: int
        """

        self._reserved_order_id = reserved_order_id

    @property
    def orig_order_id(self):
        """
        Gets the orig_order_id of this QuoteDataCartInterface.
        Original order ID. Otherwise, null.

        :return: The orig_order_id of this QuoteDataCartInterface.
        :rtype: int
        """
        return self._orig_order_id

    @orig_order_id.setter
    def orig_order_id(self, orig_order_id):
        """
        Sets the orig_order_id of this QuoteDataCartInterface.
        Original order ID. Otherwise, null.

        :param orig_order_id: The orig_order_id of this QuoteDataCartInterface.
        :type: int
        """

        self._orig_order_id = orig_order_id

    @property
    def currency(self):
        """
        Gets the currency of this QuoteDataCartInterface.

        :return: The currency of this QuoteDataCartInterface.
        :rtype: QuoteDataCurrencyInterface
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this QuoteDataCartInterface.

        :param currency: The currency of this QuoteDataCartInterface.
        :type: QuoteDataCurrencyInterface
        """

        self._currency = currency

    @property
    def customer_is_guest(self):
        """
        Gets the customer_is_guest of this QuoteDataCartInterface.
        For guest customers, false for logged in customers

        :return: The customer_is_guest of this QuoteDataCartInterface.
        :rtype: bool
        """
        return self._customer_is_guest

    @customer_is_guest.setter
    def customer_is_guest(self, customer_is_guest):
        """
        Sets the customer_is_guest of this QuoteDataCartInterface.
        For guest customers, false for logged in customers

        :param customer_is_guest: The customer_is_guest of this QuoteDataCartInterface.
        :type: bool
        """

        self._customer_is_guest = customer_is_guest

    @property
    def customer_note(self):
        """
        Gets the customer_note of this QuoteDataCartInterface.
        Notice text

        :return: The customer_note of this QuoteDataCartInterface.
        :rtype: str
        """
        return self._customer_note

    @customer_note.setter
    def customer_note(self, customer_note):
        """
        Sets the customer_note of this QuoteDataCartInterface.
        Notice text

        :param customer_note: The customer_note of this QuoteDataCartInterface.
        :type: str
        """

        self._customer_note = customer_note

    @property
    def customer_note_notify(self):
        """
        Gets the customer_note_notify of this QuoteDataCartInterface.
        Customer notification flag

        :return: The customer_note_notify of this QuoteDataCartInterface.
        :rtype: bool
        """
        return self._customer_note_notify

    @customer_note_notify.setter
    def customer_note_notify(self, customer_note_notify):
        """
        Sets the customer_note_notify of this QuoteDataCartInterface.
        Customer notification flag

        :param customer_note_notify: The customer_note_notify of this QuoteDataCartInterface.
        :type: bool
        """

        self._customer_note_notify = customer_note_notify

    @property
    def customer_tax_class_id(self):
        """
        Gets the customer_tax_class_id of this QuoteDataCartInterface.
        Customer tax class ID.

        :return: The customer_tax_class_id of this QuoteDataCartInterface.
        :rtype: int
        """
        return self._customer_tax_class_id

    @customer_tax_class_id.setter
    def customer_tax_class_id(self, customer_tax_class_id):
        """
        Sets the customer_tax_class_id of this QuoteDataCartInterface.
        Customer tax class ID.

        :param customer_tax_class_id: The customer_tax_class_id of this QuoteDataCartInterface.
        :type: int
        """

        self._customer_tax_class_id = customer_tax_class_id

    @property
    def store_id(self):
        """
        Gets the store_id of this QuoteDataCartInterface.
        Store identifier

        :return: The store_id of this QuoteDataCartInterface.
        :rtype: int
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """
        Sets the store_id of this QuoteDataCartInterface.
        Store identifier

        :param store_id: The store_id of this QuoteDataCartInterface.
        :type: int
        """
        if store_id is None:
            raise ValueError("Invalid value for `store_id`, must not be `None`")

        self._store_id = store_id

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this QuoteDataCartInterface.

        :return: The extension_attributes of this QuoteDataCartInterface.
        :rtype: QuoteDataCartExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this QuoteDataCartInterface.

        :param extension_attributes: The extension_attributes of this QuoteDataCartInterface.
        :type: QuoteDataCartExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, QuoteDataCartInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
