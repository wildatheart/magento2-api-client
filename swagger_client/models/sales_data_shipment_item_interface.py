# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SalesDataShipmentItemInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_data': 'str',
        'description': 'str',
        'entity_id': 'int',
        'name': 'str',
        'parent_id': 'int',
        'price': 'float',
        'product_id': 'int',
        'row_total': 'float',
        'sku': 'str',
        'weight': 'float',
        'extension_attributes': 'SalesDataShipmentItemExtensionInterface',
        'order_item_id': 'int',
        'qty': 'float'
    }

    attribute_map = {
        'additional_data': 'additional_data',
        'description': 'description',
        'entity_id': 'entity_id',
        'name': 'name',
        'parent_id': 'parent_id',
        'price': 'price',
        'product_id': 'product_id',
        'row_total': 'row_total',
        'sku': 'sku',
        'weight': 'weight',
        'extension_attributes': 'extension_attributes',
        'order_item_id': 'order_item_id',
        'qty': 'qty'
    }

    def __init__(self, additional_data=None, description=None, entity_id=None, name=None, parent_id=None, price=None, product_id=None, row_total=None, sku=None, weight=None, extension_attributes=None, order_item_id=None, qty=None):
        """
        SalesDataShipmentItemInterface - a model defined in Swagger
        """

        self._additional_data = None
        self._description = None
        self._entity_id = None
        self._name = None
        self._parent_id = None
        self._price = None
        self._product_id = None
        self._row_total = None
        self._sku = None
        self._weight = None
        self._extension_attributes = None
        self._order_item_id = None
        self._qty = None

        if additional_data is not None:
          self.additional_data = additional_data
        if description is not None:
          self.description = description
        if entity_id is not None:
          self.entity_id = entity_id
        if name is not None:
          self.name = name
        if parent_id is not None:
          self.parent_id = parent_id
        if price is not None:
          self.price = price
        if product_id is not None:
          self.product_id = product_id
        if row_total is not None:
          self.row_total = row_total
        if sku is not None:
          self.sku = sku
        if weight is not None:
          self.weight = weight
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes
        self.order_item_id = order_item_id
        self.qty = qty

    @property
    def additional_data(self):
        """
        Gets the additional_data of this SalesDataShipmentItemInterface.
        Additional data.

        :return: The additional_data of this SalesDataShipmentItemInterface.
        :rtype: str
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """
        Sets the additional_data of this SalesDataShipmentItemInterface.
        Additional data.

        :param additional_data: The additional_data of this SalesDataShipmentItemInterface.
        :type: str
        """

        self._additional_data = additional_data

    @property
    def description(self):
        """
        Gets the description of this SalesDataShipmentItemInterface.
        Description.

        :return: The description of this SalesDataShipmentItemInterface.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this SalesDataShipmentItemInterface.
        Description.

        :param description: The description of this SalesDataShipmentItemInterface.
        :type: str
        """

        self._description = description

    @property
    def entity_id(self):
        """
        Gets the entity_id of this SalesDataShipmentItemInterface.
        Shipment item ID.

        :return: The entity_id of this SalesDataShipmentItemInterface.
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this SalesDataShipmentItemInterface.
        Shipment item ID.

        :param entity_id: The entity_id of this SalesDataShipmentItemInterface.
        :type: int
        """

        self._entity_id = entity_id

    @property
    def name(self):
        """
        Gets the name of this SalesDataShipmentItemInterface.
        Name.

        :return: The name of this SalesDataShipmentItemInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SalesDataShipmentItemInterface.
        Name.

        :param name: The name of this SalesDataShipmentItemInterface.
        :type: str
        """

        self._name = name

    @property
    def parent_id(self):
        """
        Gets the parent_id of this SalesDataShipmentItemInterface.
        Parent ID.

        :return: The parent_id of this SalesDataShipmentItemInterface.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """
        Sets the parent_id of this SalesDataShipmentItemInterface.
        Parent ID.

        :param parent_id: The parent_id of this SalesDataShipmentItemInterface.
        :type: int
        """

        self._parent_id = parent_id

    @property
    def price(self):
        """
        Gets the price of this SalesDataShipmentItemInterface.
        Price.

        :return: The price of this SalesDataShipmentItemInterface.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this SalesDataShipmentItemInterface.
        Price.

        :param price: The price of this SalesDataShipmentItemInterface.
        :type: float
        """

        self._price = price

    @property
    def product_id(self):
        """
        Gets the product_id of this SalesDataShipmentItemInterface.
        Product ID.

        :return: The product_id of this SalesDataShipmentItemInterface.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """
        Sets the product_id of this SalesDataShipmentItemInterface.
        Product ID.

        :param product_id: The product_id of this SalesDataShipmentItemInterface.
        :type: int
        """

        self._product_id = product_id

    @property
    def row_total(self):
        """
        Gets the row_total of this SalesDataShipmentItemInterface.
        Row total.

        :return: The row_total of this SalesDataShipmentItemInterface.
        :rtype: float
        """
        return self._row_total

    @row_total.setter
    def row_total(self, row_total):
        """
        Sets the row_total of this SalesDataShipmentItemInterface.
        Row total.

        :param row_total: The row_total of this SalesDataShipmentItemInterface.
        :type: float
        """

        self._row_total = row_total

    @property
    def sku(self):
        """
        Gets the sku of this SalesDataShipmentItemInterface.
        SKU.

        :return: The sku of this SalesDataShipmentItemInterface.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this SalesDataShipmentItemInterface.
        SKU.

        :param sku: The sku of this SalesDataShipmentItemInterface.
        :type: str
        """

        self._sku = sku

    @property
    def weight(self):
        """
        Gets the weight of this SalesDataShipmentItemInterface.
        Weight.

        :return: The weight of this SalesDataShipmentItemInterface.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """
        Sets the weight of this SalesDataShipmentItemInterface.
        Weight.

        :param weight: The weight of this SalesDataShipmentItemInterface.
        :type: float
        """

        self._weight = weight

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this SalesDataShipmentItemInterface.

        :return: The extension_attributes of this SalesDataShipmentItemInterface.
        :rtype: SalesDataShipmentItemExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this SalesDataShipmentItemInterface.

        :param extension_attributes: The extension_attributes of this SalesDataShipmentItemInterface.
        :type: SalesDataShipmentItemExtensionInterface
        """

        self._extension_attributes = extension_attributes

    @property
    def order_item_id(self):
        """
        Gets the order_item_id of this SalesDataShipmentItemInterface.
        Order item ID.

        :return: The order_item_id of this SalesDataShipmentItemInterface.
        :rtype: int
        """
        return self._order_item_id

    @order_item_id.setter
    def order_item_id(self, order_item_id):
        """
        Sets the order_item_id of this SalesDataShipmentItemInterface.
        Order item ID.

        :param order_item_id: The order_item_id of this SalesDataShipmentItemInterface.
        :type: int
        """
        if order_item_id is None:
            raise ValueError("Invalid value for `order_item_id`, must not be `None`")

        self._order_item_id = order_item_id

    @property
    def qty(self):
        """
        Gets the qty of this SalesDataShipmentItemInterface.
        Quantity.

        :return: The qty of this SalesDataShipmentItemInterface.
        :rtype: float
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """
        Sets the qty of this SalesDataShipmentItemInterface.
        Quantity.

        :param qty: The qty of this SalesDataShipmentItemInterface.
        :type: float
        """
        if qty is None:
            raise ValueError("Invalid value for `qty`, must not be `None`")

        self._qty = qty

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SalesDataShipmentItemInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
