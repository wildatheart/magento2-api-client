# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SalesDataOrderStatusHistoryInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'str',
        'created_at': 'str',
        'entity_id': 'int',
        'entity_name': 'str',
        'is_customer_notified': 'int',
        'is_visible_on_front': 'int',
        'parent_id': 'int',
        'status': 'str',
        'extension_attributes': 'SalesDataOrderStatusHistoryExtensionInterface'
    }

    attribute_map = {
        'comment': 'comment',
        'created_at': 'created_at',
        'entity_id': 'entity_id',
        'entity_name': 'entity_name',
        'is_customer_notified': 'is_customer_notified',
        'is_visible_on_front': 'is_visible_on_front',
        'parent_id': 'parent_id',
        'status': 'status',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, comment=None, created_at=None, entity_id=None, entity_name=None, is_customer_notified=None, is_visible_on_front=None, parent_id=None, status=None, extension_attributes=None):
        """
        SalesDataOrderStatusHistoryInterface - a model defined in Swagger
        """

        self._comment = None
        self._created_at = None
        self._entity_id = None
        self._entity_name = None
        self._is_customer_notified = None
        self._is_visible_on_front = None
        self._parent_id = None
        self._status = None
        self._extension_attributes = None

        self.comment = comment
        if created_at is not None:
          self.created_at = created_at
        if entity_id is not None:
          self.entity_id = entity_id
        if entity_name is not None:
          self.entity_name = entity_name
        self.is_customer_notified = is_customer_notified
        self.is_visible_on_front = is_visible_on_front
        self.parent_id = parent_id
        if status is not None:
          self.status = status
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def comment(self):
        """
        Gets the comment of this SalesDataOrderStatusHistoryInterface.
        Comment.

        :return: The comment of this SalesDataOrderStatusHistoryInterface.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """
        Sets the comment of this SalesDataOrderStatusHistoryInterface.
        Comment.

        :param comment: The comment of this SalesDataOrderStatusHistoryInterface.
        :type: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")

        self._comment = comment

    @property
    def created_at(self):
        """
        Gets the created_at of this SalesDataOrderStatusHistoryInterface.
        Created-at timestamp.

        :return: The created_at of this SalesDataOrderStatusHistoryInterface.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this SalesDataOrderStatusHistoryInterface.
        Created-at timestamp.

        :param created_at: The created_at of this SalesDataOrderStatusHistoryInterface.
        :type: str
        """

        self._created_at = created_at

    @property
    def entity_id(self):
        """
        Gets the entity_id of this SalesDataOrderStatusHistoryInterface.
        Order status history ID.

        :return: The entity_id of this SalesDataOrderStatusHistoryInterface.
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this SalesDataOrderStatusHistoryInterface.
        Order status history ID.

        :param entity_id: The entity_id of this SalesDataOrderStatusHistoryInterface.
        :type: int
        """

        self._entity_id = entity_id

    @property
    def entity_name(self):
        """
        Gets the entity_name of this SalesDataOrderStatusHistoryInterface.
        Entity name.

        :return: The entity_name of this SalesDataOrderStatusHistoryInterface.
        :rtype: str
        """
        return self._entity_name

    @entity_name.setter
    def entity_name(self, entity_name):
        """
        Sets the entity_name of this SalesDataOrderStatusHistoryInterface.
        Entity name.

        :param entity_name: The entity_name of this SalesDataOrderStatusHistoryInterface.
        :type: str
        """

        self._entity_name = entity_name

    @property
    def is_customer_notified(self):
        """
        Gets the is_customer_notified of this SalesDataOrderStatusHistoryInterface.
        Is-customer-notified flag value.

        :return: The is_customer_notified of this SalesDataOrderStatusHistoryInterface.
        :rtype: int
        """
        return self._is_customer_notified

    @is_customer_notified.setter
    def is_customer_notified(self, is_customer_notified):
        """
        Sets the is_customer_notified of this SalesDataOrderStatusHistoryInterface.
        Is-customer-notified flag value.

        :param is_customer_notified: The is_customer_notified of this SalesDataOrderStatusHistoryInterface.
        :type: int
        """
        if is_customer_notified is None:
            raise ValueError("Invalid value for `is_customer_notified`, must not be `None`")

        self._is_customer_notified = is_customer_notified

    @property
    def is_visible_on_front(self):
        """
        Gets the is_visible_on_front of this SalesDataOrderStatusHistoryInterface.
        Is-visible-on-storefront flag value.

        :return: The is_visible_on_front of this SalesDataOrderStatusHistoryInterface.
        :rtype: int
        """
        return self._is_visible_on_front

    @is_visible_on_front.setter
    def is_visible_on_front(self, is_visible_on_front):
        """
        Sets the is_visible_on_front of this SalesDataOrderStatusHistoryInterface.
        Is-visible-on-storefront flag value.

        :param is_visible_on_front: The is_visible_on_front of this SalesDataOrderStatusHistoryInterface.
        :type: int
        """
        if is_visible_on_front is None:
            raise ValueError("Invalid value for `is_visible_on_front`, must not be `None`")

        self._is_visible_on_front = is_visible_on_front

    @property
    def parent_id(self):
        """
        Gets the parent_id of this SalesDataOrderStatusHistoryInterface.
        Parent ID.

        :return: The parent_id of this SalesDataOrderStatusHistoryInterface.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """
        Sets the parent_id of this SalesDataOrderStatusHistoryInterface.
        Parent ID.

        :param parent_id: The parent_id of this SalesDataOrderStatusHistoryInterface.
        :type: int
        """
        if parent_id is None:
            raise ValueError("Invalid value for `parent_id`, must not be `None`")

        self._parent_id = parent_id

    @property
    def status(self):
        """
        Gets the status of this SalesDataOrderStatusHistoryInterface.
        Status.

        :return: The status of this SalesDataOrderStatusHistoryInterface.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this SalesDataOrderStatusHistoryInterface.
        Status.

        :param status: The status of this SalesDataOrderStatusHistoryInterface.
        :type: str
        """

        self._status = status

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this SalesDataOrderStatusHistoryInterface.

        :return: The extension_attributes of this SalesDataOrderStatusHistoryInterface.
        :rtype: SalesDataOrderStatusHistoryExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this SalesDataOrderStatusHistoryInterface.

        :param extension_attributes: The extension_attributes of this SalesDataOrderStatusHistoryInterface.
        :type: SalesDataOrderStatusHistoryExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SalesDataOrderStatusHistoryInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
