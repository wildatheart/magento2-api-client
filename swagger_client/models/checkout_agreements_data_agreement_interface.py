# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CheckoutAgreementsDataAgreementInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agreement_id': 'int',
        'name': 'str',
        'content': 'str',
        'content_height': 'str',
        'checkbox_text': 'str',
        'is_active': 'bool',
        'is_html': 'bool',
        'mode': 'int',
        'extension_attributes': 'CheckoutAgreementsDataAgreementExtensionInterface'
    }

    attribute_map = {
        'agreement_id': 'agreement_id',
        'name': 'name',
        'content': 'content',
        'content_height': 'content_height',
        'checkbox_text': 'checkbox_text',
        'is_active': 'is_active',
        'is_html': 'is_html',
        'mode': 'mode',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, agreement_id=None, name=None, content=None, content_height=None, checkbox_text=None, is_active=None, is_html=None, mode=None, extension_attributes=None):
        """
        CheckoutAgreementsDataAgreementInterface - a model defined in Swagger
        """

        self._agreement_id = None
        self._name = None
        self._content = None
        self._content_height = None
        self._checkbox_text = None
        self._is_active = None
        self._is_html = None
        self._mode = None
        self._extension_attributes = None

        self.agreement_id = agreement_id
        self.name = name
        self.content = content
        if content_height is not None:
          self.content_height = content_height
        self.checkbox_text = checkbox_text
        self.is_active = is_active
        self.is_html = is_html
        self.mode = mode
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def agreement_id(self):
        """
        Gets the agreement_id of this CheckoutAgreementsDataAgreementInterface.
        Agreement ID.

        :return: The agreement_id of this CheckoutAgreementsDataAgreementInterface.
        :rtype: int
        """
        return self._agreement_id

    @agreement_id.setter
    def agreement_id(self, agreement_id):
        """
        Sets the agreement_id of this CheckoutAgreementsDataAgreementInterface.
        Agreement ID.

        :param agreement_id: The agreement_id of this CheckoutAgreementsDataAgreementInterface.
        :type: int
        """
        if agreement_id is None:
            raise ValueError("Invalid value for `agreement_id`, must not be `None`")

        self._agreement_id = agreement_id

    @property
    def name(self):
        """
        Gets the name of this CheckoutAgreementsDataAgreementInterface.
        Agreement name.

        :return: The name of this CheckoutAgreementsDataAgreementInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CheckoutAgreementsDataAgreementInterface.
        Agreement name.

        :param name: The name of this CheckoutAgreementsDataAgreementInterface.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def content(self):
        """
        Gets the content of this CheckoutAgreementsDataAgreementInterface.
        Agreement content.

        :return: The content of this CheckoutAgreementsDataAgreementInterface.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this CheckoutAgreementsDataAgreementInterface.
        Agreement content.

        :param content: The content of this CheckoutAgreementsDataAgreementInterface.
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def content_height(self):
        """
        Gets the content_height of this CheckoutAgreementsDataAgreementInterface.
        Agreement content height. Otherwise, null.

        :return: The content_height of this CheckoutAgreementsDataAgreementInterface.
        :rtype: str
        """
        return self._content_height

    @content_height.setter
    def content_height(self, content_height):
        """
        Sets the content_height of this CheckoutAgreementsDataAgreementInterface.
        Agreement content height. Otherwise, null.

        :param content_height: The content_height of this CheckoutAgreementsDataAgreementInterface.
        :type: str
        """

        self._content_height = content_height

    @property
    def checkbox_text(self):
        """
        Gets the checkbox_text of this CheckoutAgreementsDataAgreementInterface.
        Agreement checkbox text.

        :return: The checkbox_text of this CheckoutAgreementsDataAgreementInterface.
        :rtype: str
        """
        return self._checkbox_text

    @checkbox_text.setter
    def checkbox_text(self, checkbox_text):
        """
        Sets the checkbox_text of this CheckoutAgreementsDataAgreementInterface.
        Agreement checkbox text.

        :param checkbox_text: The checkbox_text of this CheckoutAgreementsDataAgreementInterface.
        :type: str
        """
        if checkbox_text is None:
            raise ValueError("Invalid value for `checkbox_text`, must not be `None`")

        self._checkbox_text = checkbox_text

    @property
    def is_active(self):
        """
        Gets the is_active of this CheckoutAgreementsDataAgreementInterface.
        Agreement status.

        :return: The is_active of this CheckoutAgreementsDataAgreementInterface.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """
        Sets the is_active of this CheckoutAgreementsDataAgreementInterface.
        Agreement status.

        :param is_active: The is_active of this CheckoutAgreementsDataAgreementInterface.
        :type: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def is_html(self):
        """
        Gets the is_html of this CheckoutAgreementsDataAgreementInterface.
        * true - HTML. * false - plain text.

        :return: The is_html of this CheckoutAgreementsDataAgreementInterface.
        :rtype: bool
        """
        return self._is_html

    @is_html.setter
    def is_html(self, is_html):
        """
        Sets the is_html of this CheckoutAgreementsDataAgreementInterface.
        * true - HTML. * false - plain text.

        :param is_html: The is_html of this CheckoutAgreementsDataAgreementInterface.
        :type: bool
        """
        if is_html is None:
            raise ValueError("Invalid value for `is_html`, must not be `None`")

        self._is_html = is_html

    @property
    def mode(self):
        """
        Gets the mode of this CheckoutAgreementsDataAgreementInterface.
        The agreement applied mode.

        :return: The mode of this CheckoutAgreementsDataAgreementInterface.
        :rtype: int
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """
        Sets the mode of this CheckoutAgreementsDataAgreementInterface.
        The agreement applied mode.

        :param mode: The mode of this CheckoutAgreementsDataAgreementInterface.
        :type: int
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")

        self._mode = mode

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this CheckoutAgreementsDataAgreementInterface.

        :return: The extension_attributes of this CheckoutAgreementsDataAgreementInterface.
        :rtype: CheckoutAgreementsDataAgreementExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this CheckoutAgreementsDataAgreementInterface.

        :param extension_attributes: The extension_attributes of this CheckoutAgreementsDataAgreementInterface.
        :type: CheckoutAgreementsDataAgreementExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CheckoutAgreementsDataAgreementInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
