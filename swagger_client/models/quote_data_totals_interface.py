# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class QuoteDataTotalsInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'grand_total': 'float',
        'base_grand_total': 'float',
        'subtotal': 'float',
        'base_subtotal': 'float',
        'discount_amount': 'float',
        'base_discount_amount': 'float',
        'subtotal_with_discount': 'float',
        'base_subtotal_with_discount': 'float',
        'shipping_amount': 'float',
        'base_shipping_amount': 'float',
        'shipping_discount_amount': 'float',
        'base_shipping_discount_amount': 'float',
        'tax_amount': 'float',
        'base_tax_amount': 'float',
        'weee_tax_applied_amount': 'float',
        'shipping_tax_amount': 'float',
        'base_shipping_tax_amount': 'float',
        'subtotal_incl_tax': 'float',
        'base_subtotal_incl_tax': 'float',
        'shipping_incl_tax': 'float',
        'base_shipping_incl_tax': 'float',
        'base_currency_code': 'str',
        'quote_currency_code': 'str',
        'coupon_code': 'str',
        'items_qty': 'int',
        'items': 'list[QuoteDataTotalsItemInterface]',
        'total_segments': 'list[QuoteDataTotalSegmentInterface]',
        'extension_attributes': 'QuoteDataTotalsExtensionInterface'
    }

    attribute_map = {
        'grand_total': 'grand_total',
        'base_grand_total': 'base_grand_total',
        'subtotal': 'subtotal',
        'base_subtotal': 'base_subtotal',
        'discount_amount': 'discount_amount',
        'base_discount_amount': 'base_discount_amount',
        'subtotal_with_discount': 'subtotal_with_discount',
        'base_subtotal_with_discount': 'base_subtotal_with_discount',
        'shipping_amount': 'shipping_amount',
        'base_shipping_amount': 'base_shipping_amount',
        'shipping_discount_amount': 'shipping_discount_amount',
        'base_shipping_discount_amount': 'base_shipping_discount_amount',
        'tax_amount': 'tax_amount',
        'base_tax_amount': 'base_tax_amount',
        'weee_tax_applied_amount': 'weee_tax_applied_amount',
        'shipping_tax_amount': 'shipping_tax_amount',
        'base_shipping_tax_amount': 'base_shipping_tax_amount',
        'subtotal_incl_tax': 'subtotal_incl_tax',
        'base_subtotal_incl_tax': 'base_subtotal_incl_tax',
        'shipping_incl_tax': 'shipping_incl_tax',
        'base_shipping_incl_tax': 'base_shipping_incl_tax',
        'base_currency_code': 'base_currency_code',
        'quote_currency_code': 'quote_currency_code',
        'coupon_code': 'coupon_code',
        'items_qty': 'items_qty',
        'items': 'items',
        'total_segments': 'total_segments',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, grand_total=None, base_grand_total=None, subtotal=None, base_subtotal=None, discount_amount=None, base_discount_amount=None, subtotal_with_discount=None, base_subtotal_with_discount=None, shipping_amount=None, base_shipping_amount=None, shipping_discount_amount=None, base_shipping_discount_amount=None, tax_amount=None, base_tax_amount=None, weee_tax_applied_amount=None, shipping_tax_amount=None, base_shipping_tax_amount=None, subtotal_incl_tax=None, base_subtotal_incl_tax=None, shipping_incl_tax=None, base_shipping_incl_tax=None, base_currency_code=None, quote_currency_code=None, coupon_code=None, items_qty=None, items=None, total_segments=None, extension_attributes=None):
        """
        QuoteDataTotalsInterface - a model defined in Swagger
        """

        self._grand_total = None
        self._base_grand_total = None
        self._subtotal = None
        self._base_subtotal = None
        self._discount_amount = None
        self._base_discount_amount = None
        self._subtotal_with_discount = None
        self._base_subtotal_with_discount = None
        self._shipping_amount = None
        self._base_shipping_amount = None
        self._shipping_discount_amount = None
        self._base_shipping_discount_amount = None
        self._tax_amount = None
        self._base_tax_amount = None
        self._weee_tax_applied_amount = None
        self._shipping_tax_amount = None
        self._base_shipping_tax_amount = None
        self._subtotal_incl_tax = None
        self._base_subtotal_incl_tax = None
        self._shipping_incl_tax = None
        self._base_shipping_incl_tax = None
        self._base_currency_code = None
        self._quote_currency_code = None
        self._coupon_code = None
        self._items_qty = None
        self._items = None
        self._total_segments = None
        self._extension_attributes = None

        if grand_total is not None:
          self.grand_total = grand_total
        if base_grand_total is not None:
          self.base_grand_total = base_grand_total
        if subtotal is not None:
          self.subtotal = subtotal
        if base_subtotal is not None:
          self.base_subtotal = base_subtotal
        if discount_amount is not None:
          self.discount_amount = discount_amount
        if base_discount_amount is not None:
          self.base_discount_amount = base_discount_amount
        if subtotal_with_discount is not None:
          self.subtotal_with_discount = subtotal_with_discount
        if base_subtotal_with_discount is not None:
          self.base_subtotal_with_discount = base_subtotal_with_discount
        if shipping_amount is not None:
          self.shipping_amount = shipping_amount
        if base_shipping_amount is not None:
          self.base_shipping_amount = base_shipping_amount
        if shipping_discount_amount is not None:
          self.shipping_discount_amount = shipping_discount_amount
        if base_shipping_discount_amount is not None:
          self.base_shipping_discount_amount = base_shipping_discount_amount
        if tax_amount is not None:
          self.tax_amount = tax_amount
        if base_tax_amount is not None:
          self.base_tax_amount = base_tax_amount
        self.weee_tax_applied_amount = weee_tax_applied_amount
        if shipping_tax_amount is not None:
          self.shipping_tax_amount = shipping_tax_amount
        if base_shipping_tax_amount is not None:
          self.base_shipping_tax_amount = base_shipping_tax_amount
        if subtotal_incl_tax is not None:
          self.subtotal_incl_tax = subtotal_incl_tax
        if base_subtotal_incl_tax is not None:
          self.base_subtotal_incl_tax = base_subtotal_incl_tax
        if shipping_incl_tax is not None:
          self.shipping_incl_tax = shipping_incl_tax
        if base_shipping_incl_tax is not None:
          self.base_shipping_incl_tax = base_shipping_incl_tax
        if base_currency_code is not None:
          self.base_currency_code = base_currency_code
        if quote_currency_code is not None:
          self.quote_currency_code = quote_currency_code
        if coupon_code is not None:
          self.coupon_code = coupon_code
        if items_qty is not None:
          self.items_qty = items_qty
        if items is not None:
          self.items = items
        self.total_segments = total_segments
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def grand_total(self):
        """
        Gets the grand_total of this QuoteDataTotalsInterface.
        Grand total in quote currency

        :return: The grand_total of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._grand_total

    @grand_total.setter
    def grand_total(self, grand_total):
        """
        Sets the grand_total of this QuoteDataTotalsInterface.
        Grand total in quote currency

        :param grand_total: The grand_total of this QuoteDataTotalsInterface.
        :type: float
        """

        self._grand_total = grand_total

    @property
    def base_grand_total(self):
        """
        Gets the base_grand_total of this QuoteDataTotalsInterface.
        Grand total in base currency

        :return: The base_grand_total of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._base_grand_total

    @base_grand_total.setter
    def base_grand_total(self, base_grand_total):
        """
        Sets the base_grand_total of this QuoteDataTotalsInterface.
        Grand total in base currency

        :param base_grand_total: The base_grand_total of this QuoteDataTotalsInterface.
        :type: float
        """

        self._base_grand_total = base_grand_total

    @property
    def subtotal(self):
        """
        Gets the subtotal of this QuoteDataTotalsInterface.
        Subtotal in quote currency

        :return: The subtotal of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """
        Sets the subtotal of this QuoteDataTotalsInterface.
        Subtotal in quote currency

        :param subtotal: The subtotal of this QuoteDataTotalsInterface.
        :type: float
        """

        self._subtotal = subtotal

    @property
    def base_subtotal(self):
        """
        Gets the base_subtotal of this QuoteDataTotalsInterface.
        Subtotal in base currency

        :return: The base_subtotal of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._base_subtotal

    @base_subtotal.setter
    def base_subtotal(self, base_subtotal):
        """
        Sets the base_subtotal of this QuoteDataTotalsInterface.
        Subtotal in base currency

        :param base_subtotal: The base_subtotal of this QuoteDataTotalsInterface.
        :type: float
        """

        self._base_subtotal = base_subtotal

    @property
    def discount_amount(self):
        """
        Gets the discount_amount of this QuoteDataTotalsInterface.
        Discount amount in quote currency

        :return: The discount_amount of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """
        Sets the discount_amount of this QuoteDataTotalsInterface.
        Discount amount in quote currency

        :param discount_amount: The discount_amount of this QuoteDataTotalsInterface.
        :type: float
        """

        self._discount_amount = discount_amount

    @property
    def base_discount_amount(self):
        """
        Gets the base_discount_amount of this QuoteDataTotalsInterface.
        Discount amount in base currency

        :return: The base_discount_amount of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._base_discount_amount

    @base_discount_amount.setter
    def base_discount_amount(self, base_discount_amount):
        """
        Sets the base_discount_amount of this QuoteDataTotalsInterface.
        Discount amount in base currency

        :param base_discount_amount: The base_discount_amount of this QuoteDataTotalsInterface.
        :type: float
        """

        self._base_discount_amount = base_discount_amount

    @property
    def subtotal_with_discount(self):
        """
        Gets the subtotal_with_discount of this QuoteDataTotalsInterface.
        Subtotal in quote currency with applied discount

        :return: The subtotal_with_discount of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._subtotal_with_discount

    @subtotal_with_discount.setter
    def subtotal_with_discount(self, subtotal_with_discount):
        """
        Sets the subtotal_with_discount of this QuoteDataTotalsInterface.
        Subtotal in quote currency with applied discount

        :param subtotal_with_discount: The subtotal_with_discount of this QuoteDataTotalsInterface.
        :type: float
        """

        self._subtotal_with_discount = subtotal_with_discount

    @property
    def base_subtotal_with_discount(self):
        """
        Gets the base_subtotal_with_discount of this QuoteDataTotalsInterface.
        Subtotal in base currency with applied discount

        :return: The base_subtotal_with_discount of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._base_subtotal_with_discount

    @base_subtotal_with_discount.setter
    def base_subtotal_with_discount(self, base_subtotal_with_discount):
        """
        Sets the base_subtotal_with_discount of this QuoteDataTotalsInterface.
        Subtotal in base currency with applied discount

        :param base_subtotal_with_discount: The base_subtotal_with_discount of this QuoteDataTotalsInterface.
        :type: float
        """

        self._base_subtotal_with_discount = base_subtotal_with_discount

    @property
    def shipping_amount(self):
        """
        Gets the shipping_amount of this QuoteDataTotalsInterface.
        Shipping amount in quote currency

        :return: The shipping_amount of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._shipping_amount

    @shipping_amount.setter
    def shipping_amount(self, shipping_amount):
        """
        Sets the shipping_amount of this QuoteDataTotalsInterface.
        Shipping amount in quote currency

        :param shipping_amount: The shipping_amount of this QuoteDataTotalsInterface.
        :type: float
        """

        self._shipping_amount = shipping_amount

    @property
    def base_shipping_amount(self):
        """
        Gets the base_shipping_amount of this QuoteDataTotalsInterface.
        Shipping amount in base currency

        :return: The base_shipping_amount of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._base_shipping_amount

    @base_shipping_amount.setter
    def base_shipping_amount(self, base_shipping_amount):
        """
        Sets the base_shipping_amount of this QuoteDataTotalsInterface.
        Shipping amount in base currency

        :param base_shipping_amount: The base_shipping_amount of this QuoteDataTotalsInterface.
        :type: float
        """

        self._base_shipping_amount = base_shipping_amount

    @property
    def shipping_discount_amount(self):
        """
        Gets the shipping_discount_amount of this QuoteDataTotalsInterface.
        Shipping discount amount in quote currency

        :return: The shipping_discount_amount of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._shipping_discount_amount

    @shipping_discount_amount.setter
    def shipping_discount_amount(self, shipping_discount_amount):
        """
        Sets the shipping_discount_amount of this QuoteDataTotalsInterface.
        Shipping discount amount in quote currency

        :param shipping_discount_amount: The shipping_discount_amount of this QuoteDataTotalsInterface.
        :type: float
        """

        self._shipping_discount_amount = shipping_discount_amount

    @property
    def base_shipping_discount_amount(self):
        """
        Gets the base_shipping_discount_amount of this QuoteDataTotalsInterface.
        Shipping discount amount in base currency

        :return: The base_shipping_discount_amount of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._base_shipping_discount_amount

    @base_shipping_discount_amount.setter
    def base_shipping_discount_amount(self, base_shipping_discount_amount):
        """
        Sets the base_shipping_discount_amount of this QuoteDataTotalsInterface.
        Shipping discount amount in base currency

        :param base_shipping_discount_amount: The base_shipping_discount_amount of this QuoteDataTotalsInterface.
        :type: float
        """

        self._base_shipping_discount_amount = base_shipping_discount_amount

    @property
    def tax_amount(self):
        """
        Gets the tax_amount of this QuoteDataTotalsInterface.
        Tax amount in quote currency

        :return: The tax_amount of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """
        Sets the tax_amount of this QuoteDataTotalsInterface.
        Tax amount in quote currency

        :param tax_amount: The tax_amount of this QuoteDataTotalsInterface.
        :type: float
        """

        self._tax_amount = tax_amount

    @property
    def base_tax_amount(self):
        """
        Gets the base_tax_amount of this QuoteDataTotalsInterface.
        Tax amount in base currency

        :return: The base_tax_amount of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._base_tax_amount

    @base_tax_amount.setter
    def base_tax_amount(self, base_tax_amount):
        """
        Sets the base_tax_amount of this QuoteDataTotalsInterface.
        Tax amount in base currency

        :param base_tax_amount: The base_tax_amount of this QuoteDataTotalsInterface.
        :type: float
        """

        self._base_tax_amount = base_tax_amount

    @property
    def weee_tax_applied_amount(self):
        """
        Gets the weee_tax_applied_amount of this QuoteDataTotalsInterface.
        Item weee tax applied amount in quote currency.

        :return: The weee_tax_applied_amount of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._weee_tax_applied_amount

    @weee_tax_applied_amount.setter
    def weee_tax_applied_amount(self, weee_tax_applied_amount):
        """
        Sets the weee_tax_applied_amount of this QuoteDataTotalsInterface.
        Item weee tax applied amount in quote currency.

        :param weee_tax_applied_amount: The weee_tax_applied_amount of this QuoteDataTotalsInterface.
        :type: float
        """
        if weee_tax_applied_amount is None:
            raise ValueError("Invalid value for `weee_tax_applied_amount`, must not be `None`")

        self._weee_tax_applied_amount = weee_tax_applied_amount

    @property
    def shipping_tax_amount(self):
        """
        Gets the shipping_tax_amount of this QuoteDataTotalsInterface.
        Shipping tax amount in quote currency

        :return: The shipping_tax_amount of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._shipping_tax_amount

    @shipping_tax_amount.setter
    def shipping_tax_amount(self, shipping_tax_amount):
        """
        Sets the shipping_tax_amount of this QuoteDataTotalsInterface.
        Shipping tax amount in quote currency

        :param shipping_tax_amount: The shipping_tax_amount of this QuoteDataTotalsInterface.
        :type: float
        """

        self._shipping_tax_amount = shipping_tax_amount

    @property
    def base_shipping_tax_amount(self):
        """
        Gets the base_shipping_tax_amount of this QuoteDataTotalsInterface.
        Shipping tax amount in base currency

        :return: The base_shipping_tax_amount of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._base_shipping_tax_amount

    @base_shipping_tax_amount.setter
    def base_shipping_tax_amount(self, base_shipping_tax_amount):
        """
        Sets the base_shipping_tax_amount of this QuoteDataTotalsInterface.
        Shipping tax amount in base currency

        :param base_shipping_tax_amount: The base_shipping_tax_amount of this QuoteDataTotalsInterface.
        :type: float
        """

        self._base_shipping_tax_amount = base_shipping_tax_amount

    @property
    def subtotal_incl_tax(self):
        """
        Gets the subtotal_incl_tax of this QuoteDataTotalsInterface.
        Subtotal including tax in quote currency

        :return: The subtotal_incl_tax of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._subtotal_incl_tax

    @subtotal_incl_tax.setter
    def subtotal_incl_tax(self, subtotal_incl_tax):
        """
        Sets the subtotal_incl_tax of this QuoteDataTotalsInterface.
        Subtotal including tax in quote currency

        :param subtotal_incl_tax: The subtotal_incl_tax of this QuoteDataTotalsInterface.
        :type: float
        """

        self._subtotal_incl_tax = subtotal_incl_tax

    @property
    def base_subtotal_incl_tax(self):
        """
        Gets the base_subtotal_incl_tax of this QuoteDataTotalsInterface.
        Subtotal including tax in base currency

        :return: The base_subtotal_incl_tax of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._base_subtotal_incl_tax

    @base_subtotal_incl_tax.setter
    def base_subtotal_incl_tax(self, base_subtotal_incl_tax):
        """
        Sets the base_subtotal_incl_tax of this QuoteDataTotalsInterface.
        Subtotal including tax in base currency

        :param base_subtotal_incl_tax: The base_subtotal_incl_tax of this QuoteDataTotalsInterface.
        :type: float
        """

        self._base_subtotal_incl_tax = base_subtotal_incl_tax

    @property
    def shipping_incl_tax(self):
        """
        Gets the shipping_incl_tax of this QuoteDataTotalsInterface.
        Shipping including tax in quote currency

        :return: The shipping_incl_tax of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._shipping_incl_tax

    @shipping_incl_tax.setter
    def shipping_incl_tax(self, shipping_incl_tax):
        """
        Sets the shipping_incl_tax of this QuoteDataTotalsInterface.
        Shipping including tax in quote currency

        :param shipping_incl_tax: The shipping_incl_tax of this QuoteDataTotalsInterface.
        :type: float
        """

        self._shipping_incl_tax = shipping_incl_tax

    @property
    def base_shipping_incl_tax(self):
        """
        Gets the base_shipping_incl_tax of this QuoteDataTotalsInterface.
        Shipping including tax in base currency

        :return: The base_shipping_incl_tax of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._base_shipping_incl_tax

    @base_shipping_incl_tax.setter
    def base_shipping_incl_tax(self, base_shipping_incl_tax):
        """
        Sets the base_shipping_incl_tax of this QuoteDataTotalsInterface.
        Shipping including tax in base currency

        :param base_shipping_incl_tax: The base_shipping_incl_tax of this QuoteDataTotalsInterface.
        :type: float
        """

        self._base_shipping_incl_tax = base_shipping_incl_tax

    @property
    def base_currency_code(self):
        """
        Gets the base_currency_code of this QuoteDataTotalsInterface.
        Base currency code

        :return: The base_currency_code of this QuoteDataTotalsInterface.
        :rtype: str
        """
        return self._base_currency_code

    @base_currency_code.setter
    def base_currency_code(self, base_currency_code):
        """
        Sets the base_currency_code of this QuoteDataTotalsInterface.
        Base currency code

        :param base_currency_code: The base_currency_code of this QuoteDataTotalsInterface.
        :type: str
        """

        self._base_currency_code = base_currency_code

    @property
    def quote_currency_code(self):
        """
        Gets the quote_currency_code of this QuoteDataTotalsInterface.
        Quote currency code

        :return: The quote_currency_code of this QuoteDataTotalsInterface.
        :rtype: str
        """
        return self._quote_currency_code

    @quote_currency_code.setter
    def quote_currency_code(self, quote_currency_code):
        """
        Sets the quote_currency_code of this QuoteDataTotalsInterface.
        Quote currency code

        :param quote_currency_code: The quote_currency_code of this QuoteDataTotalsInterface.
        :type: str
        """

        self._quote_currency_code = quote_currency_code

    @property
    def coupon_code(self):
        """
        Gets the coupon_code of this QuoteDataTotalsInterface.
        Applied coupon code

        :return: The coupon_code of this QuoteDataTotalsInterface.
        :rtype: str
        """
        return self._coupon_code

    @coupon_code.setter
    def coupon_code(self, coupon_code):
        """
        Sets the coupon_code of this QuoteDataTotalsInterface.
        Applied coupon code

        :param coupon_code: The coupon_code of this QuoteDataTotalsInterface.
        :type: str
        """

        self._coupon_code = coupon_code

    @property
    def items_qty(self):
        """
        Gets the items_qty of this QuoteDataTotalsInterface.
        Items qty

        :return: The items_qty of this QuoteDataTotalsInterface.
        :rtype: int
        """
        return self._items_qty

    @items_qty.setter
    def items_qty(self, items_qty):
        """
        Sets the items_qty of this QuoteDataTotalsInterface.
        Items qty

        :param items_qty: The items_qty of this QuoteDataTotalsInterface.
        :type: int
        """

        self._items_qty = items_qty

    @property
    def items(self):
        """
        Gets the items of this QuoteDataTotalsInterface.
        Totals by items

        :return: The items of this QuoteDataTotalsInterface.
        :rtype: list[QuoteDataTotalsItemInterface]
        """
        return self._items

    @items.setter
    def items(self, items):
        """
        Sets the items of this QuoteDataTotalsInterface.
        Totals by items

        :param items: The items of this QuoteDataTotalsInterface.
        :type: list[QuoteDataTotalsItemInterface]
        """

        self._items = items

    @property
    def total_segments(self):
        """
        Gets the total_segments of this QuoteDataTotalsInterface.
        Dynamically calculated totals

        :return: The total_segments of this QuoteDataTotalsInterface.
        :rtype: list[QuoteDataTotalSegmentInterface]
        """
        return self._total_segments

    @total_segments.setter
    def total_segments(self, total_segments):
        """
        Sets the total_segments of this QuoteDataTotalsInterface.
        Dynamically calculated totals

        :param total_segments: The total_segments of this QuoteDataTotalsInterface.
        :type: list[QuoteDataTotalSegmentInterface]
        """
        if total_segments is None:
            raise ValueError("Invalid value for `total_segments`, must not be `None`")

        self._total_segments = total_segments

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this QuoteDataTotalsInterface.

        :return: The extension_attributes of this QuoteDataTotalsInterface.
        :rtype: QuoteDataTotalsExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this QuoteDataTotalsInterface.

        :param extension_attributes: The extension_attributes of this QuoteDataTotalsInterface.
        :type: QuoteDataTotalsExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, QuoteDataTotalsInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
