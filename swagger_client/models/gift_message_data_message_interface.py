# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GiftMessageDataMessageInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gift_message_id': 'int',
        'customer_id': 'int',
        'sender': 'str',
        'recipient': 'str',
        'message': 'str',
        'extension_attributes': 'GiftMessageDataMessageExtensionInterface'
    }

    attribute_map = {
        'gift_message_id': 'gift_message_id',
        'customer_id': 'customer_id',
        'sender': 'sender',
        'recipient': 'recipient',
        'message': 'message',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, gift_message_id=None, customer_id=None, sender=None, recipient=None, message=None, extension_attributes=None):
        """
        GiftMessageDataMessageInterface - a model defined in Swagger
        """

        self._gift_message_id = None
        self._customer_id = None
        self._sender = None
        self._recipient = None
        self._message = None
        self._extension_attributes = None

        if gift_message_id is not None:
          self.gift_message_id = gift_message_id
        if customer_id is not None:
          self.customer_id = customer_id
        self.sender = sender
        self.recipient = recipient
        self.message = message
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def gift_message_id(self):
        """
        Gets the gift_message_id of this GiftMessageDataMessageInterface.
        Gift message ID. Otherwise, null.

        :return: The gift_message_id of this GiftMessageDataMessageInterface.
        :rtype: int
        """
        return self._gift_message_id

    @gift_message_id.setter
    def gift_message_id(self, gift_message_id):
        """
        Sets the gift_message_id of this GiftMessageDataMessageInterface.
        Gift message ID. Otherwise, null.

        :param gift_message_id: The gift_message_id of this GiftMessageDataMessageInterface.
        :type: int
        """

        self._gift_message_id = gift_message_id

    @property
    def customer_id(self):
        """
        Gets the customer_id of this GiftMessageDataMessageInterface.
        Customer ID. Otherwise, null.

        :return: The customer_id of this GiftMessageDataMessageInterface.
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """
        Sets the customer_id of this GiftMessageDataMessageInterface.
        Customer ID. Otherwise, null.

        :param customer_id: The customer_id of this GiftMessageDataMessageInterface.
        :type: int
        """

        self._customer_id = customer_id

    @property
    def sender(self):
        """
        Gets the sender of this GiftMessageDataMessageInterface.
        Sender name.

        :return: The sender of this GiftMessageDataMessageInterface.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """
        Sets the sender of this GiftMessageDataMessageInterface.
        Sender name.

        :param sender: The sender of this GiftMessageDataMessageInterface.
        :type: str
        """
        if sender is None:
            raise ValueError("Invalid value for `sender`, must not be `None`")

        self._sender = sender

    @property
    def recipient(self):
        """
        Gets the recipient of this GiftMessageDataMessageInterface.
        Recipient name.

        :return: The recipient of this GiftMessageDataMessageInterface.
        :rtype: str
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """
        Sets the recipient of this GiftMessageDataMessageInterface.
        Recipient name.

        :param recipient: The recipient of this GiftMessageDataMessageInterface.
        :type: str
        """
        if recipient is None:
            raise ValueError("Invalid value for `recipient`, must not be `None`")

        self._recipient = recipient

    @property
    def message(self):
        """
        Gets the message of this GiftMessageDataMessageInterface.
        Message text.

        :return: The message of this GiftMessageDataMessageInterface.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this GiftMessageDataMessageInterface.
        Message text.

        :param message: The message of this GiftMessageDataMessageInterface.
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this GiftMessageDataMessageInterface.

        :return: The extension_attributes of this GiftMessageDataMessageInterface.
        :rtype: GiftMessageDataMessageExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this GiftMessageDataMessageInterface.

        :param extension_attributes: The extension_attributes of this GiftMessageDataMessageInterface.
        :type: GiftMessageDataMessageExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GiftMessageDataMessageInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
