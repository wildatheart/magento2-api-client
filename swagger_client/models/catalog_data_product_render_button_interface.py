# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CatalogDataProductRenderButtonInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'post_data': 'str',
        'url': 'str',
        'required_options': 'bool',
        'extension_attributes': 'CatalogDataProductRenderButtonExtensionInterface'
    }

    attribute_map = {
        'post_data': 'post_data',
        'url': 'url',
        'required_options': 'required_options',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, post_data=None, url=None, required_options=None, extension_attributes=None):
        """
        CatalogDataProductRenderButtonInterface - a model defined in Swagger
        """

        self._post_data = None
        self._url = None
        self._required_options = None
        self._extension_attributes = None

        self.post_data = post_data
        self.url = url
        self.required_options = required_options
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def post_data(self):
        """
        Gets the post_data of this CatalogDataProductRenderButtonInterface.
        Post data

        :return: The post_data of this CatalogDataProductRenderButtonInterface.
        :rtype: str
        """
        return self._post_data

    @post_data.setter
    def post_data(self, post_data):
        """
        Sets the post_data of this CatalogDataProductRenderButtonInterface.
        Post data

        :param post_data: The post_data of this CatalogDataProductRenderButtonInterface.
        :type: str
        """
        if post_data is None:
            raise ValueError("Invalid value for `post_data`, must not be `None`")

        self._post_data = post_data

    @property
    def url(self):
        """
        Gets the url of this CatalogDataProductRenderButtonInterface.
        Url, needed to add product to cart

        :return: The url of this CatalogDataProductRenderButtonInterface.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this CatalogDataProductRenderButtonInterface.
        Url, needed to add product to cart

        :param url: The url of this CatalogDataProductRenderButtonInterface.
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def required_options(self):
        """
        Gets the required_options of this CatalogDataProductRenderButtonInterface.
        Flag whether a product has options or not

        :return: The required_options of this CatalogDataProductRenderButtonInterface.
        :rtype: bool
        """
        return self._required_options

    @required_options.setter
    def required_options(self, required_options):
        """
        Sets the required_options of this CatalogDataProductRenderButtonInterface.
        Flag whether a product has options or not

        :param required_options: The required_options of this CatalogDataProductRenderButtonInterface.
        :type: bool
        """
        if required_options is None:
            raise ValueError("Invalid value for `required_options`, must not be `None`")

        self._required_options = required_options

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this CatalogDataProductRenderButtonInterface.

        :return: The extension_attributes of this CatalogDataProductRenderButtonInterface.
        :rtype: CatalogDataProductRenderButtonExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this CatalogDataProductRenderButtonInterface.

        :param extension_attributes: The extension_attributes of this CatalogDataProductRenderButtonInterface.
        :type: CatalogDataProductRenderButtonExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CatalogDataProductRenderButtonInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
