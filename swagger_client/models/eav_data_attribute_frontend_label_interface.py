# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EavDataAttributeFrontendLabelInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'store_id': 'int',
        'label': 'str'
    }

    attribute_map = {
        'store_id': 'store_id',
        'label': 'label'
    }

    def __init__(self, store_id=None, label=None):
        """
        EavDataAttributeFrontendLabelInterface - a model defined in Swagger
        """

        self._store_id = None
        self._label = None

        if store_id is not None:
          self.store_id = store_id
        if label is not None:
          self.label = label

    @property
    def store_id(self):
        """
        Gets the store_id of this EavDataAttributeFrontendLabelInterface.
        Store id

        :return: The store_id of this EavDataAttributeFrontendLabelInterface.
        :rtype: int
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """
        Sets the store_id of this EavDataAttributeFrontendLabelInterface.
        Store id

        :param store_id: The store_id of this EavDataAttributeFrontendLabelInterface.
        :type: int
        """

        self._store_id = store_id

    @property
    def label(self):
        """
        Gets the label of this EavDataAttributeFrontendLabelInterface.
        Option label

        :return: The label of this EavDataAttributeFrontendLabelInterface.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this EavDataAttributeFrontendLabelInterface.
        Option label

        :param label: The label of this EavDataAttributeFrontendLabelInterface.
        :type: str
        """

        self._label = label

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EavDataAttributeFrontendLabelInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
