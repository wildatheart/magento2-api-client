# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CustomerDataRegionInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'region_code': 'str',
        'region': 'str',
        'region_id': 'int',
        'extension_attributes': 'CustomerDataRegionExtensionInterface'
    }

    attribute_map = {
        'region_code': 'region_code',
        'region': 'region',
        'region_id': 'region_id',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, region_code=None, region=None, region_id=None, extension_attributes=None):
        """
        CustomerDataRegionInterface - a model defined in Swagger
        """

        self._region_code = None
        self._region = None
        self._region_id = None
        self._extension_attributes = None

        self.region_code = region_code
        self.region = region
        self.region_id = region_id
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def region_code(self):
        """
        Gets the region_code of this CustomerDataRegionInterface.
        Region code

        :return: The region_code of this CustomerDataRegionInterface.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """
        Sets the region_code of this CustomerDataRegionInterface.
        Region code

        :param region_code: The region_code of this CustomerDataRegionInterface.
        :type: str
        """
        if region_code is None:
            raise ValueError("Invalid value for `region_code`, must not be `None`")

        self._region_code = region_code

    @property
    def region(self):
        """
        Gets the region of this CustomerDataRegionInterface.
        Region

        :return: The region of this CustomerDataRegionInterface.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this CustomerDataRegionInterface.
        Region

        :param region: The region of this CustomerDataRegionInterface.
        :type: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")

        self._region = region

    @property
    def region_id(self):
        """
        Gets the region_id of this CustomerDataRegionInterface.
        Region id

        :return: The region_id of this CustomerDataRegionInterface.
        :rtype: int
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """
        Sets the region_id of this CustomerDataRegionInterface.
        Region id

        :param region_id: The region_id of this CustomerDataRegionInterface.
        :type: int
        """
        if region_id is None:
            raise ValueError("Invalid value for `region_id`, must not be `None`")

        self._region_id = region_id

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this CustomerDataRegionInterface.

        :return: The extension_attributes of this CustomerDataRegionInterface.
        :rtype: CustomerDataRegionExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this CustomerDataRegionInterface.

        :param extension_attributes: The extension_attributes of this CustomerDataRegionInterface.
        :type: CustomerDataRegionExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CustomerDataRegionInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
