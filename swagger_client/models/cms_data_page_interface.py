# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CmsDataPageInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'identifier': 'str',
        'title': 'str',
        'page_layout': 'str',
        'meta_title': 'str',
        'meta_keywords': 'str',
        'meta_description': 'str',
        'content_heading': 'str',
        'content': 'str',
        'creation_time': 'str',
        'update_time': 'str',
        'sort_order': 'str',
        'layout_update_xml': 'str',
        'custom_theme': 'str',
        'custom_root_template': 'str',
        'custom_layout_update_xml': 'str',
        'custom_theme_from': 'str',
        'custom_theme_to': 'str',
        'active': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'identifier': 'identifier',
        'title': 'title',
        'page_layout': 'page_layout',
        'meta_title': 'meta_title',
        'meta_keywords': 'meta_keywords',
        'meta_description': 'meta_description',
        'content_heading': 'content_heading',
        'content': 'content',
        'creation_time': 'creation_time',
        'update_time': 'update_time',
        'sort_order': 'sort_order',
        'layout_update_xml': 'layout_update_xml',
        'custom_theme': 'custom_theme',
        'custom_root_template': 'custom_root_template',
        'custom_layout_update_xml': 'custom_layout_update_xml',
        'custom_theme_from': 'custom_theme_from',
        'custom_theme_to': 'custom_theme_to',
        'active': 'active'
    }

    def __init__(self, id=None, identifier=None, title=None, page_layout=None, meta_title=None, meta_keywords=None, meta_description=None, content_heading=None, content=None, creation_time=None, update_time=None, sort_order=None, layout_update_xml=None, custom_theme=None, custom_root_template=None, custom_layout_update_xml=None, custom_theme_from=None, custom_theme_to=None, active=None):
        """
        CmsDataPageInterface - a model defined in Swagger
        """

        self._id = None
        self._identifier = None
        self._title = None
        self._page_layout = None
        self._meta_title = None
        self._meta_keywords = None
        self._meta_description = None
        self._content_heading = None
        self._content = None
        self._creation_time = None
        self._update_time = None
        self._sort_order = None
        self._layout_update_xml = None
        self._custom_theme = None
        self._custom_root_template = None
        self._custom_layout_update_xml = None
        self._custom_theme_from = None
        self._custom_theme_to = None
        self._active = None

        if id is not None:
          self.id = id
        self.identifier = identifier
        if title is not None:
          self.title = title
        if page_layout is not None:
          self.page_layout = page_layout
        if meta_title is not None:
          self.meta_title = meta_title
        if meta_keywords is not None:
          self.meta_keywords = meta_keywords
        if meta_description is not None:
          self.meta_description = meta_description
        if content_heading is not None:
          self.content_heading = content_heading
        if content is not None:
          self.content = content
        if creation_time is not None:
          self.creation_time = creation_time
        if update_time is not None:
          self.update_time = update_time
        if sort_order is not None:
          self.sort_order = sort_order
        if layout_update_xml is not None:
          self.layout_update_xml = layout_update_xml
        if custom_theme is not None:
          self.custom_theme = custom_theme
        if custom_root_template is not None:
          self.custom_root_template = custom_root_template
        if custom_layout_update_xml is not None:
          self.custom_layout_update_xml = custom_layout_update_xml
        if custom_theme_from is not None:
          self.custom_theme_from = custom_theme_from
        if custom_theme_to is not None:
          self.custom_theme_to = custom_theme_to
        if active is not None:
          self.active = active

    @property
    def id(self):
        """
        Gets the id of this CmsDataPageInterface.
        ID

        :return: The id of this CmsDataPageInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CmsDataPageInterface.
        ID

        :param id: The id of this CmsDataPageInterface.
        :type: int
        """

        self._id = id

    @property
    def identifier(self):
        """
        Gets the identifier of this CmsDataPageInterface.
        Identifier

        :return: The identifier of this CmsDataPageInterface.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this CmsDataPageInterface.
        Identifier

        :param identifier: The identifier of this CmsDataPageInterface.
        :type: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")

        self._identifier = identifier

    @property
    def title(self):
        """
        Gets the title of this CmsDataPageInterface.
        Title

        :return: The title of this CmsDataPageInterface.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this CmsDataPageInterface.
        Title

        :param title: The title of this CmsDataPageInterface.
        :type: str
        """

        self._title = title

    @property
    def page_layout(self):
        """
        Gets the page_layout of this CmsDataPageInterface.
        Page layout

        :return: The page_layout of this CmsDataPageInterface.
        :rtype: str
        """
        return self._page_layout

    @page_layout.setter
    def page_layout(self, page_layout):
        """
        Sets the page_layout of this CmsDataPageInterface.
        Page layout

        :param page_layout: The page_layout of this CmsDataPageInterface.
        :type: str
        """

        self._page_layout = page_layout

    @property
    def meta_title(self):
        """
        Gets the meta_title of this CmsDataPageInterface.
        Meta title

        :return: The meta_title of this CmsDataPageInterface.
        :rtype: str
        """
        return self._meta_title

    @meta_title.setter
    def meta_title(self, meta_title):
        """
        Sets the meta_title of this CmsDataPageInterface.
        Meta title

        :param meta_title: The meta_title of this CmsDataPageInterface.
        :type: str
        """

        self._meta_title = meta_title

    @property
    def meta_keywords(self):
        """
        Gets the meta_keywords of this CmsDataPageInterface.
        Meta keywords

        :return: The meta_keywords of this CmsDataPageInterface.
        :rtype: str
        """
        return self._meta_keywords

    @meta_keywords.setter
    def meta_keywords(self, meta_keywords):
        """
        Sets the meta_keywords of this CmsDataPageInterface.
        Meta keywords

        :param meta_keywords: The meta_keywords of this CmsDataPageInterface.
        :type: str
        """

        self._meta_keywords = meta_keywords

    @property
    def meta_description(self):
        """
        Gets the meta_description of this CmsDataPageInterface.
        Meta description

        :return: The meta_description of this CmsDataPageInterface.
        :rtype: str
        """
        return self._meta_description

    @meta_description.setter
    def meta_description(self, meta_description):
        """
        Sets the meta_description of this CmsDataPageInterface.
        Meta description

        :param meta_description: The meta_description of this CmsDataPageInterface.
        :type: str
        """

        self._meta_description = meta_description

    @property
    def content_heading(self):
        """
        Gets the content_heading of this CmsDataPageInterface.
        Content heading

        :return: The content_heading of this CmsDataPageInterface.
        :rtype: str
        """
        return self._content_heading

    @content_heading.setter
    def content_heading(self, content_heading):
        """
        Sets the content_heading of this CmsDataPageInterface.
        Content heading

        :param content_heading: The content_heading of this CmsDataPageInterface.
        :type: str
        """

        self._content_heading = content_heading

    @property
    def content(self):
        """
        Gets the content of this CmsDataPageInterface.
        Content

        :return: The content of this CmsDataPageInterface.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this CmsDataPageInterface.
        Content

        :param content: The content of this CmsDataPageInterface.
        :type: str
        """

        self._content = content

    @property
    def creation_time(self):
        """
        Gets the creation_time of this CmsDataPageInterface.
        Creation time

        :return: The creation_time of this CmsDataPageInterface.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """
        Sets the creation_time of this CmsDataPageInterface.
        Creation time

        :param creation_time: The creation_time of this CmsDataPageInterface.
        :type: str
        """

        self._creation_time = creation_time

    @property
    def update_time(self):
        """
        Gets the update_time of this CmsDataPageInterface.
        Update time

        :return: The update_time of this CmsDataPageInterface.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """
        Sets the update_time of this CmsDataPageInterface.
        Update time

        :param update_time: The update_time of this CmsDataPageInterface.
        :type: str
        """

        self._update_time = update_time

    @property
    def sort_order(self):
        """
        Gets the sort_order of this CmsDataPageInterface.
        Sort order

        :return: The sort_order of this CmsDataPageInterface.
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """
        Sets the sort_order of this CmsDataPageInterface.
        Sort order

        :param sort_order: The sort_order of this CmsDataPageInterface.
        :type: str
        """

        self._sort_order = sort_order

    @property
    def layout_update_xml(self):
        """
        Gets the layout_update_xml of this CmsDataPageInterface.
        Layout update xml

        :return: The layout_update_xml of this CmsDataPageInterface.
        :rtype: str
        """
        return self._layout_update_xml

    @layout_update_xml.setter
    def layout_update_xml(self, layout_update_xml):
        """
        Sets the layout_update_xml of this CmsDataPageInterface.
        Layout update xml

        :param layout_update_xml: The layout_update_xml of this CmsDataPageInterface.
        :type: str
        """

        self._layout_update_xml = layout_update_xml

    @property
    def custom_theme(self):
        """
        Gets the custom_theme of this CmsDataPageInterface.
        Custom theme

        :return: The custom_theme of this CmsDataPageInterface.
        :rtype: str
        """
        return self._custom_theme

    @custom_theme.setter
    def custom_theme(self, custom_theme):
        """
        Sets the custom_theme of this CmsDataPageInterface.
        Custom theme

        :param custom_theme: The custom_theme of this CmsDataPageInterface.
        :type: str
        """

        self._custom_theme = custom_theme

    @property
    def custom_root_template(self):
        """
        Gets the custom_root_template of this CmsDataPageInterface.
        Custom root template

        :return: The custom_root_template of this CmsDataPageInterface.
        :rtype: str
        """
        return self._custom_root_template

    @custom_root_template.setter
    def custom_root_template(self, custom_root_template):
        """
        Sets the custom_root_template of this CmsDataPageInterface.
        Custom root template

        :param custom_root_template: The custom_root_template of this CmsDataPageInterface.
        :type: str
        """

        self._custom_root_template = custom_root_template

    @property
    def custom_layout_update_xml(self):
        """
        Gets the custom_layout_update_xml of this CmsDataPageInterface.
        Custom layout update xml

        :return: The custom_layout_update_xml of this CmsDataPageInterface.
        :rtype: str
        """
        return self._custom_layout_update_xml

    @custom_layout_update_xml.setter
    def custom_layout_update_xml(self, custom_layout_update_xml):
        """
        Sets the custom_layout_update_xml of this CmsDataPageInterface.
        Custom layout update xml

        :param custom_layout_update_xml: The custom_layout_update_xml of this CmsDataPageInterface.
        :type: str
        """

        self._custom_layout_update_xml = custom_layout_update_xml

    @property
    def custom_theme_from(self):
        """
        Gets the custom_theme_from of this CmsDataPageInterface.
        Custom theme from

        :return: The custom_theme_from of this CmsDataPageInterface.
        :rtype: str
        """
        return self._custom_theme_from

    @custom_theme_from.setter
    def custom_theme_from(self, custom_theme_from):
        """
        Sets the custom_theme_from of this CmsDataPageInterface.
        Custom theme from

        :param custom_theme_from: The custom_theme_from of this CmsDataPageInterface.
        :type: str
        """

        self._custom_theme_from = custom_theme_from

    @property
    def custom_theme_to(self):
        """
        Gets the custom_theme_to of this CmsDataPageInterface.
        Custom theme to

        :return: The custom_theme_to of this CmsDataPageInterface.
        :rtype: str
        """
        return self._custom_theme_to

    @custom_theme_to.setter
    def custom_theme_to(self, custom_theme_to):
        """
        Sets the custom_theme_to of this CmsDataPageInterface.
        Custom theme to

        :param custom_theme_to: The custom_theme_to of this CmsDataPageInterface.
        :type: str
        """

        self._custom_theme_to = custom_theme_to

    @property
    def active(self):
        """
        Gets the active of this CmsDataPageInterface.
        Active

        :return: The active of this CmsDataPageInterface.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this CmsDataPageInterface.
        Active

        :param active: The active of this CmsDataPageInterface.
        :type: bool
        """

        self._active = active

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CmsDataPageInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
