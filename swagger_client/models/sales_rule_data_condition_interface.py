# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SalesRuleDataConditionInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'condition_type': 'str',
        'conditions': 'list[SalesRuleDataConditionInterface]',
        'aggregator_type': 'str',
        'operator': 'str',
        'attribute_name': 'str',
        'value': 'str',
        'extension_attributes': 'SalesRuleDataConditionExtensionInterface'
    }

    attribute_map = {
        'condition_type': 'condition_type',
        'conditions': 'conditions',
        'aggregator_type': 'aggregator_type',
        'operator': 'operator',
        'attribute_name': 'attribute_name',
        'value': 'value',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, condition_type=None, conditions=None, aggregator_type=None, operator=None, attribute_name=None, value=None, extension_attributes=None):
        """
        SalesRuleDataConditionInterface - a model defined in Swagger
        """

        self._condition_type = None
        self._conditions = None
        self._aggregator_type = None
        self._operator = None
        self._attribute_name = None
        self._value = None
        self._extension_attributes = None

        self.condition_type = condition_type
        if conditions is not None:
          self.conditions = conditions
        if aggregator_type is not None:
          self.aggregator_type = aggregator_type
        self.operator = operator
        if attribute_name is not None:
          self.attribute_name = attribute_name
        self.value = value
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def condition_type(self):
        """
        Gets the condition_type of this SalesRuleDataConditionInterface.
        Condition type

        :return: The condition_type of this SalesRuleDataConditionInterface.
        :rtype: str
        """
        return self._condition_type

    @condition_type.setter
    def condition_type(self, condition_type):
        """
        Sets the condition_type of this SalesRuleDataConditionInterface.
        Condition type

        :param condition_type: The condition_type of this SalesRuleDataConditionInterface.
        :type: str
        """
        if condition_type is None:
            raise ValueError("Invalid value for `condition_type`, must not be `None`")

        self._condition_type = condition_type

    @property
    def conditions(self):
        """
        Gets the conditions of this SalesRuleDataConditionInterface.
        List of conditions

        :return: The conditions of this SalesRuleDataConditionInterface.
        :rtype: list[SalesRuleDataConditionInterface]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """
        Sets the conditions of this SalesRuleDataConditionInterface.
        List of conditions

        :param conditions: The conditions of this SalesRuleDataConditionInterface.
        :type: list[SalesRuleDataConditionInterface]
        """

        self._conditions = conditions

    @property
    def aggregator_type(self):
        """
        Gets the aggregator_type of this SalesRuleDataConditionInterface.
        The aggregator type

        :return: The aggregator_type of this SalesRuleDataConditionInterface.
        :rtype: str
        """
        return self._aggregator_type

    @aggregator_type.setter
    def aggregator_type(self, aggregator_type):
        """
        Sets the aggregator_type of this SalesRuleDataConditionInterface.
        The aggregator type

        :param aggregator_type: The aggregator_type of this SalesRuleDataConditionInterface.
        :type: str
        """

        self._aggregator_type = aggregator_type

    @property
    def operator(self):
        """
        Gets the operator of this SalesRuleDataConditionInterface.
        The operator of the condition

        :return: The operator of this SalesRuleDataConditionInterface.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """
        Sets the operator of this SalesRuleDataConditionInterface.
        The operator of the condition

        :param operator: The operator of this SalesRuleDataConditionInterface.
        :type: str
        """
        if operator is None:
            raise ValueError("Invalid value for `operator`, must not be `None`")

        self._operator = operator

    @property
    def attribute_name(self):
        """
        Gets the attribute_name of this SalesRuleDataConditionInterface.
        The attribute name of the condition

        :return: The attribute_name of this SalesRuleDataConditionInterface.
        :rtype: str
        """
        return self._attribute_name

    @attribute_name.setter
    def attribute_name(self, attribute_name):
        """
        Sets the attribute_name of this SalesRuleDataConditionInterface.
        The attribute name of the condition

        :param attribute_name: The attribute_name of this SalesRuleDataConditionInterface.
        :type: str
        """

        self._attribute_name = attribute_name

    @property
    def value(self):
        """
        Gets the value of this SalesRuleDataConditionInterface.
        The value of the condition

        :return: The value of this SalesRuleDataConditionInterface.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this SalesRuleDataConditionInterface.
        The value of the condition

        :param value: The value of this SalesRuleDataConditionInterface.
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this SalesRuleDataConditionInterface.

        :return: The extension_attributes of this SalesRuleDataConditionInterface.
        :rtype: SalesRuleDataConditionExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this SalesRuleDataConditionInterface.

        :param extension_attributes: The extension_attributes of this SalesRuleDataConditionInterface.
        :type: SalesRuleDataConditionExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SalesRuleDataConditionInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
