# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BundleDataOptionInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'option_id': 'int',
        'title': 'str',
        'required': 'bool',
        'type': 'str',
        'position': 'int',
        'sku': 'str',
        'product_links': 'list[BundleDataLinkInterface]',
        'extension_attributes': 'BundleDataOptionExtensionInterface'
    }

    attribute_map = {
        'option_id': 'option_id',
        'title': 'title',
        'required': 'required',
        'type': 'type',
        'position': 'position',
        'sku': 'sku',
        'product_links': 'product_links',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, option_id=None, title=None, required=None, type=None, position=None, sku=None, product_links=None, extension_attributes=None):
        """
        BundleDataOptionInterface - a model defined in Swagger
        """

        self._option_id = None
        self._title = None
        self._required = None
        self._type = None
        self._position = None
        self._sku = None
        self._product_links = None
        self._extension_attributes = None

        if option_id is not None:
          self.option_id = option_id
        if title is not None:
          self.title = title
        if required is not None:
          self.required = required
        if type is not None:
          self.type = type
        if position is not None:
          self.position = position
        if sku is not None:
          self.sku = sku
        if product_links is not None:
          self.product_links = product_links
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def option_id(self):
        """
        Gets the option_id of this BundleDataOptionInterface.
        Option id

        :return: The option_id of this BundleDataOptionInterface.
        :rtype: int
        """
        return self._option_id

    @option_id.setter
    def option_id(self, option_id):
        """
        Sets the option_id of this BundleDataOptionInterface.
        Option id

        :param option_id: The option_id of this BundleDataOptionInterface.
        :type: int
        """

        self._option_id = option_id

    @property
    def title(self):
        """
        Gets the title of this BundleDataOptionInterface.
        Option title

        :return: The title of this BundleDataOptionInterface.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this BundleDataOptionInterface.
        Option title

        :param title: The title of this BundleDataOptionInterface.
        :type: str
        """

        self._title = title

    @property
    def required(self):
        """
        Gets the required of this BundleDataOptionInterface.
        Is required option

        :return: The required of this BundleDataOptionInterface.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """
        Sets the required of this BundleDataOptionInterface.
        Is required option

        :param required: The required of this BundleDataOptionInterface.
        :type: bool
        """

        self._required = required

    @property
    def type(self):
        """
        Gets the type of this BundleDataOptionInterface.
        Input type

        :return: The type of this BundleDataOptionInterface.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this BundleDataOptionInterface.
        Input type

        :param type: The type of this BundleDataOptionInterface.
        :type: str
        """

        self._type = type

    @property
    def position(self):
        """
        Gets the position of this BundleDataOptionInterface.
        Option position

        :return: The position of this BundleDataOptionInterface.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this BundleDataOptionInterface.
        Option position

        :param position: The position of this BundleDataOptionInterface.
        :type: int
        """

        self._position = position

    @property
    def sku(self):
        """
        Gets the sku of this BundleDataOptionInterface.
        Product sku

        :return: The sku of this BundleDataOptionInterface.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this BundleDataOptionInterface.
        Product sku

        :param sku: The sku of this BundleDataOptionInterface.
        :type: str
        """

        self._sku = sku

    @property
    def product_links(self):
        """
        Gets the product_links of this BundleDataOptionInterface.
        Product links

        :return: The product_links of this BundleDataOptionInterface.
        :rtype: list[BundleDataLinkInterface]
        """
        return self._product_links

    @product_links.setter
    def product_links(self, product_links):
        """
        Sets the product_links of this BundleDataOptionInterface.
        Product links

        :param product_links: The product_links of this BundleDataOptionInterface.
        :type: list[BundleDataLinkInterface]
        """

        self._product_links = product_links

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this BundleDataOptionInterface.

        :return: The extension_attributes of this BundleDataOptionInterface.
        :rtype: BundleDataOptionExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this BundleDataOptionInterface.

        :param extension_attributes: The extension_attributes of this BundleDataOptionInterface.
        :type: BundleDataOptionExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BundleDataOptionInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
