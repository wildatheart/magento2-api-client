# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SalesDataOrderPaymentInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_status': 'str',
        'additional_data': 'str',
        'additional_information': 'list[str]',
        'address_status': 'str',
        'amount_authorized': 'float',
        'amount_canceled': 'float',
        'amount_ordered': 'float',
        'amount_paid': 'float',
        'amount_refunded': 'float',
        'anet_trans_method': 'str',
        'base_amount_authorized': 'float',
        'base_amount_canceled': 'float',
        'base_amount_ordered': 'float',
        'base_amount_paid': 'float',
        'base_amount_paid_online': 'float',
        'base_amount_refunded': 'float',
        'base_amount_refunded_online': 'float',
        'base_shipping_amount': 'float',
        'base_shipping_captured': 'float',
        'base_shipping_refunded': 'float',
        'cc_approval': 'str',
        'cc_avs_status': 'str',
        'cc_cid_status': 'str',
        'cc_debug_request_body': 'str',
        'cc_debug_response_body': 'str',
        'cc_debug_response_serialized': 'str',
        'cc_exp_month': 'str',
        'cc_exp_year': 'str',
        'cc_last4': 'str',
        'cc_number_enc': 'str',
        'cc_owner': 'str',
        'cc_secure_verify': 'str',
        'cc_ss_issue': 'str',
        'cc_ss_start_month': 'str',
        'cc_ss_start_year': 'str',
        'cc_status': 'str',
        'cc_status_description': 'str',
        'cc_trans_id': 'str',
        'cc_type': 'str',
        'echeck_account_name': 'str',
        'echeck_account_type': 'str',
        'echeck_bank_name': 'str',
        'echeck_routing_number': 'str',
        'echeck_type': 'str',
        'entity_id': 'int',
        'last_trans_id': 'str',
        'method': 'str',
        'parent_id': 'int',
        'po_number': 'str',
        'protection_eligibility': 'str',
        'quote_payment_id': 'int',
        'shipping_amount': 'float',
        'shipping_captured': 'float',
        'shipping_refunded': 'float',
        'extension_attributes': 'SalesDataOrderPaymentExtensionInterface'
    }

    attribute_map = {
        'account_status': 'account_status',
        'additional_data': 'additional_data',
        'additional_information': 'additional_information',
        'address_status': 'address_status',
        'amount_authorized': 'amount_authorized',
        'amount_canceled': 'amount_canceled',
        'amount_ordered': 'amount_ordered',
        'amount_paid': 'amount_paid',
        'amount_refunded': 'amount_refunded',
        'anet_trans_method': 'anet_trans_method',
        'base_amount_authorized': 'base_amount_authorized',
        'base_amount_canceled': 'base_amount_canceled',
        'base_amount_ordered': 'base_amount_ordered',
        'base_amount_paid': 'base_amount_paid',
        'base_amount_paid_online': 'base_amount_paid_online',
        'base_amount_refunded': 'base_amount_refunded',
        'base_amount_refunded_online': 'base_amount_refunded_online',
        'base_shipping_amount': 'base_shipping_amount',
        'base_shipping_captured': 'base_shipping_captured',
        'base_shipping_refunded': 'base_shipping_refunded',
        'cc_approval': 'cc_approval',
        'cc_avs_status': 'cc_avs_status',
        'cc_cid_status': 'cc_cid_status',
        'cc_debug_request_body': 'cc_debug_request_body',
        'cc_debug_response_body': 'cc_debug_response_body',
        'cc_debug_response_serialized': 'cc_debug_response_serialized',
        'cc_exp_month': 'cc_exp_month',
        'cc_exp_year': 'cc_exp_year',
        'cc_last4': 'cc_last4',
        'cc_number_enc': 'cc_number_enc',
        'cc_owner': 'cc_owner',
        'cc_secure_verify': 'cc_secure_verify',
        'cc_ss_issue': 'cc_ss_issue',
        'cc_ss_start_month': 'cc_ss_start_month',
        'cc_ss_start_year': 'cc_ss_start_year',
        'cc_status': 'cc_status',
        'cc_status_description': 'cc_status_description',
        'cc_trans_id': 'cc_trans_id',
        'cc_type': 'cc_type',
        'echeck_account_name': 'echeck_account_name',
        'echeck_account_type': 'echeck_account_type',
        'echeck_bank_name': 'echeck_bank_name',
        'echeck_routing_number': 'echeck_routing_number',
        'echeck_type': 'echeck_type',
        'entity_id': 'entity_id',
        'last_trans_id': 'last_trans_id',
        'method': 'method',
        'parent_id': 'parent_id',
        'po_number': 'po_number',
        'protection_eligibility': 'protection_eligibility',
        'quote_payment_id': 'quote_payment_id',
        'shipping_amount': 'shipping_amount',
        'shipping_captured': 'shipping_captured',
        'shipping_refunded': 'shipping_refunded',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, account_status=None, additional_data=None, additional_information=None, address_status=None, amount_authorized=None, amount_canceled=None, amount_ordered=None, amount_paid=None, amount_refunded=None, anet_trans_method=None, base_amount_authorized=None, base_amount_canceled=None, base_amount_ordered=None, base_amount_paid=None, base_amount_paid_online=None, base_amount_refunded=None, base_amount_refunded_online=None, base_shipping_amount=None, base_shipping_captured=None, base_shipping_refunded=None, cc_approval=None, cc_avs_status=None, cc_cid_status=None, cc_debug_request_body=None, cc_debug_response_body=None, cc_debug_response_serialized=None, cc_exp_month=None, cc_exp_year=None, cc_last4=None, cc_number_enc=None, cc_owner=None, cc_secure_verify=None, cc_ss_issue=None, cc_ss_start_month=None, cc_ss_start_year=None, cc_status=None, cc_status_description=None, cc_trans_id=None, cc_type=None, echeck_account_name=None, echeck_account_type=None, echeck_bank_name=None, echeck_routing_number=None, echeck_type=None, entity_id=None, last_trans_id=None, method=None, parent_id=None, po_number=None, protection_eligibility=None, quote_payment_id=None, shipping_amount=None, shipping_captured=None, shipping_refunded=None, extension_attributes=None):
        """
        SalesDataOrderPaymentInterface - a model defined in Swagger
        """

        self._account_status = None
        self._additional_data = None
        self._additional_information = None
        self._address_status = None
        self._amount_authorized = None
        self._amount_canceled = None
        self._amount_ordered = None
        self._amount_paid = None
        self._amount_refunded = None
        self._anet_trans_method = None
        self._base_amount_authorized = None
        self._base_amount_canceled = None
        self._base_amount_ordered = None
        self._base_amount_paid = None
        self._base_amount_paid_online = None
        self._base_amount_refunded = None
        self._base_amount_refunded_online = None
        self._base_shipping_amount = None
        self._base_shipping_captured = None
        self._base_shipping_refunded = None
        self._cc_approval = None
        self._cc_avs_status = None
        self._cc_cid_status = None
        self._cc_debug_request_body = None
        self._cc_debug_response_body = None
        self._cc_debug_response_serialized = None
        self._cc_exp_month = None
        self._cc_exp_year = None
        self._cc_last4 = None
        self._cc_number_enc = None
        self._cc_owner = None
        self._cc_secure_verify = None
        self._cc_ss_issue = None
        self._cc_ss_start_month = None
        self._cc_ss_start_year = None
        self._cc_status = None
        self._cc_status_description = None
        self._cc_trans_id = None
        self._cc_type = None
        self._echeck_account_name = None
        self._echeck_account_type = None
        self._echeck_bank_name = None
        self._echeck_routing_number = None
        self._echeck_type = None
        self._entity_id = None
        self._last_trans_id = None
        self._method = None
        self._parent_id = None
        self._po_number = None
        self._protection_eligibility = None
        self._quote_payment_id = None
        self._shipping_amount = None
        self._shipping_captured = None
        self._shipping_refunded = None
        self._extension_attributes = None

        self.account_status = account_status
        if additional_data is not None:
          self.additional_data = additional_data
        self.additional_information = additional_information
        if address_status is not None:
          self.address_status = address_status
        if amount_authorized is not None:
          self.amount_authorized = amount_authorized
        if amount_canceled is not None:
          self.amount_canceled = amount_canceled
        if amount_ordered is not None:
          self.amount_ordered = amount_ordered
        if amount_paid is not None:
          self.amount_paid = amount_paid
        if amount_refunded is not None:
          self.amount_refunded = amount_refunded
        if anet_trans_method is not None:
          self.anet_trans_method = anet_trans_method
        if base_amount_authorized is not None:
          self.base_amount_authorized = base_amount_authorized
        if base_amount_canceled is not None:
          self.base_amount_canceled = base_amount_canceled
        if base_amount_ordered is not None:
          self.base_amount_ordered = base_amount_ordered
        if base_amount_paid is not None:
          self.base_amount_paid = base_amount_paid
        if base_amount_paid_online is not None:
          self.base_amount_paid_online = base_amount_paid_online
        if base_amount_refunded is not None:
          self.base_amount_refunded = base_amount_refunded
        if base_amount_refunded_online is not None:
          self.base_amount_refunded_online = base_amount_refunded_online
        if base_shipping_amount is not None:
          self.base_shipping_amount = base_shipping_amount
        if base_shipping_captured is not None:
          self.base_shipping_captured = base_shipping_captured
        if base_shipping_refunded is not None:
          self.base_shipping_refunded = base_shipping_refunded
        if cc_approval is not None:
          self.cc_approval = cc_approval
        if cc_avs_status is not None:
          self.cc_avs_status = cc_avs_status
        if cc_cid_status is not None:
          self.cc_cid_status = cc_cid_status
        if cc_debug_request_body is not None:
          self.cc_debug_request_body = cc_debug_request_body
        if cc_debug_response_body is not None:
          self.cc_debug_response_body = cc_debug_response_body
        if cc_debug_response_serialized is not None:
          self.cc_debug_response_serialized = cc_debug_response_serialized
        if cc_exp_month is not None:
          self.cc_exp_month = cc_exp_month
        if cc_exp_year is not None:
          self.cc_exp_year = cc_exp_year
        self.cc_last4 = cc_last4
        if cc_number_enc is not None:
          self.cc_number_enc = cc_number_enc
        if cc_owner is not None:
          self.cc_owner = cc_owner
        if cc_secure_verify is not None:
          self.cc_secure_verify = cc_secure_verify
        if cc_ss_issue is not None:
          self.cc_ss_issue = cc_ss_issue
        if cc_ss_start_month is not None:
          self.cc_ss_start_month = cc_ss_start_month
        if cc_ss_start_year is not None:
          self.cc_ss_start_year = cc_ss_start_year
        if cc_status is not None:
          self.cc_status = cc_status
        if cc_status_description is not None:
          self.cc_status_description = cc_status_description
        if cc_trans_id is not None:
          self.cc_trans_id = cc_trans_id
        if cc_type is not None:
          self.cc_type = cc_type
        if echeck_account_name is not None:
          self.echeck_account_name = echeck_account_name
        if echeck_account_type is not None:
          self.echeck_account_type = echeck_account_type
        if echeck_bank_name is not None:
          self.echeck_bank_name = echeck_bank_name
        if echeck_routing_number is not None:
          self.echeck_routing_number = echeck_routing_number
        if echeck_type is not None:
          self.echeck_type = echeck_type
        if entity_id is not None:
          self.entity_id = entity_id
        if last_trans_id is not None:
          self.last_trans_id = last_trans_id
        self.method = method
        if parent_id is not None:
          self.parent_id = parent_id
        if po_number is not None:
          self.po_number = po_number
        if protection_eligibility is not None:
          self.protection_eligibility = protection_eligibility
        if quote_payment_id is not None:
          self.quote_payment_id = quote_payment_id
        if shipping_amount is not None:
          self.shipping_amount = shipping_amount
        if shipping_captured is not None:
          self.shipping_captured = shipping_captured
        if shipping_refunded is not None:
          self.shipping_refunded = shipping_refunded
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def account_status(self):
        """
        Gets the account_status of this SalesDataOrderPaymentInterface.
        Account status.

        :return: The account_status of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._account_status

    @account_status.setter
    def account_status(self, account_status):
        """
        Sets the account_status of this SalesDataOrderPaymentInterface.
        Account status.

        :param account_status: The account_status of this SalesDataOrderPaymentInterface.
        :type: str
        """
        if account_status is None:
            raise ValueError("Invalid value for `account_status`, must not be `None`")

        self._account_status = account_status

    @property
    def additional_data(self):
        """
        Gets the additional_data of this SalesDataOrderPaymentInterface.
        Additional data.

        :return: The additional_data of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """
        Sets the additional_data of this SalesDataOrderPaymentInterface.
        Additional data.

        :param additional_data: The additional_data of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._additional_data = additional_data

    @property
    def additional_information(self):
        """
        Gets the additional_information of this SalesDataOrderPaymentInterface.
        Array of additional information.

        :return: The additional_information of this SalesDataOrderPaymentInterface.
        :rtype: list[str]
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """
        Sets the additional_information of this SalesDataOrderPaymentInterface.
        Array of additional information.

        :param additional_information: The additional_information of this SalesDataOrderPaymentInterface.
        :type: list[str]
        """
        if additional_information is None:
            raise ValueError("Invalid value for `additional_information`, must not be `None`")

        self._additional_information = additional_information

    @property
    def address_status(self):
        """
        Gets the address_status of this SalesDataOrderPaymentInterface.
        Address status.

        :return: The address_status of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._address_status

    @address_status.setter
    def address_status(self, address_status):
        """
        Sets the address_status of this SalesDataOrderPaymentInterface.
        Address status.

        :param address_status: The address_status of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._address_status = address_status

    @property
    def amount_authorized(self):
        """
        Gets the amount_authorized of this SalesDataOrderPaymentInterface.
        Amount authorized.

        :return: The amount_authorized of this SalesDataOrderPaymentInterface.
        :rtype: float
        """
        return self._amount_authorized

    @amount_authorized.setter
    def amount_authorized(self, amount_authorized):
        """
        Sets the amount_authorized of this SalesDataOrderPaymentInterface.
        Amount authorized.

        :param amount_authorized: The amount_authorized of this SalesDataOrderPaymentInterface.
        :type: float
        """

        self._amount_authorized = amount_authorized

    @property
    def amount_canceled(self):
        """
        Gets the amount_canceled of this SalesDataOrderPaymentInterface.
        Amount canceled.

        :return: The amount_canceled of this SalesDataOrderPaymentInterface.
        :rtype: float
        """
        return self._amount_canceled

    @amount_canceled.setter
    def amount_canceled(self, amount_canceled):
        """
        Sets the amount_canceled of this SalesDataOrderPaymentInterface.
        Amount canceled.

        :param amount_canceled: The amount_canceled of this SalesDataOrderPaymentInterface.
        :type: float
        """

        self._amount_canceled = amount_canceled

    @property
    def amount_ordered(self):
        """
        Gets the amount_ordered of this SalesDataOrderPaymentInterface.
        Amount ordered.

        :return: The amount_ordered of this SalesDataOrderPaymentInterface.
        :rtype: float
        """
        return self._amount_ordered

    @amount_ordered.setter
    def amount_ordered(self, amount_ordered):
        """
        Sets the amount_ordered of this SalesDataOrderPaymentInterface.
        Amount ordered.

        :param amount_ordered: The amount_ordered of this SalesDataOrderPaymentInterface.
        :type: float
        """

        self._amount_ordered = amount_ordered

    @property
    def amount_paid(self):
        """
        Gets the amount_paid of this SalesDataOrderPaymentInterface.
        Amount paid.

        :return: The amount_paid of this SalesDataOrderPaymentInterface.
        :rtype: float
        """
        return self._amount_paid

    @amount_paid.setter
    def amount_paid(self, amount_paid):
        """
        Sets the amount_paid of this SalesDataOrderPaymentInterface.
        Amount paid.

        :param amount_paid: The amount_paid of this SalesDataOrderPaymentInterface.
        :type: float
        """

        self._amount_paid = amount_paid

    @property
    def amount_refunded(self):
        """
        Gets the amount_refunded of this SalesDataOrderPaymentInterface.
        Amount refunded.

        :return: The amount_refunded of this SalesDataOrderPaymentInterface.
        :rtype: float
        """
        return self._amount_refunded

    @amount_refunded.setter
    def amount_refunded(self, amount_refunded):
        """
        Sets the amount_refunded of this SalesDataOrderPaymentInterface.
        Amount refunded.

        :param amount_refunded: The amount_refunded of this SalesDataOrderPaymentInterface.
        :type: float
        """

        self._amount_refunded = amount_refunded

    @property
    def anet_trans_method(self):
        """
        Gets the anet_trans_method of this SalesDataOrderPaymentInterface.
        Anet transaction method.

        :return: The anet_trans_method of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._anet_trans_method

    @anet_trans_method.setter
    def anet_trans_method(self, anet_trans_method):
        """
        Sets the anet_trans_method of this SalesDataOrderPaymentInterface.
        Anet transaction method.

        :param anet_trans_method: The anet_trans_method of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._anet_trans_method = anet_trans_method

    @property
    def base_amount_authorized(self):
        """
        Gets the base_amount_authorized of this SalesDataOrderPaymentInterface.
        Base amount authorized.

        :return: The base_amount_authorized of this SalesDataOrderPaymentInterface.
        :rtype: float
        """
        return self._base_amount_authorized

    @base_amount_authorized.setter
    def base_amount_authorized(self, base_amount_authorized):
        """
        Sets the base_amount_authorized of this SalesDataOrderPaymentInterface.
        Base amount authorized.

        :param base_amount_authorized: The base_amount_authorized of this SalesDataOrderPaymentInterface.
        :type: float
        """

        self._base_amount_authorized = base_amount_authorized

    @property
    def base_amount_canceled(self):
        """
        Gets the base_amount_canceled of this SalesDataOrderPaymentInterface.
        Base amount canceled.

        :return: The base_amount_canceled of this SalesDataOrderPaymentInterface.
        :rtype: float
        """
        return self._base_amount_canceled

    @base_amount_canceled.setter
    def base_amount_canceled(self, base_amount_canceled):
        """
        Sets the base_amount_canceled of this SalesDataOrderPaymentInterface.
        Base amount canceled.

        :param base_amount_canceled: The base_amount_canceled of this SalesDataOrderPaymentInterface.
        :type: float
        """

        self._base_amount_canceled = base_amount_canceled

    @property
    def base_amount_ordered(self):
        """
        Gets the base_amount_ordered of this SalesDataOrderPaymentInterface.
        Base amount ordered.

        :return: The base_amount_ordered of this SalesDataOrderPaymentInterface.
        :rtype: float
        """
        return self._base_amount_ordered

    @base_amount_ordered.setter
    def base_amount_ordered(self, base_amount_ordered):
        """
        Sets the base_amount_ordered of this SalesDataOrderPaymentInterface.
        Base amount ordered.

        :param base_amount_ordered: The base_amount_ordered of this SalesDataOrderPaymentInterface.
        :type: float
        """

        self._base_amount_ordered = base_amount_ordered

    @property
    def base_amount_paid(self):
        """
        Gets the base_amount_paid of this SalesDataOrderPaymentInterface.
        Base amount paid.

        :return: The base_amount_paid of this SalesDataOrderPaymentInterface.
        :rtype: float
        """
        return self._base_amount_paid

    @base_amount_paid.setter
    def base_amount_paid(self, base_amount_paid):
        """
        Sets the base_amount_paid of this SalesDataOrderPaymentInterface.
        Base amount paid.

        :param base_amount_paid: The base_amount_paid of this SalesDataOrderPaymentInterface.
        :type: float
        """

        self._base_amount_paid = base_amount_paid

    @property
    def base_amount_paid_online(self):
        """
        Gets the base_amount_paid_online of this SalesDataOrderPaymentInterface.
        Base amount paid online.

        :return: The base_amount_paid_online of this SalesDataOrderPaymentInterface.
        :rtype: float
        """
        return self._base_amount_paid_online

    @base_amount_paid_online.setter
    def base_amount_paid_online(self, base_amount_paid_online):
        """
        Sets the base_amount_paid_online of this SalesDataOrderPaymentInterface.
        Base amount paid online.

        :param base_amount_paid_online: The base_amount_paid_online of this SalesDataOrderPaymentInterface.
        :type: float
        """

        self._base_amount_paid_online = base_amount_paid_online

    @property
    def base_amount_refunded(self):
        """
        Gets the base_amount_refunded of this SalesDataOrderPaymentInterface.
        Base amount refunded.

        :return: The base_amount_refunded of this SalesDataOrderPaymentInterface.
        :rtype: float
        """
        return self._base_amount_refunded

    @base_amount_refunded.setter
    def base_amount_refunded(self, base_amount_refunded):
        """
        Sets the base_amount_refunded of this SalesDataOrderPaymentInterface.
        Base amount refunded.

        :param base_amount_refunded: The base_amount_refunded of this SalesDataOrderPaymentInterface.
        :type: float
        """

        self._base_amount_refunded = base_amount_refunded

    @property
    def base_amount_refunded_online(self):
        """
        Gets the base_amount_refunded_online of this SalesDataOrderPaymentInterface.
        Base amount refunded online.

        :return: The base_amount_refunded_online of this SalesDataOrderPaymentInterface.
        :rtype: float
        """
        return self._base_amount_refunded_online

    @base_amount_refunded_online.setter
    def base_amount_refunded_online(self, base_amount_refunded_online):
        """
        Sets the base_amount_refunded_online of this SalesDataOrderPaymentInterface.
        Base amount refunded online.

        :param base_amount_refunded_online: The base_amount_refunded_online of this SalesDataOrderPaymentInterface.
        :type: float
        """

        self._base_amount_refunded_online = base_amount_refunded_online

    @property
    def base_shipping_amount(self):
        """
        Gets the base_shipping_amount of this SalesDataOrderPaymentInterface.
        Base shipping amount.

        :return: The base_shipping_amount of this SalesDataOrderPaymentInterface.
        :rtype: float
        """
        return self._base_shipping_amount

    @base_shipping_amount.setter
    def base_shipping_amount(self, base_shipping_amount):
        """
        Sets the base_shipping_amount of this SalesDataOrderPaymentInterface.
        Base shipping amount.

        :param base_shipping_amount: The base_shipping_amount of this SalesDataOrderPaymentInterface.
        :type: float
        """

        self._base_shipping_amount = base_shipping_amount

    @property
    def base_shipping_captured(self):
        """
        Gets the base_shipping_captured of this SalesDataOrderPaymentInterface.
        Base shipping captured amount.

        :return: The base_shipping_captured of this SalesDataOrderPaymentInterface.
        :rtype: float
        """
        return self._base_shipping_captured

    @base_shipping_captured.setter
    def base_shipping_captured(self, base_shipping_captured):
        """
        Sets the base_shipping_captured of this SalesDataOrderPaymentInterface.
        Base shipping captured amount.

        :param base_shipping_captured: The base_shipping_captured of this SalesDataOrderPaymentInterface.
        :type: float
        """

        self._base_shipping_captured = base_shipping_captured

    @property
    def base_shipping_refunded(self):
        """
        Gets the base_shipping_refunded of this SalesDataOrderPaymentInterface.
        Base shipping refunded amount.

        :return: The base_shipping_refunded of this SalesDataOrderPaymentInterface.
        :rtype: float
        """
        return self._base_shipping_refunded

    @base_shipping_refunded.setter
    def base_shipping_refunded(self, base_shipping_refunded):
        """
        Sets the base_shipping_refunded of this SalesDataOrderPaymentInterface.
        Base shipping refunded amount.

        :param base_shipping_refunded: The base_shipping_refunded of this SalesDataOrderPaymentInterface.
        :type: float
        """

        self._base_shipping_refunded = base_shipping_refunded

    @property
    def cc_approval(self):
        """
        Gets the cc_approval of this SalesDataOrderPaymentInterface.
        Credit card approval.

        :return: The cc_approval of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._cc_approval

    @cc_approval.setter
    def cc_approval(self, cc_approval):
        """
        Sets the cc_approval of this SalesDataOrderPaymentInterface.
        Credit card approval.

        :param cc_approval: The cc_approval of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._cc_approval = cc_approval

    @property
    def cc_avs_status(self):
        """
        Gets the cc_avs_status of this SalesDataOrderPaymentInterface.
        Credit card avs status.

        :return: The cc_avs_status of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._cc_avs_status

    @cc_avs_status.setter
    def cc_avs_status(self, cc_avs_status):
        """
        Sets the cc_avs_status of this SalesDataOrderPaymentInterface.
        Credit card avs status.

        :param cc_avs_status: The cc_avs_status of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._cc_avs_status = cc_avs_status

    @property
    def cc_cid_status(self):
        """
        Gets the cc_cid_status of this SalesDataOrderPaymentInterface.
        Credit card CID status.

        :return: The cc_cid_status of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._cc_cid_status

    @cc_cid_status.setter
    def cc_cid_status(self, cc_cid_status):
        """
        Sets the cc_cid_status of this SalesDataOrderPaymentInterface.
        Credit card CID status.

        :param cc_cid_status: The cc_cid_status of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._cc_cid_status = cc_cid_status

    @property
    def cc_debug_request_body(self):
        """
        Gets the cc_debug_request_body of this SalesDataOrderPaymentInterface.
        Credit card debug request body.

        :return: The cc_debug_request_body of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._cc_debug_request_body

    @cc_debug_request_body.setter
    def cc_debug_request_body(self, cc_debug_request_body):
        """
        Sets the cc_debug_request_body of this SalesDataOrderPaymentInterface.
        Credit card debug request body.

        :param cc_debug_request_body: The cc_debug_request_body of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._cc_debug_request_body = cc_debug_request_body

    @property
    def cc_debug_response_body(self):
        """
        Gets the cc_debug_response_body of this SalesDataOrderPaymentInterface.
        Credit card debug response body.

        :return: The cc_debug_response_body of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._cc_debug_response_body

    @cc_debug_response_body.setter
    def cc_debug_response_body(self, cc_debug_response_body):
        """
        Sets the cc_debug_response_body of this SalesDataOrderPaymentInterface.
        Credit card debug response body.

        :param cc_debug_response_body: The cc_debug_response_body of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._cc_debug_response_body = cc_debug_response_body

    @property
    def cc_debug_response_serialized(self):
        """
        Gets the cc_debug_response_serialized of this SalesDataOrderPaymentInterface.
        Credit card debug response serialized.

        :return: The cc_debug_response_serialized of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._cc_debug_response_serialized

    @cc_debug_response_serialized.setter
    def cc_debug_response_serialized(self, cc_debug_response_serialized):
        """
        Sets the cc_debug_response_serialized of this SalesDataOrderPaymentInterface.
        Credit card debug response serialized.

        :param cc_debug_response_serialized: The cc_debug_response_serialized of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._cc_debug_response_serialized = cc_debug_response_serialized

    @property
    def cc_exp_month(self):
        """
        Gets the cc_exp_month of this SalesDataOrderPaymentInterface.
        Credit card expiration month.

        :return: The cc_exp_month of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._cc_exp_month

    @cc_exp_month.setter
    def cc_exp_month(self, cc_exp_month):
        """
        Sets the cc_exp_month of this SalesDataOrderPaymentInterface.
        Credit card expiration month.

        :param cc_exp_month: The cc_exp_month of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._cc_exp_month = cc_exp_month

    @property
    def cc_exp_year(self):
        """
        Gets the cc_exp_year of this SalesDataOrderPaymentInterface.
        Credit card expiration year.

        :return: The cc_exp_year of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._cc_exp_year

    @cc_exp_year.setter
    def cc_exp_year(self, cc_exp_year):
        """
        Sets the cc_exp_year of this SalesDataOrderPaymentInterface.
        Credit card expiration year.

        :param cc_exp_year: The cc_exp_year of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._cc_exp_year = cc_exp_year

    @property
    def cc_last4(self):
        """
        Gets the cc_last4 of this SalesDataOrderPaymentInterface.
        Last four digits of the credit card.

        :return: The cc_last4 of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._cc_last4

    @cc_last4.setter
    def cc_last4(self, cc_last4):
        """
        Sets the cc_last4 of this SalesDataOrderPaymentInterface.
        Last four digits of the credit card.

        :param cc_last4: The cc_last4 of this SalesDataOrderPaymentInterface.
        :type: str
        """
        if cc_last4 is None:
            raise ValueError("Invalid value for `cc_last4`, must not be `None`")

        self._cc_last4 = cc_last4

    @property
    def cc_number_enc(self):
        """
        Gets the cc_number_enc of this SalesDataOrderPaymentInterface.
        Encrypted credit card number.

        :return: The cc_number_enc of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._cc_number_enc

    @cc_number_enc.setter
    def cc_number_enc(self, cc_number_enc):
        """
        Sets the cc_number_enc of this SalesDataOrderPaymentInterface.
        Encrypted credit card number.

        :param cc_number_enc: The cc_number_enc of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._cc_number_enc = cc_number_enc

    @property
    def cc_owner(self):
        """
        Gets the cc_owner of this SalesDataOrderPaymentInterface.
        Credit card number.

        :return: The cc_owner of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._cc_owner

    @cc_owner.setter
    def cc_owner(self, cc_owner):
        """
        Sets the cc_owner of this SalesDataOrderPaymentInterface.
        Credit card number.

        :param cc_owner: The cc_owner of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._cc_owner = cc_owner

    @property
    def cc_secure_verify(self):
        """
        Gets the cc_secure_verify of this SalesDataOrderPaymentInterface.
        Credit card secure verify.

        :return: The cc_secure_verify of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._cc_secure_verify

    @cc_secure_verify.setter
    def cc_secure_verify(self, cc_secure_verify):
        """
        Sets the cc_secure_verify of this SalesDataOrderPaymentInterface.
        Credit card secure verify.

        :param cc_secure_verify: The cc_secure_verify of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._cc_secure_verify = cc_secure_verify

    @property
    def cc_ss_issue(self):
        """
        Gets the cc_ss_issue of this SalesDataOrderPaymentInterface.
        Credit card SS issue.

        :return: The cc_ss_issue of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._cc_ss_issue

    @cc_ss_issue.setter
    def cc_ss_issue(self, cc_ss_issue):
        """
        Sets the cc_ss_issue of this SalesDataOrderPaymentInterface.
        Credit card SS issue.

        :param cc_ss_issue: The cc_ss_issue of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._cc_ss_issue = cc_ss_issue

    @property
    def cc_ss_start_month(self):
        """
        Gets the cc_ss_start_month of this SalesDataOrderPaymentInterface.
        Credit card SS start month.

        :return: The cc_ss_start_month of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._cc_ss_start_month

    @cc_ss_start_month.setter
    def cc_ss_start_month(self, cc_ss_start_month):
        """
        Sets the cc_ss_start_month of this SalesDataOrderPaymentInterface.
        Credit card SS start month.

        :param cc_ss_start_month: The cc_ss_start_month of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._cc_ss_start_month = cc_ss_start_month

    @property
    def cc_ss_start_year(self):
        """
        Gets the cc_ss_start_year of this SalesDataOrderPaymentInterface.
        Credit card SS start year.

        :return: The cc_ss_start_year of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._cc_ss_start_year

    @cc_ss_start_year.setter
    def cc_ss_start_year(self, cc_ss_start_year):
        """
        Sets the cc_ss_start_year of this SalesDataOrderPaymentInterface.
        Credit card SS start year.

        :param cc_ss_start_year: The cc_ss_start_year of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._cc_ss_start_year = cc_ss_start_year

    @property
    def cc_status(self):
        """
        Gets the cc_status of this SalesDataOrderPaymentInterface.
        Credit card status.

        :return: The cc_status of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._cc_status

    @cc_status.setter
    def cc_status(self, cc_status):
        """
        Sets the cc_status of this SalesDataOrderPaymentInterface.
        Credit card status.

        :param cc_status: The cc_status of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._cc_status = cc_status

    @property
    def cc_status_description(self):
        """
        Gets the cc_status_description of this SalesDataOrderPaymentInterface.
        Credit card status description.

        :return: The cc_status_description of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._cc_status_description

    @cc_status_description.setter
    def cc_status_description(self, cc_status_description):
        """
        Sets the cc_status_description of this SalesDataOrderPaymentInterface.
        Credit card status description.

        :param cc_status_description: The cc_status_description of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._cc_status_description = cc_status_description

    @property
    def cc_trans_id(self):
        """
        Gets the cc_trans_id of this SalesDataOrderPaymentInterface.
        Credit card transaction ID.

        :return: The cc_trans_id of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._cc_trans_id

    @cc_trans_id.setter
    def cc_trans_id(self, cc_trans_id):
        """
        Sets the cc_trans_id of this SalesDataOrderPaymentInterface.
        Credit card transaction ID.

        :param cc_trans_id: The cc_trans_id of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._cc_trans_id = cc_trans_id

    @property
    def cc_type(self):
        """
        Gets the cc_type of this SalesDataOrderPaymentInterface.
        Credit card type.

        :return: The cc_type of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._cc_type

    @cc_type.setter
    def cc_type(self, cc_type):
        """
        Sets the cc_type of this SalesDataOrderPaymentInterface.
        Credit card type.

        :param cc_type: The cc_type of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._cc_type = cc_type

    @property
    def echeck_account_name(self):
        """
        Gets the echeck_account_name of this SalesDataOrderPaymentInterface.
        eCheck account name.

        :return: The echeck_account_name of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._echeck_account_name

    @echeck_account_name.setter
    def echeck_account_name(self, echeck_account_name):
        """
        Sets the echeck_account_name of this SalesDataOrderPaymentInterface.
        eCheck account name.

        :param echeck_account_name: The echeck_account_name of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._echeck_account_name = echeck_account_name

    @property
    def echeck_account_type(self):
        """
        Gets the echeck_account_type of this SalesDataOrderPaymentInterface.
        eCheck account type.

        :return: The echeck_account_type of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._echeck_account_type

    @echeck_account_type.setter
    def echeck_account_type(self, echeck_account_type):
        """
        Sets the echeck_account_type of this SalesDataOrderPaymentInterface.
        eCheck account type.

        :param echeck_account_type: The echeck_account_type of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._echeck_account_type = echeck_account_type

    @property
    def echeck_bank_name(self):
        """
        Gets the echeck_bank_name of this SalesDataOrderPaymentInterface.
        eCheck bank name.

        :return: The echeck_bank_name of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._echeck_bank_name

    @echeck_bank_name.setter
    def echeck_bank_name(self, echeck_bank_name):
        """
        Sets the echeck_bank_name of this SalesDataOrderPaymentInterface.
        eCheck bank name.

        :param echeck_bank_name: The echeck_bank_name of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._echeck_bank_name = echeck_bank_name

    @property
    def echeck_routing_number(self):
        """
        Gets the echeck_routing_number of this SalesDataOrderPaymentInterface.
        eCheck routing number.

        :return: The echeck_routing_number of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._echeck_routing_number

    @echeck_routing_number.setter
    def echeck_routing_number(self, echeck_routing_number):
        """
        Sets the echeck_routing_number of this SalesDataOrderPaymentInterface.
        eCheck routing number.

        :param echeck_routing_number: The echeck_routing_number of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._echeck_routing_number = echeck_routing_number

    @property
    def echeck_type(self):
        """
        Gets the echeck_type of this SalesDataOrderPaymentInterface.
        eCheck type.

        :return: The echeck_type of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._echeck_type

    @echeck_type.setter
    def echeck_type(self, echeck_type):
        """
        Sets the echeck_type of this SalesDataOrderPaymentInterface.
        eCheck type.

        :param echeck_type: The echeck_type of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._echeck_type = echeck_type

    @property
    def entity_id(self):
        """
        Gets the entity_id of this SalesDataOrderPaymentInterface.
        Entity ID.

        :return: The entity_id of this SalesDataOrderPaymentInterface.
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this SalesDataOrderPaymentInterface.
        Entity ID.

        :param entity_id: The entity_id of this SalesDataOrderPaymentInterface.
        :type: int
        """

        self._entity_id = entity_id

    @property
    def last_trans_id(self):
        """
        Gets the last_trans_id of this SalesDataOrderPaymentInterface.
        Last transaction ID.

        :return: The last_trans_id of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._last_trans_id

    @last_trans_id.setter
    def last_trans_id(self, last_trans_id):
        """
        Sets the last_trans_id of this SalesDataOrderPaymentInterface.
        Last transaction ID.

        :param last_trans_id: The last_trans_id of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._last_trans_id = last_trans_id

    @property
    def method(self):
        """
        Gets the method of this SalesDataOrderPaymentInterface.
        Method.

        :return: The method of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """
        Sets the method of this SalesDataOrderPaymentInterface.
        Method.

        :param method: The method of this SalesDataOrderPaymentInterface.
        :type: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")

        self._method = method

    @property
    def parent_id(self):
        """
        Gets the parent_id of this SalesDataOrderPaymentInterface.
        Parent ID.

        :return: The parent_id of this SalesDataOrderPaymentInterface.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """
        Sets the parent_id of this SalesDataOrderPaymentInterface.
        Parent ID.

        :param parent_id: The parent_id of this SalesDataOrderPaymentInterface.
        :type: int
        """

        self._parent_id = parent_id

    @property
    def po_number(self):
        """
        Gets the po_number of this SalesDataOrderPaymentInterface.
        PO number.

        :return: The po_number of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._po_number

    @po_number.setter
    def po_number(self, po_number):
        """
        Sets the po_number of this SalesDataOrderPaymentInterface.
        PO number.

        :param po_number: The po_number of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._po_number = po_number

    @property
    def protection_eligibility(self):
        """
        Gets the protection_eligibility of this SalesDataOrderPaymentInterface.
        Protection eligibility.

        :return: The protection_eligibility of this SalesDataOrderPaymentInterface.
        :rtype: str
        """
        return self._protection_eligibility

    @protection_eligibility.setter
    def protection_eligibility(self, protection_eligibility):
        """
        Sets the protection_eligibility of this SalesDataOrderPaymentInterface.
        Protection eligibility.

        :param protection_eligibility: The protection_eligibility of this SalesDataOrderPaymentInterface.
        :type: str
        """

        self._protection_eligibility = protection_eligibility

    @property
    def quote_payment_id(self):
        """
        Gets the quote_payment_id of this SalesDataOrderPaymentInterface.
        Quote payment ID.

        :return: The quote_payment_id of this SalesDataOrderPaymentInterface.
        :rtype: int
        """
        return self._quote_payment_id

    @quote_payment_id.setter
    def quote_payment_id(self, quote_payment_id):
        """
        Sets the quote_payment_id of this SalesDataOrderPaymentInterface.
        Quote payment ID.

        :param quote_payment_id: The quote_payment_id of this SalesDataOrderPaymentInterface.
        :type: int
        """

        self._quote_payment_id = quote_payment_id

    @property
    def shipping_amount(self):
        """
        Gets the shipping_amount of this SalesDataOrderPaymentInterface.
        Shipping amount.

        :return: The shipping_amount of this SalesDataOrderPaymentInterface.
        :rtype: float
        """
        return self._shipping_amount

    @shipping_amount.setter
    def shipping_amount(self, shipping_amount):
        """
        Sets the shipping_amount of this SalesDataOrderPaymentInterface.
        Shipping amount.

        :param shipping_amount: The shipping_amount of this SalesDataOrderPaymentInterface.
        :type: float
        """

        self._shipping_amount = shipping_amount

    @property
    def shipping_captured(self):
        """
        Gets the shipping_captured of this SalesDataOrderPaymentInterface.
        Shipping captured.

        :return: The shipping_captured of this SalesDataOrderPaymentInterface.
        :rtype: float
        """
        return self._shipping_captured

    @shipping_captured.setter
    def shipping_captured(self, shipping_captured):
        """
        Sets the shipping_captured of this SalesDataOrderPaymentInterface.
        Shipping captured.

        :param shipping_captured: The shipping_captured of this SalesDataOrderPaymentInterface.
        :type: float
        """

        self._shipping_captured = shipping_captured

    @property
    def shipping_refunded(self):
        """
        Gets the shipping_refunded of this SalesDataOrderPaymentInterface.
        Shipping refunded.

        :return: The shipping_refunded of this SalesDataOrderPaymentInterface.
        :rtype: float
        """
        return self._shipping_refunded

    @shipping_refunded.setter
    def shipping_refunded(self, shipping_refunded):
        """
        Sets the shipping_refunded of this SalesDataOrderPaymentInterface.
        Shipping refunded.

        :param shipping_refunded: The shipping_refunded of this SalesDataOrderPaymentInterface.
        :type: float
        """

        self._shipping_refunded = shipping_refunded

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this SalesDataOrderPaymentInterface.

        :return: The extension_attributes of this SalesDataOrderPaymentInterface.
        :rtype: SalesDataOrderPaymentExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this SalesDataOrderPaymentInterface.

        :param extension_attributes: The extension_attributes of this SalesDataOrderPaymentInterface.
        :type: SalesDataOrderPaymentExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SalesDataOrderPaymentInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
