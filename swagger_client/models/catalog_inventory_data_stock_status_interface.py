# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CatalogInventoryDataStockStatusInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_id': 'int',
        'stock_id': 'int',
        'qty': 'int',
        'stock_status': 'int',
        'stock_item': 'CatalogInventoryDataStockItemInterface',
        'extension_attributes': 'CatalogInventoryDataStockStatusExtensionInterface'
    }

    attribute_map = {
        'product_id': 'product_id',
        'stock_id': 'stock_id',
        'qty': 'qty',
        'stock_status': 'stock_status',
        'stock_item': 'stock_item',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, product_id=None, stock_id=None, qty=None, stock_status=None, stock_item=None, extension_attributes=None):
        """
        CatalogInventoryDataStockStatusInterface - a model defined in Swagger
        """

        self._product_id = None
        self._stock_id = None
        self._qty = None
        self._stock_status = None
        self._stock_item = None
        self._extension_attributes = None

        self.product_id = product_id
        self.stock_id = stock_id
        self.qty = qty
        self.stock_status = stock_status
        self.stock_item = stock_item
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def product_id(self):
        """
        Gets the product_id of this CatalogInventoryDataStockStatusInterface.

        :return: The product_id of this CatalogInventoryDataStockStatusInterface.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """
        Sets the product_id of this CatalogInventoryDataStockStatusInterface.

        :param product_id: The product_id of this CatalogInventoryDataStockStatusInterface.
        :type: int
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def stock_id(self):
        """
        Gets the stock_id of this CatalogInventoryDataStockStatusInterface.

        :return: The stock_id of this CatalogInventoryDataStockStatusInterface.
        :rtype: int
        """
        return self._stock_id

    @stock_id.setter
    def stock_id(self, stock_id):
        """
        Sets the stock_id of this CatalogInventoryDataStockStatusInterface.

        :param stock_id: The stock_id of this CatalogInventoryDataStockStatusInterface.
        :type: int
        """
        if stock_id is None:
            raise ValueError("Invalid value for `stock_id`, must not be `None`")

        self._stock_id = stock_id

    @property
    def qty(self):
        """
        Gets the qty of this CatalogInventoryDataStockStatusInterface.

        :return: The qty of this CatalogInventoryDataStockStatusInterface.
        :rtype: int
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """
        Sets the qty of this CatalogInventoryDataStockStatusInterface.

        :param qty: The qty of this CatalogInventoryDataStockStatusInterface.
        :type: int
        """
        if qty is None:
            raise ValueError("Invalid value for `qty`, must not be `None`")

        self._qty = qty

    @property
    def stock_status(self):
        """
        Gets the stock_status of this CatalogInventoryDataStockStatusInterface.

        :return: The stock_status of this CatalogInventoryDataStockStatusInterface.
        :rtype: int
        """
        return self._stock_status

    @stock_status.setter
    def stock_status(self, stock_status):
        """
        Sets the stock_status of this CatalogInventoryDataStockStatusInterface.

        :param stock_status: The stock_status of this CatalogInventoryDataStockStatusInterface.
        :type: int
        """
        if stock_status is None:
            raise ValueError("Invalid value for `stock_status`, must not be `None`")

        self._stock_status = stock_status

    @property
    def stock_item(self):
        """
        Gets the stock_item of this CatalogInventoryDataStockStatusInterface.

        :return: The stock_item of this CatalogInventoryDataStockStatusInterface.
        :rtype: CatalogInventoryDataStockItemInterface
        """
        return self._stock_item

    @stock_item.setter
    def stock_item(self, stock_item):
        """
        Sets the stock_item of this CatalogInventoryDataStockStatusInterface.

        :param stock_item: The stock_item of this CatalogInventoryDataStockStatusInterface.
        :type: CatalogInventoryDataStockItemInterface
        """
        if stock_item is None:
            raise ValueError("Invalid value for `stock_item`, must not be `None`")

        self._stock_item = stock_item

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this CatalogInventoryDataStockStatusInterface.

        :return: The extension_attributes of this CatalogInventoryDataStockStatusInterface.
        :rtype: CatalogInventoryDataStockStatusExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this CatalogInventoryDataStockStatusInterface.

        :param extension_attributes: The extension_attributes of this CatalogInventoryDataStockStatusInterface.
        :type: CatalogInventoryDataStockStatusExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CatalogInventoryDataStockStatusInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
