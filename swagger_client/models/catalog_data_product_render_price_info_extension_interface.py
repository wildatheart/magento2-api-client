# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CatalogDataProductRenderPriceInfoExtensionInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'msrp': 'MsrpDataProductRenderMsrpPriceInfoInterface',
        'tax_adjustments': 'CatalogDataProductRenderPriceInfoInterface',
        'weee_attributes': 'list[WeeeDataProductRenderWeeeAdjustmentAttributeInterface]',
        'weee_adjustment': 'str'
    }

    attribute_map = {
        'msrp': 'msrp',
        'tax_adjustments': 'tax_adjustments',
        'weee_attributes': 'weee_attributes',
        'weee_adjustment': 'weee_adjustment'
    }

    def __init__(self, msrp=None, tax_adjustments=None, weee_attributes=None, weee_adjustment=None):
        """
        CatalogDataProductRenderPriceInfoExtensionInterface - a model defined in Swagger
        """

        self._msrp = None
        self._tax_adjustments = None
        self._weee_attributes = None
        self._weee_adjustment = None

        if msrp is not None:
          self.msrp = msrp
        if tax_adjustments is not None:
          self.tax_adjustments = tax_adjustments
        if weee_attributes is not None:
          self.weee_attributes = weee_attributes
        if weee_adjustment is not None:
          self.weee_adjustment = weee_adjustment

    @property
    def msrp(self):
        """
        Gets the msrp of this CatalogDataProductRenderPriceInfoExtensionInterface.

        :return: The msrp of this CatalogDataProductRenderPriceInfoExtensionInterface.
        :rtype: MsrpDataProductRenderMsrpPriceInfoInterface
        """
        return self._msrp

    @msrp.setter
    def msrp(self, msrp):
        """
        Sets the msrp of this CatalogDataProductRenderPriceInfoExtensionInterface.

        :param msrp: The msrp of this CatalogDataProductRenderPriceInfoExtensionInterface.
        :type: MsrpDataProductRenderMsrpPriceInfoInterface
        """

        self._msrp = msrp

    @property
    def tax_adjustments(self):
        """
        Gets the tax_adjustments of this CatalogDataProductRenderPriceInfoExtensionInterface.

        :return: The tax_adjustments of this CatalogDataProductRenderPriceInfoExtensionInterface.
        :rtype: CatalogDataProductRenderPriceInfoInterface
        """
        return self._tax_adjustments

    @tax_adjustments.setter
    def tax_adjustments(self, tax_adjustments):
        """
        Sets the tax_adjustments of this CatalogDataProductRenderPriceInfoExtensionInterface.

        :param tax_adjustments: The tax_adjustments of this CatalogDataProductRenderPriceInfoExtensionInterface.
        :type: CatalogDataProductRenderPriceInfoInterface
        """

        self._tax_adjustments = tax_adjustments

    @property
    def weee_attributes(self):
        """
        Gets the weee_attributes of this CatalogDataProductRenderPriceInfoExtensionInterface.

        :return: The weee_attributes of this CatalogDataProductRenderPriceInfoExtensionInterface.
        :rtype: list[WeeeDataProductRenderWeeeAdjustmentAttributeInterface]
        """
        return self._weee_attributes

    @weee_attributes.setter
    def weee_attributes(self, weee_attributes):
        """
        Sets the weee_attributes of this CatalogDataProductRenderPriceInfoExtensionInterface.

        :param weee_attributes: The weee_attributes of this CatalogDataProductRenderPriceInfoExtensionInterface.
        :type: list[WeeeDataProductRenderWeeeAdjustmentAttributeInterface]
        """

        self._weee_attributes = weee_attributes

    @property
    def weee_adjustment(self):
        """
        Gets the weee_adjustment of this CatalogDataProductRenderPriceInfoExtensionInterface.

        :return: The weee_adjustment of this CatalogDataProductRenderPriceInfoExtensionInterface.
        :rtype: str
        """
        return self._weee_adjustment

    @weee_adjustment.setter
    def weee_adjustment(self, weee_adjustment):
        """
        Sets the weee_adjustment of this CatalogDataProductRenderPriceInfoExtensionInterface.

        :param weee_adjustment: The weee_adjustment of this CatalogDataProductRenderPriceInfoExtensionInterface.
        :type: str
        """

        self._weee_adjustment = weee_adjustment

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CatalogDataProductRenderPriceInfoExtensionInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
