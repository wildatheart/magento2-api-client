# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TaxDataGrandTotalDetailsInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'rates': 'list[TaxDataGrandTotalRatesInterface]',
        'group_id': 'int'
    }

    attribute_map = {
        'amount': 'amount',
        'rates': 'rates',
        'group_id': 'group_id'
    }

    def __init__(self, amount=None, rates=None, group_id=None):
        """
        TaxDataGrandTotalDetailsInterface - a model defined in Swagger
        """

        self._amount = None
        self._rates = None
        self._group_id = None

        self.amount = amount
        self.rates = rates
        self.group_id = group_id

    @property
    def amount(self):
        """
        Gets the amount of this TaxDataGrandTotalDetailsInterface.
        Tax amount value

        :return: The amount of this TaxDataGrandTotalDetailsInterface.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this TaxDataGrandTotalDetailsInterface.
        Tax amount value

        :param amount: The amount of this TaxDataGrandTotalDetailsInterface.
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def rates(self):
        """
        Gets the rates of this TaxDataGrandTotalDetailsInterface.
        Tax rates info

        :return: The rates of this TaxDataGrandTotalDetailsInterface.
        :rtype: list[TaxDataGrandTotalRatesInterface]
        """
        return self._rates

    @rates.setter
    def rates(self, rates):
        """
        Sets the rates of this TaxDataGrandTotalDetailsInterface.
        Tax rates info

        :param rates: The rates of this TaxDataGrandTotalDetailsInterface.
        :type: list[TaxDataGrandTotalRatesInterface]
        """
        if rates is None:
            raise ValueError("Invalid value for `rates`, must not be `None`")

        self._rates = rates

    @property
    def group_id(self):
        """
        Gets the group_id of this TaxDataGrandTotalDetailsInterface.
        Group identifier

        :return: The group_id of this TaxDataGrandTotalDetailsInterface.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """
        Sets the group_id of this TaxDataGrandTotalDetailsInterface.
        Group identifier

        :param group_id: The group_id of this TaxDataGrandTotalDetailsInterface.
        :type: int
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")

        self._group_id = group_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TaxDataGrandTotalDetailsInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
