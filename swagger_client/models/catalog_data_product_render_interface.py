# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CatalogDataProductRenderInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'add_to_cart_button': 'CatalogDataProductRenderButtonInterface',
        'add_to_compare_button': 'CatalogDataProductRenderButtonInterface',
        'price_info': 'CatalogDataProductRenderPriceInfoInterface',
        'images': 'list[CatalogDataProductRenderImageInterface]',
        'url': 'str',
        'id': 'int',
        'name': 'str',
        'type': 'str',
        'is_salable': 'str',
        'store_id': 'int',
        'currency_code': 'str',
        'extension_attributes': 'CatalogDataProductRenderExtensionInterface'
    }

    attribute_map = {
        'add_to_cart_button': 'add_to_cart_button',
        'add_to_compare_button': 'add_to_compare_button',
        'price_info': 'price_info',
        'images': 'images',
        'url': 'url',
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'is_salable': 'is_salable',
        'store_id': 'store_id',
        'currency_code': 'currency_code',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, add_to_cart_button=None, add_to_compare_button=None, price_info=None, images=None, url=None, id=None, name=None, type=None, is_salable=None, store_id=None, currency_code=None, extension_attributes=None):
        """
        CatalogDataProductRenderInterface - a model defined in Swagger
        """

        self._add_to_cart_button = None
        self._add_to_compare_button = None
        self._price_info = None
        self._images = None
        self._url = None
        self._id = None
        self._name = None
        self._type = None
        self._is_salable = None
        self._store_id = None
        self._currency_code = None
        self._extension_attributes = None

        self.add_to_cart_button = add_to_cart_button
        self.add_to_compare_button = add_to_compare_button
        self.price_info = price_info
        self.images = images
        self.url = url
        self.id = id
        self.name = name
        self.type = type
        self.is_salable = is_salable
        self.store_id = store_id
        self.currency_code = currency_code
        self.extension_attributes = extension_attributes

    @property
    def add_to_cart_button(self):
        """
        Gets the add_to_cart_button of this CatalogDataProductRenderInterface.

        :return: The add_to_cart_button of this CatalogDataProductRenderInterface.
        :rtype: CatalogDataProductRenderButtonInterface
        """
        return self._add_to_cart_button

    @add_to_cart_button.setter
    def add_to_cart_button(self, add_to_cart_button):
        """
        Sets the add_to_cart_button of this CatalogDataProductRenderInterface.

        :param add_to_cart_button: The add_to_cart_button of this CatalogDataProductRenderInterface.
        :type: CatalogDataProductRenderButtonInterface
        """
        if add_to_cart_button is None:
            raise ValueError("Invalid value for `add_to_cart_button`, must not be `None`")

        self._add_to_cart_button = add_to_cart_button

    @property
    def add_to_compare_button(self):
        """
        Gets the add_to_compare_button of this CatalogDataProductRenderInterface.

        :return: The add_to_compare_button of this CatalogDataProductRenderInterface.
        :rtype: CatalogDataProductRenderButtonInterface
        """
        return self._add_to_compare_button

    @add_to_compare_button.setter
    def add_to_compare_button(self, add_to_compare_button):
        """
        Sets the add_to_compare_button of this CatalogDataProductRenderInterface.

        :param add_to_compare_button: The add_to_compare_button of this CatalogDataProductRenderInterface.
        :type: CatalogDataProductRenderButtonInterface
        """
        if add_to_compare_button is None:
            raise ValueError("Invalid value for `add_to_compare_button`, must not be `None`")

        self._add_to_compare_button = add_to_compare_button

    @property
    def price_info(self):
        """
        Gets the price_info of this CatalogDataProductRenderInterface.

        :return: The price_info of this CatalogDataProductRenderInterface.
        :rtype: CatalogDataProductRenderPriceInfoInterface
        """
        return self._price_info

    @price_info.setter
    def price_info(self, price_info):
        """
        Sets the price_info of this CatalogDataProductRenderInterface.

        :param price_info: The price_info of this CatalogDataProductRenderInterface.
        :type: CatalogDataProductRenderPriceInfoInterface
        """
        if price_info is None:
            raise ValueError("Invalid value for `price_info`, must not be `None`")

        self._price_info = price_info

    @property
    def images(self):
        """
        Gets the images of this CatalogDataProductRenderInterface.
        Enough information, that needed to render image on front

        :return: The images of this CatalogDataProductRenderInterface.
        :rtype: list[CatalogDataProductRenderImageInterface]
        """
        return self._images

    @images.setter
    def images(self, images):
        """
        Sets the images of this CatalogDataProductRenderInterface.
        Enough information, that needed to render image on front

        :param images: The images of this CatalogDataProductRenderInterface.
        :type: list[CatalogDataProductRenderImageInterface]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")

        self._images = images

    @property
    def url(self):
        """
        Gets the url of this CatalogDataProductRenderInterface.
        Product url

        :return: The url of this CatalogDataProductRenderInterface.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this CatalogDataProductRenderInterface.
        Product url

        :param url: The url of this CatalogDataProductRenderInterface.
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def id(self):
        """
        Gets the id of this CatalogDataProductRenderInterface.
        Product identifier

        :return: The id of this CatalogDataProductRenderInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CatalogDataProductRenderInterface.
        Product identifier

        :param id: The id of this CatalogDataProductRenderInterface.
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this CatalogDataProductRenderInterface.
        Product name

        :return: The name of this CatalogDataProductRenderInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CatalogDataProductRenderInterface.
        Product name

        :param name: The name of this CatalogDataProductRenderInterface.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this CatalogDataProductRenderInterface.
        Product type. Such as bundle, grouped, simple, etc...

        :return: The type of this CatalogDataProductRenderInterface.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this CatalogDataProductRenderInterface.
        Product type. Such as bundle, grouped, simple, etc...

        :param type: The type of this CatalogDataProductRenderInterface.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def is_salable(self):
        """
        Gets the is_salable of this CatalogDataProductRenderInterface.
        Information about product saleability (In Stock)

        :return: The is_salable of this CatalogDataProductRenderInterface.
        :rtype: str
        """
        return self._is_salable

    @is_salable.setter
    def is_salable(self, is_salable):
        """
        Sets the is_salable of this CatalogDataProductRenderInterface.
        Information about product saleability (In Stock)

        :param is_salable: The is_salable of this CatalogDataProductRenderInterface.
        :type: str
        """
        if is_salable is None:
            raise ValueError("Invalid value for `is_salable`, must not be `None`")

        self._is_salable = is_salable

    @property
    def store_id(self):
        """
        Gets the store_id of this CatalogDataProductRenderInterface.
        Information about current store id or requested store id

        :return: The store_id of this CatalogDataProductRenderInterface.
        :rtype: int
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """
        Sets the store_id of this CatalogDataProductRenderInterface.
        Information about current store id or requested store id

        :param store_id: The store_id of this CatalogDataProductRenderInterface.
        :type: int
        """
        if store_id is None:
            raise ValueError("Invalid value for `store_id`, must not be `None`")

        self._store_id = store_id

    @property
    def currency_code(self):
        """
        Gets the currency_code of this CatalogDataProductRenderInterface.
        Current or desired currency code to product

        :return: The currency_code of this CatalogDataProductRenderInterface.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """
        Sets the currency_code of this CatalogDataProductRenderInterface.
        Current or desired currency code to product

        :param currency_code: The currency_code of this CatalogDataProductRenderInterface.
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this CatalogDataProductRenderInterface.

        :return: The extension_attributes of this CatalogDataProductRenderInterface.
        :rtype: CatalogDataProductRenderExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this CatalogDataProductRenderInterface.

        :param extension_attributes: The extension_attributes of this CatalogDataProductRenderInterface.
        :type: CatalogDataProductRenderExtensionInterface
        """
        if extension_attributes is None:
            raise ValueError("Invalid value for `extension_attributes`, must not be `None`")

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CatalogDataProductRenderInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
