# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StoreDataStoreConfigInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'code': 'str',
        'website_id': 'int',
        'locale': 'str',
        'base_currency_code': 'str',
        'default_display_currency_code': 'str',
        'timezone': 'str',
        'weight_unit': 'str',
        'base_url': 'str',
        'base_link_url': 'str',
        'base_static_url': 'str',
        'base_media_url': 'str',
        'secure_base_url': 'str',
        'secure_base_link_url': 'str',
        'secure_base_static_url': 'str',
        'secure_base_media_url': 'str',
        'extension_attributes': 'StoreDataStoreConfigExtensionInterface'
    }

    attribute_map = {
        'id': 'id',
        'code': 'code',
        'website_id': 'website_id',
        'locale': 'locale',
        'base_currency_code': 'base_currency_code',
        'default_display_currency_code': 'default_display_currency_code',
        'timezone': 'timezone',
        'weight_unit': 'weight_unit',
        'base_url': 'base_url',
        'base_link_url': 'base_link_url',
        'base_static_url': 'base_static_url',
        'base_media_url': 'base_media_url',
        'secure_base_url': 'secure_base_url',
        'secure_base_link_url': 'secure_base_link_url',
        'secure_base_static_url': 'secure_base_static_url',
        'secure_base_media_url': 'secure_base_media_url',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, id=None, code=None, website_id=None, locale=None, base_currency_code=None, default_display_currency_code=None, timezone=None, weight_unit=None, base_url=None, base_link_url=None, base_static_url=None, base_media_url=None, secure_base_url=None, secure_base_link_url=None, secure_base_static_url=None, secure_base_media_url=None, extension_attributes=None):
        """
        StoreDataStoreConfigInterface - a model defined in Swagger
        """

        self._id = None
        self._code = None
        self._website_id = None
        self._locale = None
        self._base_currency_code = None
        self._default_display_currency_code = None
        self._timezone = None
        self._weight_unit = None
        self._base_url = None
        self._base_link_url = None
        self._base_static_url = None
        self._base_media_url = None
        self._secure_base_url = None
        self._secure_base_link_url = None
        self._secure_base_static_url = None
        self._secure_base_media_url = None
        self._extension_attributes = None

        self.id = id
        self.code = code
        self.website_id = website_id
        self.locale = locale
        self.base_currency_code = base_currency_code
        self.default_display_currency_code = default_display_currency_code
        self.timezone = timezone
        self.weight_unit = weight_unit
        self.base_url = base_url
        self.base_link_url = base_link_url
        self.base_static_url = base_static_url
        self.base_media_url = base_media_url
        self.secure_base_url = secure_base_url
        self.secure_base_link_url = secure_base_link_url
        self.secure_base_static_url = secure_base_static_url
        self.secure_base_media_url = secure_base_media_url
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def id(self):
        """
        Gets the id of this StoreDataStoreConfigInterface.
        Store id

        :return: The id of this StoreDataStoreConfigInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this StoreDataStoreConfigInterface.
        Store id

        :param id: The id of this StoreDataStoreConfigInterface.
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def code(self):
        """
        Gets the code of this StoreDataStoreConfigInterface.
        Store code

        :return: The code of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this StoreDataStoreConfigInterface.
        Store code

        :param code: The code of this StoreDataStoreConfigInterface.
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def website_id(self):
        """
        Gets the website_id of this StoreDataStoreConfigInterface.
        Website id of the store

        :return: The website_id of this StoreDataStoreConfigInterface.
        :rtype: int
        """
        return self._website_id

    @website_id.setter
    def website_id(self, website_id):
        """
        Sets the website_id of this StoreDataStoreConfigInterface.
        Website id of the store

        :param website_id: The website_id of this StoreDataStoreConfigInterface.
        :type: int
        """
        if website_id is None:
            raise ValueError("Invalid value for `website_id`, must not be `None`")

        self._website_id = website_id

    @property
    def locale(self):
        """
        Gets the locale of this StoreDataStoreConfigInterface.
        Store locale

        :return: The locale of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """
        Sets the locale of this StoreDataStoreConfigInterface.
        Store locale

        :param locale: The locale of this StoreDataStoreConfigInterface.
        :type: str
        """
        if locale is None:
            raise ValueError("Invalid value for `locale`, must not be `None`")

        self._locale = locale

    @property
    def base_currency_code(self):
        """
        Gets the base_currency_code of this StoreDataStoreConfigInterface.
        Base currency code

        :return: The base_currency_code of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._base_currency_code

    @base_currency_code.setter
    def base_currency_code(self, base_currency_code):
        """
        Sets the base_currency_code of this StoreDataStoreConfigInterface.
        Base currency code

        :param base_currency_code: The base_currency_code of this StoreDataStoreConfigInterface.
        :type: str
        """
        if base_currency_code is None:
            raise ValueError("Invalid value for `base_currency_code`, must not be `None`")

        self._base_currency_code = base_currency_code

    @property
    def default_display_currency_code(self):
        """
        Gets the default_display_currency_code of this StoreDataStoreConfigInterface.
        Default display currency code

        :return: The default_display_currency_code of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._default_display_currency_code

    @default_display_currency_code.setter
    def default_display_currency_code(self, default_display_currency_code):
        """
        Sets the default_display_currency_code of this StoreDataStoreConfigInterface.
        Default display currency code

        :param default_display_currency_code: The default_display_currency_code of this StoreDataStoreConfigInterface.
        :type: str
        """
        if default_display_currency_code is None:
            raise ValueError("Invalid value for `default_display_currency_code`, must not be `None`")

        self._default_display_currency_code = default_display_currency_code

    @property
    def timezone(self):
        """
        Gets the timezone of this StoreDataStoreConfigInterface.
        Timezone of the store

        :return: The timezone of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """
        Sets the timezone of this StoreDataStoreConfigInterface.
        Timezone of the store

        :param timezone: The timezone of this StoreDataStoreConfigInterface.
        :type: str
        """
        if timezone is None:
            raise ValueError("Invalid value for `timezone`, must not be `None`")

        self._timezone = timezone

    @property
    def weight_unit(self):
        """
        Gets the weight_unit of this StoreDataStoreConfigInterface.
        The unit of weight

        :return: The weight_unit of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._weight_unit

    @weight_unit.setter
    def weight_unit(self, weight_unit):
        """
        Sets the weight_unit of this StoreDataStoreConfigInterface.
        The unit of weight

        :param weight_unit: The weight_unit of this StoreDataStoreConfigInterface.
        :type: str
        """
        if weight_unit is None:
            raise ValueError("Invalid value for `weight_unit`, must not be `None`")

        self._weight_unit = weight_unit

    @property
    def base_url(self):
        """
        Gets the base_url of this StoreDataStoreConfigInterface.
        Base URL for the store

        :return: The base_url of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """
        Sets the base_url of this StoreDataStoreConfigInterface.
        Base URL for the store

        :param base_url: The base_url of this StoreDataStoreConfigInterface.
        :type: str
        """
        if base_url is None:
            raise ValueError("Invalid value for `base_url`, must not be `None`")

        self._base_url = base_url

    @property
    def base_link_url(self):
        """
        Gets the base_link_url of this StoreDataStoreConfigInterface.
        Base link URL for the store

        :return: The base_link_url of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._base_link_url

    @base_link_url.setter
    def base_link_url(self, base_link_url):
        """
        Sets the base_link_url of this StoreDataStoreConfigInterface.
        Base link URL for the store

        :param base_link_url: The base_link_url of this StoreDataStoreConfigInterface.
        :type: str
        """
        if base_link_url is None:
            raise ValueError("Invalid value for `base_link_url`, must not be `None`")

        self._base_link_url = base_link_url

    @property
    def base_static_url(self):
        """
        Gets the base_static_url of this StoreDataStoreConfigInterface.
        Base static URL for the store

        :return: The base_static_url of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._base_static_url

    @base_static_url.setter
    def base_static_url(self, base_static_url):
        """
        Sets the base_static_url of this StoreDataStoreConfigInterface.
        Base static URL for the store

        :param base_static_url: The base_static_url of this StoreDataStoreConfigInterface.
        :type: str
        """
        if base_static_url is None:
            raise ValueError("Invalid value for `base_static_url`, must not be `None`")

        self._base_static_url = base_static_url

    @property
    def base_media_url(self):
        """
        Gets the base_media_url of this StoreDataStoreConfigInterface.
        Base media URL for the store

        :return: The base_media_url of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._base_media_url

    @base_media_url.setter
    def base_media_url(self, base_media_url):
        """
        Sets the base_media_url of this StoreDataStoreConfigInterface.
        Base media URL for the store

        :param base_media_url: The base_media_url of this StoreDataStoreConfigInterface.
        :type: str
        """
        if base_media_url is None:
            raise ValueError("Invalid value for `base_media_url`, must not be `None`")

        self._base_media_url = base_media_url

    @property
    def secure_base_url(self):
        """
        Gets the secure_base_url of this StoreDataStoreConfigInterface.
        Secure base URL for the store

        :return: The secure_base_url of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._secure_base_url

    @secure_base_url.setter
    def secure_base_url(self, secure_base_url):
        """
        Sets the secure_base_url of this StoreDataStoreConfigInterface.
        Secure base URL for the store

        :param secure_base_url: The secure_base_url of this StoreDataStoreConfigInterface.
        :type: str
        """
        if secure_base_url is None:
            raise ValueError("Invalid value for `secure_base_url`, must not be `None`")

        self._secure_base_url = secure_base_url

    @property
    def secure_base_link_url(self):
        """
        Gets the secure_base_link_url of this StoreDataStoreConfigInterface.
        Secure base link URL for the store

        :return: The secure_base_link_url of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._secure_base_link_url

    @secure_base_link_url.setter
    def secure_base_link_url(self, secure_base_link_url):
        """
        Sets the secure_base_link_url of this StoreDataStoreConfigInterface.
        Secure base link URL for the store

        :param secure_base_link_url: The secure_base_link_url of this StoreDataStoreConfigInterface.
        :type: str
        """
        if secure_base_link_url is None:
            raise ValueError("Invalid value for `secure_base_link_url`, must not be `None`")

        self._secure_base_link_url = secure_base_link_url

    @property
    def secure_base_static_url(self):
        """
        Gets the secure_base_static_url of this StoreDataStoreConfigInterface.
        Secure base static URL for the store

        :return: The secure_base_static_url of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._secure_base_static_url

    @secure_base_static_url.setter
    def secure_base_static_url(self, secure_base_static_url):
        """
        Sets the secure_base_static_url of this StoreDataStoreConfigInterface.
        Secure base static URL for the store

        :param secure_base_static_url: The secure_base_static_url of this StoreDataStoreConfigInterface.
        :type: str
        """
        if secure_base_static_url is None:
            raise ValueError("Invalid value for `secure_base_static_url`, must not be `None`")

        self._secure_base_static_url = secure_base_static_url

    @property
    def secure_base_media_url(self):
        """
        Gets the secure_base_media_url of this StoreDataStoreConfigInterface.
        Secure base media URL for the store

        :return: The secure_base_media_url of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._secure_base_media_url

    @secure_base_media_url.setter
    def secure_base_media_url(self, secure_base_media_url):
        """
        Sets the secure_base_media_url of this StoreDataStoreConfigInterface.
        Secure base media URL for the store

        :param secure_base_media_url: The secure_base_media_url of this StoreDataStoreConfigInterface.
        :type: str
        """
        if secure_base_media_url is None:
            raise ValueError("Invalid value for `secure_base_media_url`, must not be `None`")

        self._secure_base_media_url = secure_base_media_url

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this StoreDataStoreConfigInterface.

        :return: The extension_attributes of this StoreDataStoreConfigInterface.
        :rtype: StoreDataStoreConfigExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this StoreDataStoreConfigInterface.

        :param extension_attributes: The extension_attributes of this StoreDataStoreConfigInterface.
        :type: StoreDataStoreConfigExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StoreDataStoreConfigInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
