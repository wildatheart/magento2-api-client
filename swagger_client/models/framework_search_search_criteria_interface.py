# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FrameworkSearchSearchCriteriaInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_name': 'str',
        'filter_groups': 'list[FrameworkSearchFilterGroup]',
        'sort_orders': 'list[FrameworkSortOrder]',
        'page_size': 'int',
        'current_page': 'int'
    }

    attribute_map = {
        'request_name': 'request_name',
        'filter_groups': 'filter_groups',
        'sort_orders': 'sort_orders',
        'page_size': 'page_size',
        'current_page': 'current_page'
    }

    def __init__(self, request_name=None, filter_groups=None, sort_orders=None, page_size=None, current_page=None):
        """
        FrameworkSearchSearchCriteriaInterface - a model defined in Swagger
        """

        self._request_name = None
        self._filter_groups = None
        self._sort_orders = None
        self._page_size = None
        self._current_page = None

        self.request_name = request_name
        self.filter_groups = filter_groups
        if sort_orders is not None:
          self.sort_orders = sort_orders
        if page_size is not None:
          self.page_size = page_size
        if current_page is not None:
          self.current_page = current_page

    @property
    def request_name(self):
        """
        Gets the request_name of this FrameworkSearchSearchCriteriaInterface.

        :return: The request_name of this FrameworkSearchSearchCriteriaInterface.
        :rtype: str
        """
        return self._request_name

    @request_name.setter
    def request_name(self, request_name):
        """
        Sets the request_name of this FrameworkSearchSearchCriteriaInterface.

        :param request_name: The request_name of this FrameworkSearchSearchCriteriaInterface.
        :type: str
        """
        if request_name is None:
            raise ValueError("Invalid value for `request_name`, must not be `None`")

        self._request_name = request_name

    @property
    def filter_groups(self):
        """
        Gets the filter_groups of this FrameworkSearchSearchCriteriaInterface.
        A list of filter groups.

        :return: The filter_groups of this FrameworkSearchSearchCriteriaInterface.
        :rtype: list[FrameworkSearchFilterGroup]
        """
        return self._filter_groups

    @filter_groups.setter
    def filter_groups(self, filter_groups):
        """
        Sets the filter_groups of this FrameworkSearchSearchCriteriaInterface.
        A list of filter groups.

        :param filter_groups: The filter_groups of this FrameworkSearchSearchCriteriaInterface.
        :type: list[FrameworkSearchFilterGroup]
        """
        if filter_groups is None:
            raise ValueError("Invalid value for `filter_groups`, must not be `None`")

        self._filter_groups = filter_groups

    @property
    def sort_orders(self):
        """
        Gets the sort_orders of this FrameworkSearchSearchCriteriaInterface.
        Sort order.

        :return: The sort_orders of this FrameworkSearchSearchCriteriaInterface.
        :rtype: list[FrameworkSortOrder]
        """
        return self._sort_orders

    @sort_orders.setter
    def sort_orders(self, sort_orders):
        """
        Sets the sort_orders of this FrameworkSearchSearchCriteriaInterface.
        Sort order.

        :param sort_orders: The sort_orders of this FrameworkSearchSearchCriteriaInterface.
        :type: list[FrameworkSortOrder]
        """

        self._sort_orders = sort_orders

    @property
    def page_size(self):
        """
        Gets the page_size of this FrameworkSearchSearchCriteriaInterface.
        Page size.

        :return: The page_size of this FrameworkSearchSearchCriteriaInterface.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """
        Sets the page_size of this FrameworkSearchSearchCriteriaInterface.
        Page size.

        :param page_size: The page_size of this FrameworkSearchSearchCriteriaInterface.
        :type: int
        """

        self._page_size = page_size

    @property
    def current_page(self):
        """
        Gets the current_page of this FrameworkSearchSearchCriteriaInterface.
        Current page.

        :return: The current_page of this FrameworkSearchSearchCriteriaInterface.
        :rtype: int
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """
        Sets the current_page of this FrameworkSearchSearchCriteriaInterface.
        Current page.

        :param current_page: The current_page of this FrameworkSearchSearchCriteriaInterface.
        :type: int
        """

        self._current_page = current_page

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FrameworkSearchSearchCriteriaInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
