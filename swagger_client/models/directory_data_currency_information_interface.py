# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DirectoryDataCurrencyInformationInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_currency_code': 'str',
        'base_currency_symbol': 'str',
        'default_display_currency_code': 'str',
        'default_display_currency_symbol': 'str',
        'available_currency_codes': 'list[str]',
        'exchange_rates': 'list[DirectoryDataExchangeRateInterface]',
        'extension_attributes': 'DirectoryDataCurrencyInformationExtensionInterface'
    }

    attribute_map = {
        'base_currency_code': 'base_currency_code',
        'base_currency_symbol': 'base_currency_symbol',
        'default_display_currency_code': 'default_display_currency_code',
        'default_display_currency_symbol': 'default_display_currency_symbol',
        'available_currency_codes': 'available_currency_codes',
        'exchange_rates': 'exchange_rates',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, base_currency_code=None, base_currency_symbol=None, default_display_currency_code=None, default_display_currency_symbol=None, available_currency_codes=None, exchange_rates=None, extension_attributes=None):
        """
        DirectoryDataCurrencyInformationInterface - a model defined in Swagger
        """

        self._base_currency_code = None
        self._base_currency_symbol = None
        self._default_display_currency_code = None
        self._default_display_currency_symbol = None
        self._available_currency_codes = None
        self._exchange_rates = None
        self._extension_attributes = None

        self.base_currency_code = base_currency_code
        self.base_currency_symbol = base_currency_symbol
        self.default_display_currency_code = default_display_currency_code
        self.default_display_currency_symbol = default_display_currency_symbol
        self.available_currency_codes = available_currency_codes
        self.exchange_rates = exchange_rates
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def base_currency_code(self):
        """
        Gets the base_currency_code of this DirectoryDataCurrencyInformationInterface.
        The base currency code for the store.

        :return: The base_currency_code of this DirectoryDataCurrencyInformationInterface.
        :rtype: str
        """
        return self._base_currency_code

    @base_currency_code.setter
    def base_currency_code(self, base_currency_code):
        """
        Sets the base_currency_code of this DirectoryDataCurrencyInformationInterface.
        The base currency code for the store.

        :param base_currency_code: The base_currency_code of this DirectoryDataCurrencyInformationInterface.
        :type: str
        """
        if base_currency_code is None:
            raise ValueError("Invalid value for `base_currency_code`, must not be `None`")

        self._base_currency_code = base_currency_code

    @property
    def base_currency_symbol(self):
        """
        Gets the base_currency_symbol of this DirectoryDataCurrencyInformationInterface.
        The currency symbol of the base currency for the store.

        :return: The base_currency_symbol of this DirectoryDataCurrencyInformationInterface.
        :rtype: str
        """
        return self._base_currency_symbol

    @base_currency_symbol.setter
    def base_currency_symbol(self, base_currency_symbol):
        """
        Sets the base_currency_symbol of this DirectoryDataCurrencyInformationInterface.
        The currency symbol of the base currency for the store.

        :param base_currency_symbol: The base_currency_symbol of this DirectoryDataCurrencyInformationInterface.
        :type: str
        """
        if base_currency_symbol is None:
            raise ValueError("Invalid value for `base_currency_symbol`, must not be `None`")

        self._base_currency_symbol = base_currency_symbol

    @property
    def default_display_currency_code(self):
        """
        Gets the default_display_currency_code of this DirectoryDataCurrencyInformationInterface.
        The default display currency code for the store.

        :return: The default_display_currency_code of this DirectoryDataCurrencyInformationInterface.
        :rtype: str
        """
        return self._default_display_currency_code

    @default_display_currency_code.setter
    def default_display_currency_code(self, default_display_currency_code):
        """
        Sets the default_display_currency_code of this DirectoryDataCurrencyInformationInterface.
        The default display currency code for the store.

        :param default_display_currency_code: The default_display_currency_code of this DirectoryDataCurrencyInformationInterface.
        :type: str
        """
        if default_display_currency_code is None:
            raise ValueError("Invalid value for `default_display_currency_code`, must not be `None`")

        self._default_display_currency_code = default_display_currency_code

    @property
    def default_display_currency_symbol(self):
        """
        Gets the default_display_currency_symbol of this DirectoryDataCurrencyInformationInterface.
        The currency symbol of the default display currency for the store.

        :return: The default_display_currency_symbol of this DirectoryDataCurrencyInformationInterface.
        :rtype: str
        """
        return self._default_display_currency_symbol

    @default_display_currency_symbol.setter
    def default_display_currency_symbol(self, default_display_currency_symbol):
        """
        Sets the default_display_currency_symbol of this DirectoryDataCurrencyInformationInterface.
        The currency symbol of the default display currency for the store.

        :param default_display_currency_symbol: The default_display_currency_symbol of this DirectoryDataCurrencyInformationInterface.
        :type: str
        """
        if default_display_currency_symbol is None:
            raise ValueError("Invalid value for `default_display_currency_symbol`, must not be `None`")

        self._default_display_currency_symbol = default_display_currency_symbol

    @property
    def available_currency_codes(self):
        """
        Gets the available_currency_codes of this DirectoryDataCurrencyInformationInterface.
        The list of allowed currency codes for the store.

        :return: The available_currency_codes of this DirectoryDataCurrencyInformationInterface.
        :rtype: list[str]
        """
        return self._available_currency_codes

    @available_currency_codes.setter
    def available_currency_codes(self, available_currency_codes):
        """
        Sets the available_currency_codes of this DirectoryDataCurrencyInformationInterface.
        The list of allowed currency codes for the store.

        :param available_currency_codes: The available_currency_codes of this DirectoryDataCurrencyInformationInterface.
        :type: list[str]
        """
        if available_currency_codes is None:
            raise ValueError("Invalid value for `available_currency_codes`, must not be `None`")

        self._available_currency_codes = available_currency_codes

    @property
    def exchange_rates(self):
        """
        Gets the exchange_rates of this DirectoryDataCurrencyInformationInterface.
        The list of exchange rate information for the store.

        :return: The exchange_rates of this DirectoryDataCurrencyInformationInterface.
        :rtype: list[DirectoryDataExchangeRateInterface]
        """
        return self._exchange_rates

    @exchange_rates.setter
    def exchange_rates(self, exchange_rates):
        """
        Sets the exchange_rates of this DirectoryDataCurrencyInformationInterface.
        The list of exchange rate information for the store.

        :param exchange_rates: The exchange_rates of this DirectoryDataCurrencyInformationInterface.
        :type: list[DirectoryDataExchangeRateInterface]
        """
        if exchange_rates is None:
            raise ValueError("Invalid value for `exchange_rates`, must not be `None`")

        self._exchange_rates = exchange_rates

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this DirectoryDataCurrencyInformationInterface.

        :return: The extension_attributes of this DirectoryDataCurrencyInformationInterface.
        :rtype: DirectoryDataCurrencyInformationExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this DirectoryDataCurrencyInformationInterface.

        :param extension_attributes: The extension_attributes of this DirectoryDataCurrencyInformationInterface.
        :type: DirectoryDataCurrencyInformationExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DirectoryDataCurrencyInformationInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
