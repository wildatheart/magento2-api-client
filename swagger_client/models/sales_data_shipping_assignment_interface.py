# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SalesDataShippingAssignmentInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shipping': 'SalesDataShippingInterface',
        'items': 'list[SalesDataOrderItemInterface]',
        'stock_id': 'int',
        'extension_attributes': 'SalesDataShippingAssignmentExtensionInterface'
    }

    attribute_map = {
        'shipping': 'shipping',
        'items': 'items',
        'stock_id': 'stock_id',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, shipping=None, items=None, stock_id=None, extension_attributes=None):
        """
        SalesDataShippingAssignmentInterface - a model defined in Swagger
        """

        self._shipping = None
        self._items = None
        self._stock_id = None
        self._extension_attributes = None

        self.shipping = shipping
        self.items = items
        if stock_id is not None:
          self.stock_id = stock_id
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def shipping(self):
        """
        Gets the shipping of this SalesDataShippingAssignmentInterface.

        :return: The shipping of this SalesDataShippingAssignmentInterface.
        :rtype: SalesDataShippingInterface
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """
        Sets the shipping of this SalesDataShippingAssignmentInterface.

        :param shipping: The shipping of this SalesDataShippingAssignmentInterface.
        :type: SalesDataShippingInterface
        """
        if shipping is None:
            raise ValueError("Invalid value for `shipping`, must not be `None`")

        self._shipping = shipping

    @property
    def items(self):
        """
        Gets the items of this SalesDataShippingAssignmentInterface.
        Order items of shipping assignment

        :return: The items of this SalesDataShippingAssignmentInterface.
        :rtype: list[SalesDataOrderItemInterface]
        """
        return self._items

    @items.setter
    def items(self, items):
        """
        Sets the items of this SalesDataShippingAssignmentInterface.
        Order items of shipping assignment

        :param items: The items of this SalesDataShippingAssignmentInterface.
        :type: list[SalesDataOrderItemInterface]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def stock_id(self):
        """
        Gets the stock_id of this SalesDataShippingAssignmentInterface.
        Stock id

        :return: The stock_id of this SalesDataShippingAssignmentInterface.
        :rtype: int
        """
        return self._stock_id

    @stock_id.setter
    def stock_id(self, stock_id):
        """
        Sets the stock_id of this SalesDataShippingAssignmentInterface.
        Stock id

        :param stock_id: The stock_id of this SalesDataShippingAssignmentInterface.
        :type: int
        """

        self._stock_id = stock_id

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this SalesDataShippingAssignmentInterface.

        :return: The extension_attributes of this SalesDataShippingAssignmentInterface.
        :rtype: SalesDataShippingAssignmentExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this SalesDataShippingAssignmentInterface.

        :param extension_attributes: The extension_attributes of this SalesDataShippingAssignmentInterface.
        :type: SalesDataShippingAssignmentExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SalesDataShippingAssignmentInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
