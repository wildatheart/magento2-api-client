# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CmsDataBlockInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'identifier': 'str',
        'title': 'str',
        'content': 'str',
        'creation_time': 'str',
        'update_time': 'str',
        'active': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'identifier': 'identifier',
        'title': 'title',
        'content': 'content',
        'creation_time': 'creation_time',
        'update_time': 'update_time',
        'active': 'active'
    }

    def __init__(self, id=None, identifier=None, title=None, content=None, creation_time=None, update_time=None, active=None):
        """
        CmsDataBlockInterface - a model defined in Swagger
        """

        self._id = None
        self._identifier = None
        self._title = None
        self._content = None
        self._creation_time = None
        self._update_time = None
        self._active = None

        if id is not None:
          self.id = id
        self.identifier = identifier
        if title is not None:
          self.title = title
        if content is not None:
          self.content = content
        if creation_time is not None:
          self.creation_time = creation_time
        if update_time is not None:
          self.update_time = update_time
        if active is not None:
          self.active = active

    @property
    def id(self):
        """
        Gets the id of this CmsDataBlockInterface.
        ID

        :return: The id of this CmsDataBlockInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CmsDataBlockInterface.
        ID

        :param id: The id of this CmsDataBlockInterface.
        :type: int
        """

        self._id = id

    @property
    def identifier(self):
        """
        Gets the identifier of this CmsDataBlockInterface.
        Identifier

        :return: The identifier of this CmsDataBlockInterface.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this CmsDataBlockInterface.
        Identifier

        :param identifier: The identifier of this CmsDataBlockInterface.
        :type: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")

        self._identifier = identifier

    @property
    def title(self):
        """
        Gets the title of this CmsDataBlockInterface.
        Title

        :return: The title of this CmsDataBlockInterface.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this CmsDataBlockInterface.
        Title

        :param title: The title of this CmsDataBlockInterface.
        :type: str
        """

        self._title = title

    @property
    def content(self):
        """
        Gets the content of this CmsDataBlockInterface.
        Content

        :return: The content of this CmsDataBlockInterface.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this CmsDataBlockInterface.
        Content

        :param content: The content of this CmsDataBlockInterface.
        :type: str
        """

        self._content = content

    @property
    def creation_time(self):
        """
        Gets the creation_time of this CmsDataBlockInterface.
        Creation time

        :return: The creation_time of this CmsDataBlockInterface.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """
        Sets the creation_time of this CmsDataBlockInterface.
        Creation time

        :param creation_time: The creation_time of this CmsDataBlockInterface.
        :type: str
        """

        self._creation_time = creation_time

    @property
    def update_time(self):
        """
        Gets the update_time of this CmsDataBlockInterface.
        Update time

        :return: The update_time of this CmsDataBlockInterface.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """
        Sets the update_time of this CmsDataBlockInterface.
        Update time

        :param update_time: The update_time of this CmsDataBlockInterface.
        :type: str
        """

        self._update_time = update_time

    @property
    def active(self):
        """
        Gets the active of this CmsDataBlockInterface.
        Active

        :return: The active of this CmsDataBlockInterface.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this CmsDataBlockInterface.
        Active

        :param active: The active of this CmsDataBlockInterface.
        :type: bool
        """

        self._active = active

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CmsDataBlockInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
