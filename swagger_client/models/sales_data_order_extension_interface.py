# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SalesDataOrderExtensionInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shipping_assignments': 'list[SalesDataShippingAssignmentInterface]',
        'gift_message': 'GiftMessageDataMessageInterface',
        'applied_taxes': 'list[TaxDataOrderTaxDetailsAppliedTaxInterface]',
        'item_applied_taxes': 'list[TaxDataOrderTaxDetailsItemInterface]',
        'converting_from_quote': 'bool'
    }

    attribute_map = {
        'shipping_assignments': 'shipping_assignments',
        'gift_message': 'gift_message',
        'applied_taxes': 'applied_taxes',
        'item_applied_taxes': 'item_applied_taxes',
        'converting_from_quote': 'converting_from_quote'
    }

    def __init__(self, shipping_assignments=None, gift_message=None, applied_taxes=None, item_applied_taxes=None, converting_from_quote=None):
        """
        SalesDataOrderExtensionInterface - a model defined in Swagger
        """

        self._shipping_assignments = None
        self._gift_message = None
        self._applied_taxes = None
        self._item_applied_taxes = None
        self._converting_from_quote = None

        if shipping_assignments is not None:
          self.shipping_assignments = shipping_assignments
        if gift_message is not None:
          self.gift_message = gift_message
        if applied_taxes is not None:
          self.applied_taxes = applied_taxes
        if item_applied_taxes is not None:
          self.item_applied_taxes = item_applied_taxes
        if converting_from_quote is not None:
          self.converting_from_quote = converting_from_quote

    @property
    def shipping_assignments(self):
        """
        Gets the shipping_assignments of this SalesDataOrderExtensionInterface.

        :return: The shipping_assignments of this SalesDataOrderExtensionInterface.
        :rtype: list[SalesDataShippingAssignmentInterface]
        """
        return self._shipping_assignments

    @shipping_assignments.setter
    def shipping_assignments(self, shipping_assignments):
        """
        Sets the shipping_assignments of this SalesDataOrderExtensionInterface.

        :param shipping_assignments: The shipping_assignments of this SalesDataOrderExtensionInterface.
        :type: list[SalesDataShippingAssignmentInterface]
        """

        self._shipping_assignments = shipping_assignments

    @property
    def gift_message(self):
        """
        Gets the gift_message of this SalesDataOrderExtensionInterface.

        :return: The gift_message of this SalesDataOrderExtensionInterface.
        :rtype: GiftMessageDataMessageInterface
        """
        return self._gift_message

    @gift_message.setter
    def gift_message(self, gift_message):
        """
        Sets the gift_message of this SalesDataOrderExtensionInterface.

        :param gift_message: The gift_message of this SalesDataOrderExtensionInterface.
        :type: GiftMessageDataMessageInterface
        """

        self._gift_message = gift_message

    @property
    def applied_taxes(self):
        """
        Gets the applied_taxes of this SalesDataOrderExtensionInterface.

        :return: The applied_taxes of this SalesDataOrderExtensionInterface.
        :rtype: list[TaxDataOrderTaxDetailsAppliedTaxInterface]
        """
        return self._applied_taxes

    @applied_taxes.setter
    def applied_taxes(self, applied_taxes):
        """
        Sets the applied_taxes of this SalesDataOrderExtensionInterface.

        :param applied_taxes: The applied_taxes of this SalesDataOrderExtensionInterface.
        :type: list[TaxDataOrderTaxDetailsAppliedTaxInterface]
        """

        self._applied_taxes = applied_taxes

    @property
    def item_applied_taxes(self):
        """
        Gets the item_applied_taxes of this SalesDataOrderExtensionInterface.

        :return: The item_applied_taxes of this SalesDataOrderExtensionInterface.
        :rtype: list[TaxDataOrderTaxDetailsItemInterface]
        """
        return self._item_applied_taxes

    @item_applied_taxes.setter
    def item_applied_taxes(self, item_applied_taxes):
        """
        Sets the item_applied_taxes of this SalesDataOrderExtensionInterface.

        :param item_applied_taxes: The item_applied_taxes of this SalesDataOrderExtensionInterface.
        :type: list[TaxDataOrderTaxDetailsItemInterface]
        """

        self._item_applied_taxes = item_applied_taxes

    @property
    def converting_from_quote(self):
        """
        Gets the converting_from_quote of this SalesDataOrderExtensionInterface.

        :return: The converting_from_quote of this SalesDataOrderExtensionInterface.
        :rtype: bool
        """
        return self._converting_from_quote

    @converting_from_quote.setter
    def converting_from_quote(self, converting_from_quote):
        """
        Sets the converting_from_quote of this SalesDataOrderExtensionInterface.

        :param converting_from_quote: The converting_from_quote of this SalesDataOrderExtensionInterface.
        :type: bool
        """

        self._converting_from_quote = converting_from_quote

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SalesDataOrderExtensionInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
