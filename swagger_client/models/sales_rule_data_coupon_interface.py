# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SalesRuleDataCouponInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'coupon_id': 'int',
        'rule_id': 'int',
        'code': 'str',
        'usage_limit': 'int',
        'usage_per_customer': 'int',
        'times_used': 'int',
        'expiration_date': 'str',
        'is_primary': 'bool',
        'created_at': 'str',
        'type': 'int',
        'extension_attributes': 'SalesRuleDataCouponExtensionInterface'
    }

    attribute_map = {
        'coupon_id': 'coupon_id',
        'rule_id': 'rule_id',
        'code': 'code',
        'usage_limit': 'usage_limit',
        'usage_per_customer': 'usage_per_customer',
        'times_used': 'times_used',
        'expiration_date': 'expiration_date',
        'is_primary': 'is_primary',
        'created_at': 'created_at',
        'type': 'type',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, coupon_id=None, rule_id=None, code=None, usage_limit=None, usage_per_customer=None, times_used=None, expiration_date=None, is_primary=None, created_at=None, type=None, extension_attributes=None):
        """
        SalesRuleDataCouponInterface - a model defined in Swagger
        """

        self._coupon_id = None
        self._rule_id = None
        self._code = None
        self._usage_limit = None
        self._usage_per_customer = None
        self._times_used = None
        self._expiration_date = None
        self._is_primary = None
        self._created_at = None
        self._type = None
        self._extension_attributes = None

        if coupon_id is not None:
          self.coupon_id = coupon_id
        self.rule_id = rule_id
        if code is not None:
          self.code = code
        if usage_limit is not None:
          self.usage_limit = usage_limit
        if usage_per_customer is not None:
          self.usage_per_customer = usage_per_customer
        self.times_used = times_used
        if expiration_date is not None:
          self.expiration_date = expiration_date
        self.is_primary = is_primary
        if created_at is not None:
          self.created_at = created_at
        if type is not None:
          self.type = type
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def coupon_id(self):
        """
        Gets the coupon_id of this SalesRuleDataCouponInterface.
        Coupon id

        :return: The coupon_id of this SalesRuleDataCouponInterface.
        :rtype: int
        """
        return self._coupon_id

    @coupon_id.setter
    def coupon_id(self, coupon_id):
        """
        Sets the coupon_id of this SalesRuleDataCouponInterface.
        Coupon id

        :param coupon_id: The coupon_id of this SalesRuleDataCouponInterface.
        :type: int
        """

        self._coupon_id = coupon_id

    @property
    def rule_id(self):
        """
        Gets the rule_id of this SalesRuleDataCouponInterface.
        The id of the rule associated with the coupon

        :return: The rule_id of this SalesRuleDataCouponInterface.
        :rtype: int
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """
        Sets the rule_id of this SalesRuleDataCouponInterface.
        The id of the rule associated with the coupon

        :param rule_id: The rule_id of this SalesRuleDataCouponInterface.
        :type: int
        """
        if rule_id is None:
            raise ValueError("Invalid value for `rule_id`, must not be `None`")

        self._rule_id = rule_id

    @property
    def code(self):
        """
        Gets the code of this SalesRuleDataCouponInterface.
        Coupon code

        :return: The code of this SalesRuleDataCouponInterface.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this SalesRuleDataCouponInterface.
        Coupon code

        :param code: The code of this SalesRuleDataCouponInterface.
        :type: str
        """

        self._code = code

    @property
    def usage_limit(self):
        """
        Gets the usage_limit of this SalesRuleDataCouponInterface.
        Usage limit

        :return: The usage_limit of this SalesRuleDataCouponInterface.
        :rtype: int
        """
        return self._usage_limit

    @usage_limit.setter
    def usage_limit(self, usage_limit):
        """
        Sets the usage_limit of this SalesRuleDataCouponInterface.
        Usage limit

        :param usage_limit: The usage_limit of this SalesRuleDataCouponInterface.
        :type: int
        """

        self._usage_limit = usage_limit

    @property
    def usage_per_customer(self):
        """
        Gets the usage_per_customer of this SalesRuleDataCouponInterface.
        Usage limit per customer

        :return: The usage_per_customer of this SalesRuleDataCouponInterface.
        :rtype: int
        """
        return self._usage_per_customer

    @usage_per_customer.setter
    def usage_per_customer(self, usage_per_customer):
        """
        Sets the usage_per_customer of this SalesRuleDataCouponInterface.
        Usage limit per customer

        :param usage_per_customer: The usage_per_customer of this SalesRuleDataCouponInterface.
        :type: int
        """

        self._usage_per_customer = usage_per_customer

    @property
    def times_used(self):
        """
        Gets the times_used of this SalesRuleDataCouponInterface.
        The number of times the coupon has been used

        :return: The times_used of this SalesRuleDataCouponInterface.
        :rtype: int
        """
        return self._times_used

    @times_used.setter
    def times_used(self, times_used):
        """
        Sets the times_used of this SalesRuleDataCouponInterface.
        The number of times the coupon has been used

        :param times_used: The times_used of this SalesRuleDataCouponInterface.
        :type: int
        """
        if times_used is None:
            raise ValueError("Invalid value for `times_used`, must not be `None`")

        self._times_used = times_used

    @property
    def expiration_date(self):
        """
        Gets the expiration_date of this SalesRuleDataCouponInterface.
        Expiration date

        :return: The expiration_date of this SalesRuleDataCouponInterface.
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """
        Sets the expiration_date of this SalesRuleDataCouponInterface.
        Expiration date

        :param expiration_date: The expiration_date of this SalesRuleDataCouponInterface.
        :type: str
        """

        self._expiration_date = expiration_date

    @property
    def is_primary(self):
        """
        Gets the is_primary of this SalesRuleDataCouponInterface.
        The coupon is primary coupon for the rule that it's associated with

        :return: The is_primary of this SalesRuleDataCouponInterface.
        :rtype: bool
        """
        return self._is_primary

    @is_primary.setter
    def is_primary(self, is_primary):
        """
        Sets the is_primary of this SalesRuleDataCouponInterface.
        The coupon is primary coupon for the rule that it's associated with

        :param is_primary: The is_primary of this SalesRuleDataCouponInterface.
        :type: bool
        """
        if is_primary is None:
            raise ValueError("Invalid value for `is_primary`, must not be `None`")

        self._is_primary = is_primary

    @property
    def created_at(self):
        """
        Gets the created_at of this SalesRuleDataCouponInterface.
        When the coupon is created

        :return: The created_at of this SalesRuleDataCouponInterface.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this SalesRuleDataCouponInterface.
        When the coupon is created

        :param created_at: The created_at of this SalesRuleDataCouponInterface.
        :type: str
        """

        self._created_at = created_at

    @property
    def type(self):
        """
        Gets the type of this SalesRuleDataCouponInterface.
        Of coupon

        :return: The type of this SalesRuleDataCouponInterface.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this SalesRuleDataCouponInterface.
        Of coupon

        :param type: The type of this SalesRuleDataCouponInterface.
        :type: int
        """

        self._type = type

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this SalesRuleDataCouponInterface.

        :return: The extension_attributes of this SalesRuleDataCouponInterface.
        :rtype: SalesRuleDataCouponExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this SalesRuleDataCouponInterface.

        :param extension_attributes: The extension_attributes of this SalesRuleDataCouponInterface.
        :type: SalesRuleDataCouponExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SalesRuleDataCouponInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
