# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CheckoutDataShippingInformationInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shipping_address': 'QuoteDataAddressInterface',
        'billing_address': 'QuoteDataAddressInterface',
        'shipping_method_code': 'str',
        'shipping_carrier_code': 'str',
        'extension_attributes': 'CheckoutDataShippingInformationExtensionInterface',
        'custom_attributes': 'list[FrameworkAttributeInterface]'
    }

    attribute_map = {
        'shipping_address': 'shipping_address',
        'billing_address': 'billing_address',
        'shipping_method_code': 'shipping_method_code',
        'shipping_carrier_code': 'shipping_carrier_code',
        'extension_attributes': 'extension_attributes',
        'custom_attributes': 'custom_attributes'
    }

    def __init__(self, shipping_address=None, billing_address=None, shipping_method_code=None, shipping_carrier_code=None, extension_attributes=None, custom_attributes=None):
        """
        CheckoutDataShippingInformationInterface - a model defined in Swagger
        """

        self._shipping_address = None
        self._billing_address = None
        self._shipping_method_code = None
        self._shipping_carrier_code = None
        self._extension_attributes = None
        self._custom_attributes = None

        self.shipping_address = shipping_address
        if billing_address is not None:
          self.billing_address = billing_address
        self.shipping_method_code = shipping_method_code
        self.shipping_carrier_code = shipping_carrier_code
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes
        if custom_attributes is not None:
          self.custom_attributes = custom_attributes

    @property
    def shipping_address(self):
        """
        Gets the shipping_address of this CheckoutDataShippingInformationInterface.

        :return: The shipping_address of this CheckoutDataShippingInformationInterface.
        :rtype: QuoteDataAddressInterface
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """
        Sets the shipping_address of this CheckoutDataShippingInformationInterface.

        :param shipping_address: The shipping_address of this CheckoutDataShippingInformationInterface.
        :type: QuoteDataAddressInterface
        """
        if shipping_address is None:
            raise ValueError("Invalid value for `shipping_address`, must not be `None`")

        self._shipping_address = shipping_address

    @property
    def billing_address(self):
        """
        Gets the billing_address of this CheckoutDataShippingInformationInterface.

        :return: The billing_address of this CheckoutDataShippingInformationInterface.
        :rtype: QuoteDataAddressInterface
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """
        Sets the billing_address of this CheckoutDataShippingInformationInterface.

        :param billing_address: The billing_address of this CheckoutDataShippingInformationInterface.
        :type: QuoteDataAddressInterface
        """

        self._billing_address = billing_address

    @property
    def shipping_method_code(self):
        """
        Gets the shipping_method_code of this CheckoutDataShippingInformationInterface.
        Shipping method code

        :return: The shipping_method_code of this CheckoutDataShippingInformationInterface.
        :rtype: str
        """
        return self._shipping_method_code

    @shipping_method_code.setter
    def shipping_method_code(self, shipping_method_code):
        """
        Sets the shipping_method_code of this CheckoutDataShippingInformationInterface.
        Shipping method code

        :param shipping_method_code: The shipping_method_code of this CheckoutDataShippingInformationInterface.
        :type: str
        """
        if shipping_method_code is None:
            raise ValueError("Invalid value for `shipping_method_code`, must not be `None`")

        self._shipping_method_code = shipping_method_code

    @property
    def shipping_carrier_code(self):
        """
        Gets the shipping_carrier_code of this CheckoutDataShippingInformationInterface.
        Carrier code

        :return: The shipping_carrier_code of this CheckoutDataShippingInformationInterface.
        :rtype: str
        """
        return self._shipping_carrier_code

    @shipping_carrier_code.setter
    def shipping_carrier_code(self, shipping_carrier_code):
        """
        Sets the shipping_carrier_code of this CheckoutDataShippingInformationInterface.
        Carrier code

        :param shipping_carrier_code: The shipping_carrier_code of this CheckoutDataShippingInformationInterface.
        :type: str
        """
        if shipping_carrier_code is None:
            raise ValueError("Invalid value for `shipping_carrier_code`, must not be `None`")

        self._shipping_carrier_code = shipping_carrier_code

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this CheckoutDataShippingInformationInterface.

        :return: The extension_attributes of this CheckoutDataShippingInformationInterface.
        :rtype: CheckoutDataShippingInformationExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this CheckoutDataShippingInformationInterface.

        :param extension_attributes: The extension_attributes of this CheckoutDataShippingInformationInterface.
        :type: CheckoutDataShippingInformationExtensionInterface
        """

        self._extension_attributes = extension_attributes

    @property
    def custom_attributes(self):
        """
        Gets the custom_attributes of this CheckoutDataShippingInformationInterface.
        Custom attributes values.

        :return: The custom_attributes of this CheckoutDataShippingInformationInterface.
        :rtype: list[FrameworkAttributeInterface]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """
        Sets the custom_attributes of this CheckoutDataShippingInformationInterface.
        Custom attributes values.

        :param custom_attributes: The custom_attributes of this CheckoutDataShippingInformationInterface.
        :type: list[FrameworkAttributeInterface]
        """

        self._custom_attributes = custom_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CheckoutDataShippingInformationInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
