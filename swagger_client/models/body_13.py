# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Body13(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_email': 'str',
        'website_id': 'int'
    }

    attribute_map = {
        'customer_email': 'customerEmail',
        'website_id': 'websiteId'
    }

    def __init__(self, customer_email=None, website_id=None):
        """
        Body13 - a model defined in Swagger
        """

        self._customer_email = None
        self._website_id = None

        self.customer_email = customer_email
        if website_id is not None:
          self.website_id = website_id

    @property
    def customer_email(self):
        """
        Gets the customer_email of this Body13.

        :return: The customer_email of this Body13.
        :rtype: str
        """
        return self._customer_email

    @customer_email.setter
    def customer_email(self, customer_email):
        """
        Sets the customer_email of this Body13.

        :param customer_email: The customer_email of this Body13.
        :type: str
        """
        if customer_email is None:
            raise ValueError("Invalid value for `customer_email`, must not be `None`")

        self._customer_email = customer_email

    @property
    def website_id(self):
        """
        Gets the website_id of this Body13.
        If not set, will use the current websiteId

        :return: The website_id of this Body13.
        :rtype: int
        """
        return self._website_id

    @website_id.setter
    def website_id(self, website_id):
        """
        Sets the website_id of this Body13.
        If not set, will use the current websiteId

        :param website_id: The website_id of this Body13.
        :type: int
        """

        self._website_id = website_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Body13):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
