# coding: utf-8

"""
    Magento Community

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SalesDataTransactionInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_id': 'int',
        'parent_id': 'int',
        'order_id': 'int',
        'payment_id': 'int',
        'txn_id': 'str',
        'parent_txn_id': 'str',
        'txn_type': 'str',
        'is_closed': 'int',
        'additional_information': 'list[str]',
        'created_at': 'str',
        'child_transactions': 'list[SalesDataTransactionInterface]',
        'extension_attributes': 'SalesDataTransactionExtensionInterface'
    }

    attribute_map = {
        'transaction_id': 'transaction_id',
        'parent_id': 'parent_id',
        'order_id': 'order_id',
        'payment_id': 'payment_id',
        'txn_id': 'txn_id',
        'parent_txn_id': 'parent_txn_id',
        'txn_type': 'txn_type',
        'is_closed': 'is_closed',
        'additional_information': 'additional_information',
        'created_at': 'created_at',
        'child_transactions': 'child_transactions',
        'extension_attributes': 'extension_attributes'
    }

    def __init__(self, transaction_id=None, parent_id=None, order_id=None, payment_id=None, txn_id=None, parent_txn_id=None, txn_type=None, is_closed=None, additional_information=None, created_at=None, child_transactions=None, extension_attributes=None):
        """
        SalesDataTransactionInterface - a model defined in Swagger
        """

        self._transaction_id = None
        self._parent_id = None
        self._order_id = None
        self._payment_id = None
        self._txn_id = None
        self._parent_txn_id = None
        self._txn_type = None
        self._is_closed = None
        self._additional_information = None
        self._created_at = None
        self._child_transactions = None
        self._extension_attributes = None

        self.transaction_id = transaction_id
        if parent_id is not None:
          self.parent_id = parent_id
        self.order_id = order_id
        self.payment_id = payment_id
        self.txn_id = txn_id
        self.parent_txn_id = parent_txn_id
        self.txn_type = txn_type
        self.is_closed = is_closed
        if additional_information is not None:
          self.additional_information = additional_information
        self.created_at = created_at
        self.child_transactions = child_transactions
        if extension_attributes is not None:
          self.extension_attributes = extension_attributes

    @property
    def transaction_id(self):
        """
        Gets the transaction_id of this SalesDataTransactionInterface.
        Transaction ID.

        :return: The transaction_id of this SalesDataTransactionInterface.
        :rtype: int
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """
        Sets the transaction_id of this SalesDataTransactionInterface.
        Transaction ID.

        :param transaction_id: The transaction_id of this SalesDataTransactionInterface.
        :type: int
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id

    @property
    def parent_id(self):
        """
        Gets the parent_id of this SalesDataTransactionInterface.
        The parent ID for the transaction. Otherwise, null.

        :return: The parent_id of this SalesDataTransactionInterface.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """
        Sets the parent_id of this SalesDataTransactionInterface.
        The parent ID for the transaction. Otherwise, null.

        :param parent_id: The parent_id of this SalesDataTransactionInterface.
        :type: int
        """

        self._parent_id = parent_id

    @property
    def order_id(self):
        """
        Gets the order_id of this SalesDataTransactionInterface.
        Order ID.

        :return: The order_id of this SalesDataTransactionInterface.
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """
        Sets the order_id of this SalesDataTransactionInterface.
        Order ID.

        :param order_id: The order_id of this SalesDataTransactionInterface.
        :type: int
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")

        self._order_id = order_id

    @property
    def payment_id(self):
        """
        Gets the payment_id of this SalesDataTransactionInterface.
        Payment ID.

        :return: The payment_id of this SalesDataTransactionInterface.
        :rtype: int
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """
        Sets the payment_id of this SalesDataTransactionInterface.
        Payment ID.

        :param payment_id: The payment_id of this SalesDataTransactionInterface.
        :type: int
        """
        if payment_id is None:
            raise ValueError("Invalid value for `payment_id`, must not be `None`")

        self._payment_id = payment_id

    @property
    def txn_id(self):
        """
        Gets the txn_id of this SalesDataTransactionInterface.
        Transaction business ID.

        :return: The txn_id of this SalesDataTransactionInterface.
        :rtype: str
        """
        return self._txn_id

    @txn_id.setter
    def txn_id(self, txn_id):
        """
        Sets the txn_id of this SalesDataTransactionInterface.
        Transaction business ID.

        :param txn_id: The txn_id of this SalesDataTransactionInterface.
        :type: str
        """
        if txn_id is None:
            raise ValueError("Invalid value for `txn_id`, must not be `None`")

        self._txn_id = txn_id

    @property
    def parent_txn_id(self):
        """
        Gets the parent_txn_id of this SalesDataTransactionInterface.
        Parent transaction business ID.

        :return: The parent_txn_id of this SalesDataTransactionInterface.
        :rtype: str
        """
        return self._parent_txn_id

    @parent_txn_id.setter
    def parent_txn_id(self, parent_txn_id):
        """
        Sets the parent_txn_id of this SalesDataTransactionInterface.
        Parent transaction business ID.

        :param parent_txn_id: The parent_txn_id of this SalesDataTransactionInterface.
        :type: str
        """
        if parent_txn_id is None:
            raise ValueError("Invalid value for `parent_txn_id`, must not be `None`")

        self._parent_txn_id = parent_txn_id

    @property
    def txn_type(self):
        """
        Gets the txn_type of this SalesDataTransactionInterface.
        Transaction type.

        :return: The txn_type of this SalesDataTransactionInterface.
        :rtype: str
        """
        return self._txn_type

    @txn_type.setter
    def txn_type(self, txn_type):
        """
        Sets the txn_type of this SalesDataTransactionInterface.
        Transaction type.

        :param txn_type: The txn_type of this SalesDataTransactionInterface.
        :type: str
        """
        if txn_type is None:
            raise ValueError("Invalid value for `txn_type`, must not be `None`")

        self._txn_type = txn_type

    @property
    def is_closed(self):
        """
        Gets the is_closed of this SalesDataTransactionInterface.
        Is-closed flag value.

        :return: The is_closed of this SalesDataTransactionInterface.
        :rtype: int
        """
        return self._is_closed

    @is_closed.setter
    def is_closed(self, is_closed):
        """
        Sets the is_closed of this SalesDataTransactionInterface.
        Is-closed flag value.

        :param is_closed: The is_closed of this SalesDataTransactionInterface.
        :type: int
        """
        if is_closed is None:
            raise ValueError("Invalid value for `is_closed`, must not be `None`")

        self._is_closed = is_closed

    @property
    def additional_information(self):
        """
        Gets the additional_information of this SalesDataTransactionInterface.
        Array of additional information. Otherwise, null.

        :return: The additional_information of this SalesDataTransactionInterface.
        :rtype: list[str]
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """
        Sets the additional_information of this SalesDataTransactionInterface.
        Array of additional information. Otherwise, null.

        :param additional_information: The additional_information of this SalesDataTransactionInterface.
        :type: list[str]
        """

        self._additional_information = additional_information

    @property
    def created_at(self):
        """
        Gets the created_at of this SalesDataTransactionInterface.
        Created-at timestamp.

        :return: The created_at of this SalesDataTransactionInterface.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this SalesDataTransactionInterface.
        Created-at timestamp.

        :param created_at: The created_at of this SalesDataTransactionInterface.
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def child_transactions(self):
        """
        Gets the child_transactions of this SalesDataTransactionInterface.
        Array of child transactions.

        :return: The child_transactions of this SalesDataTransactionInterface.
        :rtype: list[SalesDataTransactionInterface]
        """
        return self._child_transactions

    @child_transactions.setter
    def child_transactions(self, child_transactions):
        """
        Sets the child_transactions of this SalesDataTransactionInterface.
        Array of child transactions.

        :param child_transactions: The child_transactions of this SalesDataTransactionInterface.
        :type: list[SalesDataTransactionInterface]
        """
        if child_transactions is None:
            raise ValueError("Invalid value for `child_transactions`, must not be `None`")

        self._child_transactions = child_transactions

    @property
    def extension_attributes(self):
        """
        Gets the extension_attributes of this SalesDataTransactionInterface.

        :return: The extension_attributes of this SalesDataTransactionInterface.
        :rtype: SalesDataTransactionExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """
        Sets the extension_attributes of this SalesDataTransactionInterface.

        :param extension_attributes: The extension_attributes of this SalesDataTransactionInterface.
        :type: SalesDataTransactionExtensionInterface
        """

        self._extension_attributes = extension_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SalesDataTransactionInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
